"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для первого скрипта
"""



"""
Оптимизировал решение  Задание 2 урока 2. вместо рекурсии использовал цикл. 

при профелировании при помощи profile результаты следующие:
рекурсия - increment - 01, mem usage - 19.7
цикл - increment - 00, mem usage - 19.8
Учитывать только инкремент?

при профелировании при помощи memory_usage результаты следующие:
рекурсия 0.09375 Mib
цикл  0.0 Mib

Если вызвать отдельно цикл то результат его будет - 0.00390625 Mib
Если вызвать отдельно рекурсию  то результат его будет - 0.09765625 Mib

"""
from memory_profiler import profile, memory_usage


def memory(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f"Выполнение заняло {mem_diff} Mib")
        return res

    return wrapper


@memory
def shell(shell_nums):
    def count_parity(nums, even=0, not_even=0):
        if nums == 0:  # с базового случая начнется разворот
            return even, not_even  # возвращаем счетчики
        else:
            num = nums % 10  # отделяем число
            nums = nums // 10  # от исходного окалываем последнее число

            if num % 2 == 0:  # если четное, то прибавляем к четному счетчику
                even += 1
            else:  # если не четное, то не к четному
                not_even += 1

            return count_parity(nums, even, not_even)  # вызываем функцию с другими даными

    print(f"{count_parity(shell_nums)}")


@memory
def count_par(nums):
    even = 0
    not_even = 0
    for i in str(nums):
        if int(i) % 2 == 0:
            even += 1
        else:
            not_even += 1
    return even, not_even


user_nums = int(
    "464568454545456465456456454545415415341351352143524135241324135213521532135213521352413524535645345453")
print(shell(user_nums))
# print(count_par(user_nums))
