"""
Задание 4.
Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.
Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

from random import sample, choice


##############################################################################
"""
Сложность: O(N^2).
"""


def check_1(dict_obj, login):
    for i in dict_obj:                                                   # O(N)
        if i == login:                                                   # O(1)
            for j in dict_obj[i]:                                        # O(N)
                if dict_obj[i][j]:                                       # O(1)
                    message = 'Введите пароль для окончательной ' \
                               'аутентификации'                          # O(1)
                    break
                else:
                    message = 'Ваша учетная запись не активирована. ' \
                              'Пройдите полную активацию!'               # O(1)
                    break
            break
    else:
        message = 'Ваша учетная запись не существует'                    # O(1)
    return message                                                       # O(1)


##############################################################################
"""
Сложность: O(N).
"""


def check_2(dict_obj, login):
    if login in dict_obj:                                                # O(N)
        if dict_obj[login][0] is True:                                   # O(1)
            message = 'Введите пароль для окончательной аутентификации'  # O(1)
        else:
            message = 'Ваша учетная запись не активирована. ' \
                      'Пройдите полную активацию!'                       # O(1)
    else:
        message = 'Ваша учетная запись не существует'                    # O(1)
    return message                                                       # O(1)


logins = ('quigley.keegan', 'mante.brandon', 'mveum', 'junior.mayert',
                   'bechtelar.isabel', 'alex.smitham', 'don.vic')
passwords = sample(range(100000, 1000000), len(logins))
activation = [choice([True, False]) for i in range(len(logins))]
act_pass = list(zip(activation, passwords))
log_pas = dict(zip(logins, act_pass))
print(log_pas)
print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
print(check_1(log_pas, 'mante.brandon'))
print(check_2(log_pas, 'mante.brandon'))


"""
Второе решение более эффективно так, как его сложность O(N), и отсутсвуют 
операторы break и код короче
"""
