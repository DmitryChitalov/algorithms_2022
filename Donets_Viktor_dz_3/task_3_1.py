"""
Задание 1.
Реализуйте функции:
a) заполнение списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
b) получение элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
с) удаление элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

from time import time


def time_decor(function):
    def execution_time(*args, **kwargs):
        start = time()
        ex_func = function(*args, **kwargs)
        end = time()
        time_result = end - start
        print(f'Функция {function.__name__} выполнилась за: '
              f'{time_result}')
        return ex_func

    return execution_time

# Заполнение
@time_decor
def time_list_completion(lst, n):
    for i in range(n):
        lst.append(i)                                                  # O(1)


@time_decor
def time_dict_completion(dct, n):
    for i in range(n):
        dct[i] = i                                                     # O(1)


# Получение элемента
@time_decor
def time_get_element_list(lst, n):
    for i in range(n):
        lst[i] = i + 1                                                 # O(1)


@time_decor
def time_get_element_dict(dct, n):
    for i in range(n):
        dct[i] = i + 1                                                 # O(1)


# Удаление элемента
@time_decor
def time_del_list(lst, n):
    for i in range(n):
        lst.pop()                                                      # O(1)


@time_decor
def time_del_dict(dct, n):
    for i in range(n):
        dct.pop(i)                                                     # O(1)


some_list = []
some_dict = {}
amt = 1000000

time_list_completion(some_list, amt)
print('!' * 50)
time_dict_completion(some_dict, amt)
print('!' * 50)
time_get_element_list(some_list, amt)
print('!' * 50)
time_get_element_dict(some_list, amt)
print('!' * 50)
time_del_list(some_list, amt)
print('!' * 50)
time_del_dict(some_dict, amt)
print('!' * 50)


"""
Функция time_list_completion выполнилась за: 0.09700298309326172
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Функция time_dict_completion выполнилась за: 0.12900114059448242
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Функция time_get_element_list выполнилась за: 0.06499624252319336
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Функция time_get_element_dict выполнилась за: 0.06699991226196289
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Функция time_del_list выполнилась за: 0.06499981880187988
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Функция time_del_dict выполнилась за: 0.09600472450256348
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Заполнение и удаление значений из словаря происходит дольше, из за хеш-таблиц
"""