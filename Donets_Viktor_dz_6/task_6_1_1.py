"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для второго скрипта
"""

from memory_profiler import profile

"""
Задание из курса основ Python.
Создать список, состоящий из кубов нечётных чисел от 1 до 100000
(куб X - третья степень числа X):
"""
@profile
def list_of_cubes(number):
    odd_numbers = []
    while number < 100000:
        if number % 2:
            odd_numbers.append(number ** 3)
            number += 1
        else:
            number += 1
    return odd_numbers


@profile
def list_of_cubes_1():
    odd_numbers = (i ** 3 for i in range(100000) if i % 2)
    return odd_numbers


list_of_cubes(1)
list_of_cubes_1()

"""
Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     4     19.5 MiB     19.5 MiB           1   @profile
     5                                         def list_of_cubes(number):
     6     19.5 MiB      0.0 MiB           1       odd_numbers = []
     7     22.0 MiB      0.0 MiB      100000       while number < 100000:
     8     22.0 MiB      0.0 MiB       99999           if number % 2:
     9     22.0 MiB      2.0 MiB       50000               odd_numbers.append(number ** 3)
    10     22.0 MiB      0.5 MiB       50000               number += 1
    11                                                 else:
    12     22.0 MiB      0.0 MiB       49999               number += 1
    13     22.0 MiB      0.0 MiB           1       return odd_numbers




Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16     21.0 MiB     21.0 MiB           1   @profile
    17                                         def list_of_cubes_1():
    18     21.0 MiB      0.0 MiB           1       odd_numbers = (i ** 3 for i in range(100000) if i % 2)
    19     21.0 MiB      0.0 MiB           1       return odd_numbers
"""
"""
Оптимизацию произвел при помощи создания герератора. Во втором случае 
Increment равен 0, т.е. дополнительная память не выделяется как в первом 
случае.
"""
