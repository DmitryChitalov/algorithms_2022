"""
Задание 4.
Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.
Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""
PER_PASS = {
    1: 1000,
    2: 41434,
    3: 871374187,
    4: 1873,
    5: 21938981,
    6: 123123,
}

per_activ = {
    1: 1,
    2: 0,
    3: 0,
    4: 1,
    5: 1,
    6: 1,
}


def check_acc(log: [int], pas: [int]) -> str:  # O(1)
    if PER_PASS.get(log) is None:  # O(1)
        return 'Аутентификация невозможна, аккаунта не существует'  # O(1)
    elif PER_PASS.get(log) == pas and per_activ.get(log):  # O(1)
        return 'Аутентификация успешна пройденна'  # O(1)
    elif PER_PASS.get(log) == pas and per_activ.get(log) == 0:  # O(1)
        return activ_acc(log)  # O(n)
    elif PER_PASS.get(log) != pas:  # O(1)
        return 'Аутентификация невозможна, неправильный пароль'  # O(1)
    else:
        return 'системная ошибка'  # O(1)


def activ_acc(log: [int]) -> str:  # O(1)
    qwe_act = input('Аутентификация невозможна, аккаунт не активирован \n Хотите активировать аккаунт? \n'
                    ' Ведите 1 для активации, 0 для отменны: ')  # O(1)
    if qwe_act == '1':  # O(1)
        per_activ[log] = 1  # O(1)
        return 'Аккаунт активирован, повторите аутентификацию'  # O(1)
    else:
        return 'Аккаунт не активирован'  # O(1)


#
def check_acc2() -> str:  # O(n)
    login = int(input('Введите логин: '))
    password = int(input('Введите пароль: '))
    if len(pasw) - 1 <= login:  # O(1)
        return 'Аутентификация невозможна, аккаунта не существует'  # O(1)
    elif pasw[login - 1] == password and actv[login - 1] == 1:  # O(1)
        return 'Аутентификация успешна пройденна'  # O(1)
    elif pasw[login - 1] == password and actv[login - 1] == 0:  # O(1)
        return activ_acc2(login)  # O(n)
    elif pasw[login - 1] != password:  # O(1)
        return 'Аутентификация невозможна, неправильный пароль'  # O(1)
    else:
        return 'системная ошибка'  # O(1)


def activ_acc2(log: [int]) -> str:  # O(n)
    global actv
    qwe_act = input('Аутентификация невозможна, аккаунт не активирован \n Хотите активировать аккаунт? \n'
                    ' Ведите 1 для активации, 0 для отменны: ')  # O(1)
    if qwe_act == '1':  # O(1)
        actv = list(actv)  # O(n)
        actv[log - 1] = 1  # O(1)
        actv = tuple(actv)  # O(n)
        return 'Аккаунт активирован, повторите аутентификацию'  # O(1)
    else:
        return 'Аккаунт не активирован'  # O(1)



login = int(input('Введите логин: '))
password = int(input('Введите пароль: '))
print(check_acc(login, password))

pasw = (1, 2, 3, 4, 5)
actv = (1, 0, 1, 0, 0)

print(check_acc2())
print(actv)

#Первый вариант выполнения задачи предподчительнее так как имеет сложность O(1)