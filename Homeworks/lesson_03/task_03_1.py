"""
Задание 1.
Реализуйте функции:
a) заполнение списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
b) получение элемента списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
с) удаление элемента списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

from time import time


def timer(func):
    def wrapper(*args):
        start = time()
        result = func(*args)
        end = time()
        print(f'Время работы функции {func.__name__}: {end-start}')
        return result
    return wrapper


@timer
def insert_list(n):                     # O(n)
    return [f'{i}' for i in range(n)]   # O(n)


@timer
def insert_dict(n):                        # O(n)
    return {i: f'{i}' for i in range(n)}   # O(n)


@timer
def get_item_list(lst):    # O(n)
    item = None            # O(1)
    for i in lst:          # O(n)
        item = i           # O(1)


@timer
def get_value_dict(dct):      # O(n)
    value = None              # O(1)
    for v in dct.values():    # O(n)
        value = v             # O(1)


@timer
def del_item_list(lst):         # O(n)
    for i in range(len(lst)):   # O(n)
        del lst[-1]             # O(1)


@timer
def del_value_dict(dct):         # O(n)
    for i in range(len(dct)):    # O(n)
        del dct[i]               # O(1)


if __name__ == '__main__':
    _list = insert_list(10)
    _dict = insert_dict(10)
    get_item_list(_list)
    get_value_dict(_dict)
    del_item_list(_list)
    del_value_dict(_dict)

# Словарь заполняется чуть медленнее, чем список,
# потому что при заполнении словаря вычисляется хеш для ключей.

# Время получения элемента из списка и словаря одинаковое.

# Удаление элементов из списка при таком алгоритме удаления
# происходит немного быстрее, чем удаление из словаря.
