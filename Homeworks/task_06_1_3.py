"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""

# Курс "Алгоритмы и структуры данных на Python."
# Задание к уроку 4:
# Приведен код, который позволяет сохранить в массиве индексы четных элементов другого массива.
# Сделайте замеры времени выполнения кода с помощью модуля timeit.
# Попробуйте оптимизировать код, чтобы снизить время выполнения.

from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff
    return wrapper


@decor
def func_2(nums):
    return [i for i in range(len(nums)) if nums[i] % 2 == 0]


@decor
def func_3(nums):
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            yield i


if __name__ == '__main__':
    lst = []
    for _ in range(10 ** 6):
        lst.append(_)

    result_1, mem_diff_1 = func_2(lst)
    print(f"Выполнение заняло {mem_diff_1} Mib")
    result_2, mem_diff_2 = func_3(lst)
    print(f"Выполнение заняло {mem_diff_2} Mib")

# Для оптимизации памяти была реализована функция-генератор с оператором yield
# для индексов чётных элементов другого массива.
# По результатам тестирования удалось добиться оптимизации памяти.
