"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""

# Курс "Алгоритмы и структуры данных на Python."
# Задание к уроку 3:
# Реализуйте функции:
# a) заполнение списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
#    заполнение словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
#    сделайте аналитику, что заполняется быстрее и почему
#    сделайте замеры времени

from sys import getsizeof
from pickle import dumps


def insert_dict(n):
    return {i: f'{i}' for i in range(n)}


if __name__ == '__main__':
    dict_test = insert_dict(10 ** 6)
    dict_test_binary = dumps(dict_test)
    print(f"Объём памяти, занимаемой словарём: {getsizeof(dict_test)} байт(а)")
    print(f"Объём памяти, занимаемой словарём в бинарном виде: {getsizeof(dict_test_binary)} байт(а)")

# Для оптимизации памяти было реализовано хранение словаря в бинарном виде при помощи модуля pickle.
# По результатам тестирования удалось добиться оптимизации памяти.

