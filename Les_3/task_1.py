"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""
from time import time


def time_done(function):
    def wrapper(*args):
        start = time()
        res = function(*args)
        print(time() - start)
        return res

    return wrapper


"""
А) Сложность заполнение и списка, и словаря в цикле линейная О(N)
Словарь заполняется медленнее из-за хэширования ключей
"""


@time_done
def list_creator(n):
    return [i for i in range(n)]


@time_done
def dict_creator(n):
    return {k: 'some value' for k in range(n)}


# погоняем на разных размерах
print('A) Время создания списков и словарей')
list_1 = list_creator(10)
dict_1 = dict_creator(10)
list_2 = list_creator(100)
dict_2 = dict_creator(100)
list_3 = list_creator(1000)
dict_3 = dict_creator(1000)
test_list = list_creator(1000000)
test_dict = dict_creator(1000000)

"""
Б) Для проверки возьмём список и словарь размеров в 1000000, поищем элементы
Время поиска в списке в зависимости от того, как далеко от list[0] находится искомый элемент
Время поиска в словаре не зависит искомого элемента
Для поиска в списке сложность линейная O(N), для словаря константная О(1)
"""
print('\nB) Время поиска элемента в списке и словаре')


@time_done
def el_list(search_list, el):
    for i in search_list:
        if i == el:
            return i


@time_done
def el_dict(search_dict, el):
    return search_dict[el]


# проверим на разных элементах
el_list(test_list, 100)
el_dict(test_dict, 100)
el_list(test_list, 1000)
el_dict(test_dict, 1000)
el_list(test_list, 999999)
el_dict(test_dict, 999999)

"""
C) Для проверки возьмём список и словарь размеров в 1000000, будем удалять элементы
Время удаления элемента из списка зависит от того, как далеко от list[0] находится искомый элемент
Время удаления элемента из словаря не зависит от удаляемого элемента
Для удаления из элемента из списка сложность линейная O(N), для словаря константная О(1)
"""

print('\nB) Время удаления элемента в списке и словаре')


@time_done
def list_delete(del_list, el):
    del_list.remove(el)


@time_done
def dict_delete(del_dict, el):
    del del_dict[el]


list_delete(test_list, 100)
dict_delete(test_dict, 100)
list_delete(test_list, 10000)
dict_delete(test_dict, 10000)
list_delete(test_list, 999999)
dict_delete(test_dict, 999999)
