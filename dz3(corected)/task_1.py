"""
Задание 1.
Реализуйте функции:
a) заполнение списка, оцените сложность в O-нотации
   заполнение словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
b) получение элемента списка, оцените сложность в O-нотации
   получение элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
с) удаление элемента списка, оцените сложность в O-нотации
   удаление элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""
from random import randint
import time


def time_func(func):
    def wrapper(*args):
        start_time = time.perf_counter()
        res = func(*args)
        print(time.perf_counter() - start_time)
        return res

    return wrapper


# a)
@time_func
def lst_add():
    lst = []
    for i in range(1000):
        lst.append(randint(0, 100))  # O(1)
    return fr'Заполнение списка: {lst}'


print(lst_add())


@time_func
def dict_add():
    dct = {}
    for i in range(100):
        dct[i] = randint(0, 100)  # O(1)
    return fr'Заполнение словоря: {dct}'


print(dict_add())

'''
В О - натации заполнение словоря это константная сложность, заполнение списка так же константная сложность.
Замеры времени показывают что словарь заполняется быстрее, список заполняется медленнее из-за генерации хеш-индексов.
'''


# b)
@time_func
def lst_receiving(lst, idx):
    return lst[idx]


lst_2 = [2, 3, 4, 5, 6, 7, 8, 9, 0]
print(fr'Получени элемента списка: {lst_receiving(lst_2, 6)}')


@time_func
def dct_receiving(dct, key):
    return dct[key]  # O(1)


dct_2 = {1: 32, 2: 45, 3: 56, 4: 466, 5: 46, 6: 832, 7: 123}
print(fr'Получение элемента словоря: {dct_receiving(dct_2, 6)}')

'''
Получение элемента из списка константная сложность,получение значения словоря по ключу так же константная сложность,
но замеры времени показали, что время получения элемента из словоря происходят намного быстрее
'''


# c)
@time_func
def del_el_lst(lst):
    for i in range(15):
        lst.pop(i)  # O(n)
    return lst


lst_1 = [4, 86, 41, 15, 23, 75, 26, 81, 10, 70, 37, 69, 20, 73, 65, 83, 1, 87, 69, 66, 53, 67, 54, 24, 69, 97, 24, 93,
         36, 28, 36, 55]
print(fr'Удаление из списка: {del_el_lst(lst_1)}')


@time_func
def del_el_dct(dct):
    for i in range(15):
        dct.pop(i)  # O(n)
    return dct


dct_1 = {0: 78, 1: 3, 2: 4, 3: 21, 4: 18, 5: 29, 6: 43, 7: 82, 8: 92, 9: 26, 10: 85, 11: 71, 12: 22, 13: 26, 14: 49,
         15: 31, 16: 25, 17: 82, 18: 87}
print(fr'Удаление из словоря: {del_el_dct(dct_1)}')

'''
Удаление элемента не из конца списка это сложность O(n) - зависит от количество удаляемых элементов,
удаление из словоря, так же сложность O(n),
замеры скорости показали, что удаление из списка происходят намного быстрее чем из словоря.
'''


@time_func
def change_el_lst(lst):
    for j in range(15):
        lst[j] = lst[j + 1]  # O(n)
    return lst


lst_2 = [17, 31, 96, 75, 73, 46, 34, 97, 82, 15, 41, 9, 17, 61, 31, 100, 80, 27, 54, 76, 92, 50, 79, 11, 2, 61, 52, 74,
         51, 9, 92, 47, 58, 95, 38, 100, 8, 69, 61, 45, 26, 19, 63, 52, 22, 38]
print(fr'Изменение элементов списка: {change_el_lst(lst_2)}')


@time_func
def change_el_dct(dct):
    for i in range(15):
        dct[i] = 'fix'  # O(n)
    return dct


dct_2 = {0: 8, 1: 52, 2: 82, 3: 75, 4: 20, 5: 46, 6: 91, 7: 29, 8: 76, 9: 59, 10: 10, 11: 66, 12: 44, 13: 9, 14: 64,
         15: 31, 16: 6, 17: 97, 18: 76, 19: 77, 20: 47, 21: 22, 22: 53, 23: 46, 24: 16, 25: 5, 26: 76, 27: 13, 28: 29,
         29: 82, 30: 77, 31: 53, 32: 30, 33: 27, 34: 82, 35: 100, 36: 36, 37: 88, 38: 22, 39: 4, 40: 85, 41: 64, 42: 39,
         43: 2}
print(fr'Изменение словоря: {change_el_dct(dct_2)}')

'''
Изменение словоря происходит намного быстрее, так как это константная сложнось O(1),
список изменяется медленнее так как это сложность линейная O(n)
'''
