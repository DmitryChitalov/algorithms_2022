"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для пятого скрипта
"""
from memory_profiler import profile

lst_1 = []
lst_2 = []

'''
Скрипт урока №5 задание №3 (функция наполнения списка)
'''


@profile
def append_num(lst):
    for i in range(10000):
        lst.append(i)
    return lst


@profile
def append_num_optimize(lst):
    lst = map(str, [i for i in range(10000)])
    return list(lst)


if __name__ == '__main__':
    append_num(lst_1)
    append_num_optimize(lst_2)
    print(append_num_optimize(lst_2))

'''
Оптимизировал скрипт при помощи встроенной функции map и List Comprehension.
Замеры памяти показали:
Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    42     20.1 MiB     20.1 MiB           1   @profile
    43                                         def append_num_optimize(lst):
    44     20.4 MiB      0.3 MiB       10003       lst = map(str, [i for i in range(10000)])
    45     21.1 MiB      0.7 MiB           1       return list(lst)
    
Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    42     21.1 MiB     21.1 MiB           1   @profile
    43                                         def append_num_optimize(lst):
    44     21.1 MiB      0.0 MiB       10003       lst = map(str, [i for i in range(10000)])
    45     21.2 MiB      0.1 MiB           1       return list(lst)
    
Видно что наполнение словаря при помощи append занимает больше памяти, 
в отличии от функции map и List Comprehension
В первом случае было 1.0 Mib
В оптимизированном 0.1 Mib
'''
