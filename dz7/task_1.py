"""
Задание 1.
Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции.
Обязательно доработайте алгоритм (сделайте его умнее)!
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.
Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""
from timeit import timeit
from random import randint

lst_1 = [randint(-100, 100) for _ in range(100)]
lst_2 = [i for i in range(100)]


# 1) Сортировка пузырьком по убыванию.
def sort_p(lst):
    n = 1
    while n < len(lst):
        for i in range(len(lst) - n):
            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
        n += 1
    return lst


print(f'Отсортированный список: {lst_2[::-1]}')
print(f'Не отсортированный список: {lst_1[:]}')
print('------------------------------------------')
print('1) Пузырьковая сортировка по убываниию:')
print("Замер пузырьковой сортировки на вход НЕ ОТСОРТИРОВАННЫЙ список: ")
print(timeit('sort_p(lst_1[:])', globals=globals(), number=100))
print(sort_p(lst_1[:]))
print('------------------------------------------')
print("2) Замер пузырьковой сортировки на вход ОТСОРТИРОВАННЫЙ список:")
print(timeit('sort_p(lst_2[::-1])', globals=globals(), number=100))
print(sort_p(lst_2[::-1]))



# 2) Доработанный вариант.
def sort_p_optimize(lst):
    n = 1
    f = True
    while n < len(lst):
        for i in range(len(lst) - n):
            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
                f = False
        if f is True and n == 1:
            break
        n += 1
    return lst

print('------------------------------------------')
print('3) Замер времени улучшенного скрипта, на вход подан НЕ ОТСОРТИРОВАННЫЙ список:')
print(sort_p_optimize(lst_1[:]))
print(timeit('sort_p_optimize(lst_1[:])', globals=globals(), number=100))
print('------------------------------------------')
print('4) Замер времени улучшенного скрипта, на вход подан ОТСОРТИРОВАННЫЙ список:')
print(sort_p_optimize(lst_2[::-1]))
print(timeit('sort_p_optimize(lst_2[::-1])', globals=globals(), number=100))


'''
Доработал скрипт пузырьковой сортировки при помощи флага, 
Если при первом проходе не было никаких изменений в списке, 
то флаг не меняется и значит получен уже отсортированный масив, и функция завершается.
Это позволило ускорить время в тех случаях когда на вход подается уже отсортированный масив,
так как флаг позволяет не делать много проходов по списку, 
а завершает программу после первого прохода,
в остальных случаях замеры показали приблизительно одинаковое время.

Замер пузырьковой сортировки на вход НЕ ОТСОРТИРОВАННЫЙ список: 
0.20012390000010782

Замер времени улучшенного скрипта, на вход подан НЕ ОТСОРТИРОВАННЫЙ список:
0.2003500000000713

Замер пузырьковой сортировки на вход ОТСОРТИРОВАННЫЙ список:
0.11146080000071379

Замер времени улучшенного скрипта, на вход подан ОТСОРТИРОВАННЫЙ список:
0.002290000000357395
'''