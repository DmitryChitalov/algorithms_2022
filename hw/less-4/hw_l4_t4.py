"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Обязательно напишите третью версию (здесь возможно даже решение одной строкой).
Сделайте замеры и опишите, получилось ли у вас ускорить задачу
"""
from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1, 5, 7, 2, 6, 1, 7, 3, 1, 2, 8, 2, 6, 4, 5, 2, 6, 7, 2, 5, 1, 5, 2, 4, 2, 6, 2, 4, 1, 6, 2,
         4, 2, 21, 5, 2, 5, 2, 5, 21, 5, 5, 3, 1, 3, 4, 5, 1, 5, 7, 2, 6, 1, 7, 3, 1, 2, 8, 2, 6, 4, 5, 2, 6, 7, 2, 5,
         1, 5, 2, 4, 2, 6, 2, 4, 1, 6, 2,
         4, 2, 21, 5, 2, 5, 2, 5, 21, 5, 5, 3, 1, 3, 4, 5, 1, 5, 7, 2, 6, 1, 7, 3, 1, 2, 8, 2, 6, 4, 5, 2, 6, 7, 2, 5,
         1, 5, 2, 4, 2, 6, 2, 4, 1, 6, 2,
         4, 2, 21, 5, 2, 5, 2, 5, 21, 5, 5, 3, 1, 3, 4, 5, 1, 5, 7, 2, 6, 1, 7, 3, 1, 2, 8, 2, 6, 4, 5, 2, 6, 7, 2, 5,
         1, 5, 2, 4, 2, 6, 2, 4, 1, 6, 2,
         4, 2, 21, 5, 2, 5, 2, 5, 21, 5, 5, 3, 1, 3, 4, 5, 1, 5, 7, 2, 6, 1, 7, 3, 1, 2, 8, 2, 6, 4, 5, 2, 6, 7, 2, 5,
         1, 5, 2, 4, 2, 6, 2, 4, 1, 6, 2,
         4, 2, 21, 5, 2, 5, 2, 5, 21, 5, 5, 3, 1, 3, 4, 5, 1, 5, 7, 2, 6, 1, 7, 3, 1, 2, 8, 2, 6, 4, 5, 2, 6, 7, 2, 5,
         1, 5, 2, 4, 2, 6, 2, 4, 1, 6, 2,
         4, 2, 21, 5, 2, 5, 2, 5, 21, 5, 5, 3, 1, 3, 4, 5, 1, 5, 7, 2, 6, 1, 7, 3, 1, 2, 8, 2, 6, 4, 5, 2, 6, 7, 2, 5,
         1, 5, 2, 4, 2, 6, 2, 4, 1, 6, 2,
         4, 2, 21, 5, 2, 5, 2, 5, 21, 5, 5, 3, 1, 3, 4, 5, 1, 5, 7, 2, 6, 1, 7, 3, 1, 2, 8, 2, 6, 4, 5, 2, 6, 7, 2, 5,
         1, 5, 2, 4, 2, 6, 2, 4, 1, 6, 2,
         4, 2, 21, 5, 2, 5, 2, 5, 21, 5, 5, 3, 1, 3, 4, 5, 1, 5, 7, 2, 6, 1, 7, 3, 1, 2, 8, 2, 6, 4, 5, 2, 6, 7, 2, 5,
         1, 5, 2, 4, 2, 6, 2, 4, 1, 6, 2,
         4, 2, 21, 5, 2, 5, 2, 5, 21, 5, 5, 3, 1, 3, 4, 5, 1, 5, 7, 2, 6, 1, 7, 3, 1, 2, 8, 2, 6, 4, 5, 2, 6, 7, 2, 5,
         1, 5, 2, 4, 2, 6, 2, 4, 1, 6, 2,
         4, 2, 21, 5, 2, 5, 2, 5, 21, 5, 5]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    new_dict = {}
    max_el = 0
    el = 0
    for el in array:
        if new_dict.get(el) is None:
            new_dict[el] = 1
        else:
            new_dict[el] += 1
    for k, v in new_dict.items():
        if v > max_el:
            max_el = v
            el = k
    return f'Чаще всего встречается число {el}, ' \
           f'оно появилось в массиве {max_el} раз(а)'


print(func_1(), timeit("func_1()", globals=globals(), number=10000))
print(func_2(), timeit("func_2()", globals=globals(), number=10000))
print(func_3(),
      timeit("func_3()", globals=globals(), number=10000))

print(len(array))
# словарем почти не получилось увиличить производительность, на небольшом списке, при списке из 471 элемента словарь выигрывает по скорости.

