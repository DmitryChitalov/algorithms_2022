"""
Задание 4.
Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.
Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""


db_users = {'usr1': ['123', True],
            'usr2': ['234', False],
            'usr3': ['345', True],
            'usr4': ['456', True],
            'usr5': ['567', False]}


# Сложность O(1)
def user_valid_1(login, passd):
    if db_users.get(login):                                  # O(1)
        if db_users[login][1]:                               # O(1)
            if db_users[login][0] == passd:                  # O(1)
                return 'Добро пожаловать'                    # O(1)
            else:                                            # O(1)
                return 'Вы ввели неверный пароль'            # O(1)
        else:                                                # O(1)
            return 'Необходимо активировать учетную запись'  # O(1)
    else:                                                    # O(1)
        return 'Неверный логин'                              # O(1)


print(user_valid_1('usr1', '123'))  # Добро пожаловать
print(user_valid_1('usr4', '423'))  # Вы ввели неверный пароль
print(user_valid_1('usr6', '234'))  # Неверный логин
print(user_valid_1('usr2', '234'))  # Необходимо активировать учетную запись


# Сложность O(n)
def user_valid_2(login, passd):
    for k, v in db_users.items():                               # O(n)
        if k == login:                                          # O(1)
            if   v[0] == passd and v[1]:                        # O(1)
                return 'Добро пожаловать'                       # O(1)
            elif v[0] == passd and not v[1]:                    # O(1)
                return 'Необходимо активировать учетную запись' # O(1)
            elif v[0] != passd:                                 # O(1)
                return 'Вы ввели неверный пароль'               # O(1)
    return 'Неверный логин'                                     # O(1)


print(user_valid_2('usr1', '123'))  # Добро пожаловать
print(user_valid_2('usr4', '423'))  # Вы ввели неверный пароль
print(user_valid_2('usr6', '234'))  # Неверный логин
print(user_valid_2('usr2', '234'))  # Необходимо активировать учетную запись

# Первый метод имеет меньшую стоимость операций и может считаться
# более эффективной
