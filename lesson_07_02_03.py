"""
Поиск медианы встроенной ф-й, массив из 10 эл-в: 0.0006323999999999982
Поиск медианы встроенной ф-й, массив из 100 эл-в: 0.003054099999999997
Поиск медианы встроенной ф-й, массив из 1000 эл-в: 0.0725292
**********************************************************************
Поиск медианы без сортировки, массив из 10 эл-в: 0.0017420000000000005
Поиск медианы без сортировки, массив из 100 эл-в: 0.07501809999999999
Поиск медианы без сортировки, массив из 1000 эл-в: 6.4795162
**********************************************************************
Гномья сортировка, массив из 10 эл-в: 0.008193800000000001
Гномья сортировка, массив из 100 эл-в: 0.5651402000000001
Гномья сортировка, массив из 1000 эл-в: 68.85820460000001
Дольше всего работала гномья сортировка, быстрее всего -- встроенная ф-ция median
"""
from random import randint
from statistics import median
from timeit import timeit


def median_sort(lst):
    return median(lst)


m = 5
my_data = [randint(-100, 100) for i in range(2 * m + 1)]
print(f'Поиск медианы встроенной ф-й, массив из 10 эл-в: {timeit("median_sort(my_data[:])", globals=globals(), number=1000)}')

m = 50
my_data = [randint(-100, 100) for i in range(2 * m + 1)]
print(f'Поиск медианы встроенной ф-й, массив из 100 эл-в: {timeit("median_sort(my_data[:])", globals=globals(), number=1000)}')

m = 500
my_data = [randint(-100, 100) for i in range(2 * m + 1)]
print(f'Поиск медианы встроенной ф-й, массив из 1000 эл-в: {timeit("median_sort(my_data[:])", globals=globals(), number=1000)}')