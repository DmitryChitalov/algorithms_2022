"""
Задание 4.
Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.
Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""


authentication = {'abc': '123', 'abb': '123',
                  'aaa': '123', 'acc': '123'}
activation = {'abc': True, 'abb': False,
              'aaa': True, 'acc': False}


# Первое решение:
def activation_check(log):
    for i in authentication.items():
        if i[0] == log:
            if i[1] == input('Введите пароль:'):
                print('Авторизация успешна')
                for j in activation.items():
                    if j[0] == log:
                        if j[1] is True:
                            print('Ваша учетная запись активирована. Вы допущены к ресурсу')
                        else:
                            print('Ваша учетная запись не активирована. Пройдите активацию.')
            else:
                print('Неверный пароль')
                break
        else:
            continue


activation_check(input('Введите логин:'))
# Сложность O(n^2)


# Второе решение:
def activation_check_2(log):
    pass_check = 0
    for i in authentication.items():
        if i[0] == log:
            if i[1] == input('Введите пароль:'):
                print('Авторизация успешна')
                pass_check = 1
            else:
                print('Неверный пароль')
                break
        else:
            continue
    if pass_check == 1:
        for j in activation.items():
            if j[0] == log:
                if j[1] is True:
                    print('Ваша учетная запись активирована. Вы допущены к ресурсу')
                else:
                    print('Ваша учетная запись не активирована. Пройдите активацию.')


activation_check_2(input('Введите логин:'))
# Сложность O(n)


# Третье решение:
def activation_check_3(log):
    if authentication.setdefault(log) is not None:
        if authentication.get(log) == input('Введите пароль:'):
            print('Авторизация успешна')
            if activation.setdefault(log) is True:
                print('Ваша учетная запись активирована. Вы допущены к ресурсу')
            else:
                print('Ваша учетная запись не активирована. Пройдите активацию.')
        else:
            print('Неверный пароль')
    else:
        print('Неверный логин')


activation_check_3(input('Введите логин:'))
# Сложность O(1)


# Третье решение эффективнее, так как меньше времени тратится на выполнение алгоритма
