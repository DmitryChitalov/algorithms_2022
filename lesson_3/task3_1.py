"""
Задание 1.
Реализуйте функции:
a) заполнение списка, оцените сложность в O-нотации
   заполнение словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
b) получение элемента списка, оцените сложность в O-нотации
   получение элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
с) удаление элемента списка, оцените сложность в O-нотации
   удаление элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""
from time import perf_counter


def decorator_func(func):
    def wrapper(*args, **kwargs):
        start = perf_counter()
        result = func(*args, **kwargs)
        end = perf_counter()
        print(f'Время выполнения: {end - start}')
        return result

    return wrapper


"""
a) заполнение списка, оцените сложность в O-нотации
   заполнение словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
"""


@decorator_func
def fill_list(que_el):
    my_list = []
    for el in range(que_el):  # -> O(n)
        my_list.append(el)  # -> O(1)
    return my_list


@decorator_func
def fill_dict(que_el):
    my_dict = {}
    for el in range(que_el):  # -> O(n)
        my_dict[el] = el  # -> O(1)
    return my_dict


my_list = fill_list(100)  # Время выполнения: 2.050003968179226e-05
my_dict = fill_dict(100)  # Время выполнения: 2.0299921743571758e-05
# Словарь заполняется быстрее

"""
b) получение элемента списка, оцените сложность в O-нотации
   получение элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
"""


@decorator_func
def making_list(int_list, num_el):
    return int_list[num_el]  # -> O(1)


@decorator_func
def making_dict(int_dict, num_el):
    return int_dict[num_el]  # -> O(1)


making_list(my_list, 44)  # Время выполнения: 1.200009137392044e-06
making_dict(my_dict, 44)  # Время выполнения: 1.100008375942707e-06
# Элемент словаря получаем меньшее время

"""
с) удаление элемента списка, оцените сложность в O-нотации
   удаление элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
"""


@decorator_func
def delete_list_elem(int_list, num_el):
    int_list.pop(num_el)  # -> O(1)
    return int_list


@decorator_func
def delete_dict_elem(int_dict, num_el):
    del int_dict[num_el]  # -> O(1)
    return int_dict


delete_list_elem(my_list, 44)  # Время выполнения: 2.800021320581436e-06
delete_dict_elem(my_dict, 44)  # Время выполнения: 1.500011421740055e-06
# Элемент словаря удаляем быстрее
"""
Из сделанных замеров очевидно, что работа со словарем происходит быстрее,
но они занимают значительный объем памяти.
"""
