"""
Задание 1.
Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива
Сделайте замеры времени выполнения кода с помощью модуля timeit
Попробуйте оптимизировать код, чтобы снизить время выполнения
Проведите повторные замеры
ОБЯЗАТЕЛЬНО! Добавьте аналитику: что вы сделали и какой это принесло эффект
"""

from timeit import timeit

def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr

def func_2(nums):
    new_arr = []
    for x in nums:
        if x % 2 == 0:
            new_arr.append(nums.index(x))
    return new_arr


print(func_1([1, 2, 3, 4, 5, 6]))
print(func_2([1, 2, 3, 4, 5, 6]))

print('------------------------------------')

print(timeit("func_1([1, 2, 3, 4, 5, 6])", globals=globals()))  # --> 0.5734779
print(timeit("func_2([1, 2, 3, 4, 5, 6])", globals=globals()))  # --> 0.5538630000000001

''' Из функции func_1 были удалены встроенные функции range и len и обращение по индексу к элементу массива. 
Вместо этого в func_2 производится перебор элементов массива без обращения по индексу и добавлен метод index. 
Всё это позволило ускорить выполнение функции.'''
