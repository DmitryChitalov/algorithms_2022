"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.
Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.
Решите задачу тремя способами:
3) с помощью встроенной функции поиска медианы
сделайте замеры на массивах длиной 10, 100, 1000 элементов
В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
import statistics
from random import randint
from timeit import timeit

'''
Результаты замеров времени исполнения кода:
Для "гномьей" сортировки: 
0.02292790001956746 => 11
1.9976259000250138 => 101
210.94369119999465 => 1001
Для цикла с отсеиванием максимальных элементов:
0.03171080001629889 => 11
0.18328090000431985 => 101
9.612581599969417 => 1001
Функция median из statistics
0.0009200999629683793 => 11
0.005188999988604337 => 101
0.10926200001267716 => 1001
Выводы:
Cамые лучшие результаты показала функция median из модуля statistics.
Поиск медианы через цикл с отсеиванием максимальных элементов заняла второе место.
Функция с "гномьей" сортировкой что-то не але))).
'''

arr = [3, 1, 5, 4, 2, 6, 7]  # список для проверки
print(statistics.median(arr))  # => 4
orig_list = [randint(-100, 100) for _ in range(11)]

print(
    timeit(
        "(statistics.median(orig_list[:]))",
        globals=globals(),
        number=1000))

orig_list = [randint(-100, 100) for _ in range(101)]

print(
    timeit(
        "(statistics.median(orig_list[:]))",
        globals=globals(),
        number=1000))

orig_list = [randint(-100, 100) for _ in range(1001)]

print(
    timeit(
        "(statistics.median(orig_list[:]))",
        globals=globals(),
        number=1000))
