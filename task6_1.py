"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для первого скрипта
"""

from random import sample
from pympler import asizeof
from numpy import array
from memory_profiler import memory_usage

def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff
    return wrapper


@decor
def check_1(lst_obj):

    lst_to_set = set(lst_obj)  # O(N),    set -> O(len()), те t ув-ся линейно с увел-ем кол-ва элементов в lst_obj
    return lst_to_set  # O(1),    1 операция возврата


# ------------ Вариант до оптимизации ----------------------
for j in (10, 1500, 1000, 5000, 10000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = sample(range(-100000, 100000), j)


# ------------ Вариант после оптимизации ----------------------

for j in (10, 1500, 1000, 5000, 10000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst_1 = array(sample(range(-100000, 100000), j))

if __name__ == '__main__':

    res, mem_diff = check_1(lst)
    print(f"Выполнение заняло {mem_diff} Mib")

    res, mem_diff = check_1(lst_1)
    print(f"Выполнение заняло {mem_diff} Mib")

    print(asizeof.asizeof(lst))
    print(asizeof.asizeof(lst_1))

'''
Курс:"Алгоритмы и структуры данных на Python", ДЗ №1, task 1
Аналитика: благодаря использованию array из numpy удалось на порядок снизить общий размер объекта 
(с 400056 до 40128).
При использовании array (numpy) выполнение занимает 0.29296875 Mib, что в 2 раза меньше, чем при 
'''

