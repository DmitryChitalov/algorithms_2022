"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для третьего скрипта
"""

from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        if args[0] == n:
            return res, mem_diff
        else:
            return res
        print(args[0])
    return wrapper

# ------------ Вариант до оптимизации ----------------------
@decor
def check_even_1(n):

    return 0 if n == 0 else n + check_even_1(n - 1)

# ------------ Вариант после оптимизации ----------------------
@decor
def check_even_2(n):
    k = 0
    for i in range(n+1):
        k += i
    return k

if __name__ == '__main__':

    n = int(input('Введите кол-во натуральных чисел: '))
    res, mem_diff = check_even_1(n)
    print(f"Выполнение заняло {mem_diff} Mib, ответ: {res}")

    res, mem_diff = check_even_2(n)
    print(f"Выполнение заняло {mem_diff} Mib, ответ: {res}")

'''
Курс:"Алгоритмы и структуры данных на Python", ДЗ №5, task 1
При использовании цикла выполнение занимает 0.0 Mib, поскольку не приходится хранить набор данных
за каждый шаг рекурсии, которая расходует память в размере 0.015625 Mib.
'''
