"""
Задание 2.
Попытайтесь выполнить профилирование памяти в любом скрипте с рекурсией.
Вам нужно обнаружить проблему в процессе этого. Но проблема связана не с тем,
что рекурсия потребляет много памяти, а с самим процессом замеров.
Опищите эту проблему и найдите простой путь ее решения.
Опишите этот путь и покажите его применение
"""

"""
Проблема заключается в том, что на каждом шаге возврата рекурсивной функции
возвращается не только результат вызова рекурсивной функции, но и значение измерения 
потребления памяти, что в последующем и вызывает ошибку.

Для решения проблемы необходимо оптимизировать код и дописать условие, 
при котором только при первом вызове рекурсивной функции 
(или последнем при получении значений рекурсивной функции из стека вызова) выводился ее результат 
и измерение памяти. В остальных случаях - результат значений рекурсивной функции.
"""

from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        print(f'Начало: n={args[0]}')
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f'Окончание: n={res}, mem={mem_diff} Mib')
        # Было
        # return res, mem_diff
        # Стало
        if args[0] == n:
            return res, mem_diff
        else:
            return res
    return wrapper


@decor
def check_even_1(n):
    return 0 if n == 0 else n + check_even_1(n - 1)


if __name__ == '__main__':
    n = 5
    res, mem_diff = check_even_1(n)
    print(f'Выполнение заняло {mem_diff} Mib')

