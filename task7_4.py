"""
Задание 1.
Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100).
Выведите на экран исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции.
Обязательно доработайте алгоритм (сделайте его умнее)!
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.
Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""
"""
Доработанная сортировка эффективнее:
10 элементов
Стандартная сортировка за 0.00637
Оптимизированная сортировка за 0.00085
100 элементов
Стандартная сортировка за 0.65792
Оптимизированная сортировка за 0.00622
1000 элементов
Стандартная сортировка за 72.32
Оптимизированная сортировка за 0.073
Сложность все-равно O(n^2), однако время значительно уменьшается из-за частичной отсортированности массива.
"""

from random import randint
from timeit import timeit



def bubble_sort(lst_obj):
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
        n += 1
    return lst_obj


def bubble_sort_opt(lst_obj):
    n = 1
    while n < len(lst_obj):
        k = 0
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                k = 1
        if k == 0:
            break
        n += 1
    return lst_obj


for i in range(1, 4):
    n = 10 ** i
    orig_list = [randint(-100, 100) for _ in range(n)]
    print(f'Сортировка {n} элементов')
    print(f'Исходный массив: {orig_list}')
    print(f'Стандартная сортировка за {timeit("bubble_sort(orig_list[:])", globals=globals(), number=1000)}'
          f'{bubble_sort(orig_list)} ')
    print(f'Оптимизированная сортировка за {timeit("bubble_sort_opt(orig_list[:])", globals=globals(), number=1000)}'
          f'{bubble_sort_opt(orig_list)} ')
