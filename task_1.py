"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации
   заполнение словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации
   получение элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации
   удаление элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

# для вывода целых чисел с разделителем
import locale
locale.setlocale(locale.LC_ALL, "ru_RU.UTF-8")

# Декоратор
def decorator(iters):
    def true_decorator(func):
        import time

        def wrapper(*args):
            total = 0
            for i in range(iters):
                if func.__name__ == 'del_list':
                    obj = [j for j in range(args[0])]
                elif func.__name__ == 'del_dict':
                    obj = {j: j for j in range(args[0])}
                else:
                    obj = args[1]
                start = time.time()
                operation = func(args[0], obj)
                end = time.time()
                total = total + (end-start)
            print(f'Среднее время операции "{operation}": {total/(iters * args[0]):e} секунд.')

        return wrapper
    return true_decorator

##############################################################################
"""
a) Асимптотическая оценка:
   - заполнение списка из n элементов:  О(n) 
   - заполнение словаря из n элементов: O(n)
   Среднее время на заполнение одного элемента (приблизительный порядок):
   - список:  1e-8 
   - словарь: 1e-8
   Анализ (10 <= n <= 10 000): в теории список должен заполняться быстрее,
   т.к. не происходит вычисление хеш-функции, однако при многократном запуске
   замеров времени на моем компьютере в среднем получается так, что словарь
   заполняется быстрее, чем список.
"""

@decorator(iters=1000)
def fill_list(n, lst):
    for i in range(n):
        lst.append(i)
    return f'заполнение  списка'

@decorator(iters=1000)
def fill_dict(n, dct):
    for i in range(n):
        dct[i] = i
    return f'заполнение словаря'

print('================ ЗАПОЛНЕНИЕ ОДНОГО ЭЛЕМЕНТА ================')
for i in range(1,5):
    print(f'---------- n = {10**i:n} ----------')
    fill_list(10**i, [])
    fill_dict(10**i, {})
print()

##############################################################################
"""
b) Асимптотическая оценка:
   - получение элемента списка:  О(1) 
   - получение элемента словаря: O(1)
   Среднее время на заполнение одного элемента (приблизительный порядок):
   - список:  1e-8 
   - словарь: 1e-8
   Анализ (10 <= n <= 10 000): в теории время операции получения произвольного 
   (без поиска конкретного значения) элемента для списка (обращение к ячейки
   памяти по ее адресу) должно быть не больше, чем для словаря (обращение к
   нужному элементу по ключу), что и подтверждается при многократном запуске
   замеров времени - для списка данная операция отрабатывает чуть-чуть быстрее.
"""

@decorator(iters=1000)
def get_list(n, lst):
    for i in range(n):
        a = lst[i]
    return f'получение элемента  списка'

@decorator(iters=1000)
def get_dict(n, dct):
    for i in range(n):
        a = dct[i]
    return f'получение элемента словаря'

print('================ ПОЛУЧЕНИЕ ОДНОГО ЭЛЕМЕНТА ================')
for i in range(1,5):
    print(f'---------- n = {10**i:n} ----------')
    lst = [j for j in range(10**i)]
    get_list(10**i, lst)
    dct = {j : j for j in range(10 ** i)}
    get_dict(10**i, dct)
print()

##############################################################################
"""
с) Асимптотическая оценка:
   - удаление элемента списка:  О(n) 
   - удаление элемента словаря: O(1)
   Среднее время на заполнение одного элемента (приблизительный порядок):
   - список:  1e-8 
   - словарь: 1e-8
   Анализ (10 <= n <= 10 000): в теории время операции удалени элемента для
   списка должно быть больше, чем для словаря, что и подтверждается при
   многократном запуске замеров времени - для списка данная операция в среднем
   отрабатывает чуть медленнее.
"""

@decorator(iters=1000)
def del_list(n, lst):
    for i in range(n):
        del lst[0]
    return f'удаление элемента  списка'

@decorator(iters=1000)
def del_dict(n, dct):
    for i in range(n):
        del dct[i]
    return f'удаление элемента словаря'

print('================ УДАЛЕНИЕ ОДНОГО ЭЛЕМЕНТА ================')
for i in range(1,5):
    print(f'---------- n = {10**i:n} ----------')
    del_list(10**i, [])
    del_dict(10**i, {})
print()