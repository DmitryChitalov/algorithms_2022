"""
Задание 2.

Реализуйте два алгоритма.

Оба должны обеспечивать поиск минимального значения для списка.

Сложность первого алгоритма должна быть O(n^2) - квадратичная.

Сложность второго алгоритма должна быть O(n) - линейная.


Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
-- нельзя использовать встроенные функции min() и sort()
-- каждый из двух алгоритмов нужно оформить в виде отдельной ф-ции
-- проставьте сложности каждого выражения в двух ваших алгоритмах
"""

def max_val1(lst):
    """ Функция вернет 0, если список пуст. Функция вернет наименьшее значение из списка, если в списке есть хотя бы один элемент.
    Общая сложность n**2"""

    if len(lst) == 0: #(n)
        return 0 # (1)
    else:
        i = 1 #(1)
        max_value = lst[0] #(1)
    while i < len(lst): #(n)
        if max_value > lst[i]: #(n)
            max_value = lst[i]  #(1)
        i += 1 #(1)
    return max_value # (1)

def max_val2(lst):
    """ Функция вернет 0, если список пуст. Функция вернет наименьшее значение из списка, если в списке есть хотя бы один элемент.
       Общая сложность n"""

    if len(lst) == 0: #(n)
        return 0 # (1)
    elif len(lst) == 1: #(n)
        max_value = lst[0]  # (1)
        return max_value #(1)
    else:
        i = 1  # (1)
        max_value = lst[0]  # (1)
    while True: # (1)
        if max_value > lst[i]: # (n)
            max_value = lst[i] # (1)
        i += 1 # (n)
        if i == len(lst): # (n)
            break
    return max_value #(n)

from random import sample
for j in (50, 500, 1000, 5000, 10000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = sample(range(-100000, 100000), j)

print(max_val1([]))
print(max_val1([5]))
print(max_val1([4, 45, 9, 789, -5]))
print(max_val1(lst))

print('*' * 50)

print(max_val2([]))
print(max_val2([5]))
print(max_val2([4, 45, 9, 789, -5]))
print(max_val2(lst))