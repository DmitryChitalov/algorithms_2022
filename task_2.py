"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

# чуть-чуть циклов
def even_odd_1(n):
    if n == 0:
        return [0, 0]
    return [([1, 0] if (n % 10) % 2 == 0 else [0, 1])[i] + even_odd_1(n // 10)[i] for i in range(2)]

# совсем без циклов
def even_odd_2(n, res):
    if n == 0:
        return res
    res[0 if (n % 10) % 2 == 0 else 1] += 1
    return even_odd_2(n // 10, res)

n = int(input('Введите число: '))
print('Количество четных и нечетных цифр в числе равно: (' + ', '.join([str(x) for x in even_odd_1(n)]) + ')')
print('Количество четных и нечетных цифр в числе равно: (' + ', '.join([str(x) for x in even_odd_2(n, [0, 0])]) + ')')