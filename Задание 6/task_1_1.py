"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
# Урок 4, задание 1, исходное решение
# Этот скрипт есть в уроке 6, но я реализовал его до 6-го урока.

from memory_profiler import memory_usage

def memory(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f"Выполнение заняло {mem_diff} Mib")
        return res
    return wrapper

# Контроль правильного исполнения по сумме элементов массива
# Было 2 исходных варианта
@memory
def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr

@memory
def func_2(nums):
    new_arr = [item for item in nums if item % 2 == 0]
    return new_arr

n = 1234567

test_list = func_1(list(range(n)))
print('Сумма =', sum(test_list))
del test_list
test_list = func_2(list(range(n)))
print('Сумма =', sum(test_list))
del test_list

'''
Выполнение заняло 11.859375 Mib
Сумма = 381038919372
Выполнение заняло 2.36328125 Mib
Сумма = 381038919372
'''

# Оптимизация - обращение к элементам списка через генератор
@memory
def func_3(nums):
    for item in nums:
        if item % 2 == 0:
            yield item

list_sum = 0
for item in func_3(list(range(n))):
   list_sum += item
print('Сумма =', list_sum)    

'''
Выполнение заняло 0.0 Mib
Сумма = 381038919372
'''    
# Результат - уменьшился объём использованной памяти
