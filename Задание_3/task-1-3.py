"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации
   заполнение словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации
   получение элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации
   удаление элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""
from time import time


# декоратор для замеров
def time_decor(func):
    def exec(*args, **kwargs):
        start = time()
        result = func(*args, **kwargs)
        finish = time()
        return [result, finish - start]

    return exec


# список
cnt = 10 ** 2


@time_decor
def del_list_item_beg(lst, cnt):
    for i in range(cnt):
        lst.pop(0)


@time_decor
def del_list_item_end(lst, cnt):
    for i in range(cnt):
        lst.pop(-1000000)


print(20 * '-', 'Удаление начального элемента списка', 20 * '-')
for i in range(1, 4):
    lst = list()
    l = i * 2 * 10 ** 6
    for j in range(l):
        lst.append(j)
    res = del_list_item_beg(lst, cnt)
    print(f'Длина списка {l}, число операций {cnt}, длительность {res[1]}')
print()

print(20 * '-', 'Удаление элемента от конца списка', 20 * '-')
for i in range(1, 4):
    lst = list()
    l = i * 2 * 10 ** 6
    for j in range(l):
        lst.append(j)
    res = del_list_item_end(lst, cnt)
    print(f'Длина списка {l}, число операций {cnt}, длительность {res[1]}')
print()

# словарь
cnt = 10 ** 6


@time_decor
def del_dict_item(dct, cnt):
    for i in range(cnt):
        dct.pop(i)


print(20 * '-', 'Удаление элемента словаря', 20 * '-')
for i in range(1, 4):
    dct = dict()
    l = i * 2 * 10 ** 6
    for j in range(l):
        dct[j] = j
    res = del_dict_item(dct, cnt)
    print(f'Длина словаря {l}, число операций {cnt}, длительность {res[1]}')
print()

# список, удаление элемента O(n): 
# для элемента, расположенного на фиксированном расстоянии от начала списка, зависимость линейная, т.е. O(n)
# для элемента, расположенного на фиксированном расстоянии от конца списка, зависимость отстутствует, т.е. O(1)
# словарь, удаление элемента: зависимость длительности от длины списка отсутствует, т.е. O(1) 
# быстрее удаляется из словаря, т.к. для списка дополнительно выполняется сдвиг элементов от удаляемого до конца
