"""
Задание 1.

Для каждой из трех функций выполнить следующее:

1) для каждого выражения вместо символов !!! укажите сложность.
2) определите сложность алгоритма в целом (Сложность: !!!).

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
-- Сложность нужно указать только там, где есть !!!
-- Сложности встроенных функций и операций нужно искать
    в таблицах (см. материалы к уроку).
"""

from random import sample


##############################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.

    Алгоритм 1:
    Создать множество из списка

    Сложность: O(len(n))"""
    lst_to_set = set(lst_obj)  # Создание множества. Сложность O(len(...)). Так как зависит от длинны аргумента(итерируемой структуры) функции set и расчитывается как O(len(...)).
                               # В рассматриваемом ниже len(lst) будеn равен 10000, как как обращение к функциям за пределами цикла, следовательно сложность равна O(len(10000))
    return lst_to_set  # Сложность O(1). Если я правильно понимаю, вне зависимости от длины lst_to_set функция return имеет одинаковую сложность


##############################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 2:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах

    Сложность: O(N^2)
    """
    for j in range(len(lst_obj)):          # !!! Проход 0(n) после определения длинны 0(1)
        if lst_obj[j] in lst_obj[j+1:]:    # !!! Срез 0(n) и Проверка на входимость 0(n) = 0(n)
            return False                   # !!! У функции return константная сложность O(1) в худшем случае не выполнится
    return True                            # !!! У функции return константная сложность O(1)

# Есть вопрос: За каждую итерацию список справа уменьшается на 1 значение, не должна ли сложность уменьшаться соразмерно?
# Например в данном случае 0(n) = 0(len(lst_obj)), следовательно не должно ли уменьшение производиться по формуле 0(len(lst_obj)-j)
# Или это компенсируется проведением среза на ту же длинну?


##############################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 3:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.

    Сложность: !!! O(2N)+O(N log N)+O(len(n))
    """
    lst_copy = list(lst_obj)                 # !!! Создание списка 0(len(n))
    lst_copy.sort()                          # !!! Выполнение сортировки 0(N logn N)
    for i in range(len(lst_obj) - 1):        # !!! Проход 0(N)
        if lst_copy[i] == lst_copy[i+1]:     # !!! Сравнение 0(N)
            return False                     # !!! У функции return константная сложность O(1) в худшем случае не выполнится
    return True                              # !!! У функции return константная сложность O(1)

#


for j in (50, 500, 1000, 5000, 10000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = sample(range(-100000, 100000), j)



print(check_1(lst))
print(check_2(lst))
print(check_3(lst))
