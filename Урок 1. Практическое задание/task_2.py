"""
Задание 2.

Реализуйте два алгоритма.

Оба должны обеспечивать поиск минимального значения для списка.

Сложность первого алгоритма должна быть O(n^2) - квадратичная.
"""
def find_min(seq):
    """
    Функция находит минимальное значение в последовательности
    функиця берет элемент и сравнивает его со всеми остальными элементами
    переменной присваивается наименьшее значение еоторое получиось при сравнении
    которое
    и так домомента пока не будет пройден вся последовательность
    :param seq: последовательность
    :return: возвращает минимальное значение
    O(4n^2) - квадратичная. так как цикл у нас выполняет 4 операции со сложностью O(1) n^2 раз
    """
    result = seq[0]  # O(1)
    for i in range(len(seq)):  # O(n)
        for il in range(len(seq)):  # O(n)
            # присваиваю значения так как писать il_1 и il_2 легче чем seq[i]...
            il_1 = seq[i]  # O(1)
            il_2 = seq[il]  # O(1)
            if il_1 <= il_2 and il_1 <= result:  # O(1)
                result = il_1  # O(1)
            elif il_2 <= il_1 and il_2 <= result:  # O(1)
                result = il_2  # # O(1)

    return result
"""
Сложность второго алгоритма должна быть O(n) - линейная.
"""
def find_min_2(seq):
    """
    Функция находит минимаотное значение в последовательности
    :param seq: последовательность
    :return: возвращает минимальное значение
    сложность O(n) - линейная
    """
    min_val = seq[0]  # O(1)
    for el in seq:  # O(n)
        min_val = el if min_val > el else min_val  # O(n)
    return min_val  # O(1)





if __name__ == '__main__':
    test_lst = [2, 3, 4, 5, 6, 7, 1, 8, 9, 10, 11, 12, 13, 14, 15]
    #
    # print(find_min_2(test_lst))
    print(find_min(test_lst))
"""
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
-- нельзя использовать встроенные функции min() и sort()
-- каждый из двух алгоритмов нужно оформить в виде отдельной ф-ции
-- проставьте сложности каждого выражения в двух ваших алгоритмах
"""