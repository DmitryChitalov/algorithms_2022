"""
Задание 3.

Для этой задачи
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

"""Сложность функции cash O(nlogn) - решение функции cash эффективанее, 
ленейно логарифмическая функция имеет меньшую сложность"""


def cash(s, x):

    cash_top3 = dict(sorted(s.items(), key=lambda item: item[1]))    # O(nlogn)
    cash_top3 = list(reversed(cash_top3))                            # O(n)
    return cash_top3[:x]                                             # O(1)


dict_1 = {'apple': 1500,
          'nokia': 900,
          'samsung': 1200,
          'xiaomi': 1100,
          'sony': 700}
print(cash(dict_1, 3))


"""Сложность функции cash2 O(n**2)"""


def cash2(s):
    s2 = {v: k for k, v in s.items()}                                        #O(n)
    cash_top3 = list(s2.keys())                                              #O(1)
    cash = cash_top3[0]                                                      #O(1)
    for i in cash_top3:                                                      #O(n)
        if i < cash:                                                         #O(1)
            cash = i                                                         #O(1)
            cash_top3.remove(i)                                              #O(n)
    return s2.get(cash_top3[0]), s2.get(cash_top3[1]), s2.get(cash_top3[2])  #O(n)


dict_1 = {'apple': 1500,
          'nokia': 900,
          'samsung': 1200,
          'xiaomi': 1100,
          'sony': 700}

print(cash2(dict_1))


