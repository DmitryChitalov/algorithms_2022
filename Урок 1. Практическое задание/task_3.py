"""
Задание 3.

Для этой задачи
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

anydict = {'HP': 6700, 'ASUS': 5400, 'Samsung': 14600, 'Xiaomi': 6900, 'Intel': 23500}

def f3_v1(dict): # сложность алгоритма : O(n log n) - линейно-логарифмическая
    resdict = {} # константная
    tmplst = [] # константная
    for k, v in dict.items():  # линейная
        tmplst.append(v)  # константная

    tmplst.sort(reverse=True)  # линейно-логарифмическая
    for k, v in dict.items():  # линейная
        if v == tmplst[0] or v == tmplst[1] or v == tmplst[2]:  # константная
            resdict.update({k: v})  # константная

    return resdict # константная


def f3_v2(dict, val): # сложность алгоритма : O(n^2) - квадратичная
    resdict = {} # константная
    tmplst = [] # константная
    for k, v in dict.items():  # линейная
        tmplst.append(v)  # константная

    tmplst.sort(reverse=True)  # линейно-логарифмическая
    for i in range(val): # линейная
        for k, v in dict.items():  # квадратичная (цикл в цикле)
            if v == tmplst[i]:  # константная
                resdict.update({k: v})  # константная

    return resdict # константная

print(f3_v1(anydict))
print(f3_v2(anydict, 3))

"""
В данном примере, более высокой алгоритмической сложностью обладает второе решение (функция f3_v2)
Однако, с точки зрения разработчика, это решение является более лаконичным и удобным, т.к. в решении f3_v1 при большем числе аргументов (если в условии будет необходимо
не 3, а 1000 самых прибыльных компаний) будет сильно увеличиваться код функции.
"""