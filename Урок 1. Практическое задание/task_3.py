"""
Задание 3.

Для этой задачи
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

""" Сложность: O(n log n)."""


def choose_companies_1(data):
    max_val_comp = (sorted(data, key=data.get)[3:])  # O(n log n)
    return f"Три компании с максимальной доходностью >>> {max_val_comp}"  # O(1)


""" Сложность: O(n^2)."""


def choose_companies_2(data):
    sort_val = sorted(data.values())  # O(n log n)
    my_list = []  # O(1)
    for el in sort_val:  # O(n)
        for key in data.keys():  # O(n)
            if data[key] == el:  # O(1)
                my_list.append(key)  # O(1)
    return f"Три компании с максимальной доходностью >>> {my_list[3:]}"  # O(1)


companies_dict = {"Potato": 100000,
                  "Andatra": 1500000,
                  "Gary&Boris": 5000000,
                  "Sugar_garbage": 80000,
                  "ELFs": 0,
                  "TraktorBawling": 666000}

print(choose_companies_1(companies_dict))
print(choose_companies_2(companies_dict))

"""Вывод: Из двух представленных алгоритмов решения задания наиболее эффективным будет 
алгоритм с линейно-логарифмической сложностью, так как время выполнение скрипта будет
расти плавнее при добавлении новых элементов (происходит лишь сортировка без цикличности)
в отличие от способа с квадратичной сложностью, где время будет стремительно увеличиваться
даже при незначительном увеличении элементов словаря (из за вложенности циклов)."""
