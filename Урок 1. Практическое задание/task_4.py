"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""
# Способ 1. Сложность: O(n)
def login_1(users, name, password):
  for k, v in users.items():
    if k == name:
      if v[0] == password:
        if v[1] == 'active':
          return 'Успешный успех, вы вошли!'
        else:
          return 'Активируйте аккаунт'
      else:
        return 'Проверьте пароль!'
  return f'Пользователь с именем {name} не найден!'

# Способ 2. сложность: O(1)
def login_2(users, name, password):
  try:
    if users[name][0] == password:
      if users[name][1] == 'active':
        return 'Успешный успех, вы вошли!'
      else:
       return 'Активируйте аккаунт'
    else:
      return 'Проверьте пароль!'
  except KeyError:
    return f'Пользователь с именем {name} не найден!'

users = {
  'serghei': ['1234', 'active'],
  'maxim': ['4321', 'no active'],
  'danil': ['1423', 'active']
}

# Способ 1:
print(login_1(users, 'serghei', '1234'))
print(login_1(users, 'maxim', '4321'))
print(login_1(users, 'maxim', '1234'))
print(login_1(users, 'durik', '4321'), '\n')

# Способ 2:
print(login_2(users, 'serghei', '1234'))
print(login_2(users, 'maxim', '4321'))
print(login_2(users, 'maxim', '1234'))
print(login_2(users, 'dunik', '4321'))