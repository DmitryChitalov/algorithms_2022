"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""
# Итоговая сложность O(n)
def authentication_On(peopls, login, password):
    for logins, info in peopls.items(): #O(n)
        if logins == login:  #О(1)
            if info['пароль'] == password:  #О(1)
                return 'Авторизация пройдена' if info['активация'] else 'Активируйте учетную запись'  #O(1)
            else:
                return 'Неверный пароль'  #О(1)
    return 'Неверный логин'    #О(1)

# Итоговая сложность O(1)
def authentication_O1(peopls, login, password):
    if peopls.get(login): #O(1)
        user = peopls.get(login)    #O(1)
        if user['пароль'] == password:  #О(1)
            return 'Авторизация пройдена' if user['активация'] else 'Активируйте учетную запись' #О(1)
        else:
            return 'Неверный пароль' #О(1)
    return 'Неверный логин' #О(1)

if __name__ == '__main__':
    peopls = {'Иван': {'пароль': 9987, 'активация': True}, 'Светлана': {'пароль': 7654, 'активация': True},
             'Ольга': {'пароль': 5432, 'активация': False}}

    print(authentication_On(peopls, 'Иван', 9987))
    print(authentication_On(peopls, 'Светлана', 2221))
    print(authentication_On(peopls, 'Ольга', 5432))
    print(authentication_O1(peopls, 'Иван', 9987))
    print(authentication_O1(peopls, 'Светлана', 2221))
    print(authentication_O1(peopls, 'Ольга', 5432))
# В решении O(n) простой поиск время выполнения алгоритма прямо пропорционально размеру входящих данных.
# Чем больше элементов в массиве, тем больше и время выполнения алгоритма.
# Время выполнения алгоритма прямо пропорционально размеру входящих данных.

#В решении O(1) каким бы ни был размер передаваемых в алгоритм данных, время его работы будет одним и тем же.
#Второе решение оптимальнее О(1), т.к. постоянное время.


