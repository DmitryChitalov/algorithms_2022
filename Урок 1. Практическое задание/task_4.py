"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""


def check_auth_1(data, k):
    for key, v in data.items():
        if k == key and v > 0:
            print("Успешная авторизация! Доступ разрешен.")
        elif k == key and v == 0:
            print("Успешная аутентификация! Однако, для доступа к ресурсу "
                  "необходимо активировать учетную запись!")
        else:
            print("Access deny!!!")


def check_auth_2(data):
    pass


users_auth = {"Mastadont666/12345678": 1, "Andatra/qwerty12345": 0,
              "Boris300/superman777": 1, "Sugar_garbage/oooooops!": 1,
              "ELFs/omg_password!": 0, "TraktorBawling/88888888": 1}
user_input = input("Введите логин/пароль >>> ")

print(check_auth_1(users_auth, user_input))
# print(check_auth_2(users_auth))

"""Вывод: Из двух представленных алгоритмов решения задания наиболее эффективным будет 
алгоритм с линейно-логарифмической сложностью, так как время выполнение скрипта будет
расти плавнее при добавлении новых элементов (происходит лишь сортировка без цикличности)
в отличие от способа с квадратичной сложностью, где время будет стремительно увеличиваться
даже при незначительном увеличении элементов словаря (из за вложенности циклов)."""
