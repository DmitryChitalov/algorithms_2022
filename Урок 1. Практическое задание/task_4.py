"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""


users = {'user1':['1', True], 'user2':['2', False], 'user3':['3', False]}


def check_login1(database):
    """
    Сложность: O(n)
    """
    while True:                                                         # O(N)
        print('LOGIN:')                                                 # O(1)
        login = input()                                                 # O(1)
        print('PASSWORD')                                               # O(1)
        password = input()                                              # O(1)
        if not login in database:                                       # O(N) размер database неизвестен
            print('неверный логин')                                     # O(1)
            continue                                                    # O(1)
        elif not password in database[f'{login}']:                      # O(N) размер
            print('неверный пароль')                                    # O(1)
            continue                                                    # O(1)
        elif database[f'{login}'] == [f'{password}', False]:            # O(1)
            return print('необходимо активировать учетную запись')      # O(1)
        else:                                                           # O(1)
            return print('добро пожаловать')                            # O(1)


def check_login2(database, login, password):
    """
    Сложность: O(1)
    :param database:
    :param login:
    :param password:
    :return:
    """
    if not login in database:                                           # O(1)
        return print('неверный логин')                                  # O(1)
    elif not password in database[f'{login}']:                          # O(1)
        return print('неверный пароль')                                 # O(1)
    elif database[f'{login}'] == [f'{password}', False]:                # O(1)
        return print('необходимо активировать учетную запись')          # O(1)
    else:                                                               # O(1)
       return print('добро пожаловать')
       # O(1)
"""из-за отсутствия цикла в check_login2, алгоритм эфективнее """