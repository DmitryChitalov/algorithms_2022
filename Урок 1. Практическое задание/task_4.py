"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

users = {'login_1': ['password1', '0'], 'login_2': ['password2', '0'], 'login_3': ['password3', '1'],
         'login_4': ['password4', '0'], 'login_5': ['password5', '1']}


def check_user(n):
    """Функция проверяет вхождение логина в словарь "users", если ключа нет - возвращает None.
    Если ключ есть, то проверяет второе значение ключа (второй элемент списка),
    если 0 - возвращает str(Нужно пройти активацию),
    если 1 - возвращает str(User n - активен).
    Сложность алгоритма - O(1)
    """
    if users.get(n) is None: # O(1)
        return None          # O(1)
    return 'Нужно пройти активацию' if users.get(n)[1] == '0' else f'User {n} - активен'  # O(1)


def check_user_2(n):
    """Функция проверяет вхождение логина в словарь "users", если ключа нет - возвращает None.
    Если ключ есть, то проверяет второе значение ключа (второй элемент списка),
    если 0 - возвращает str(Нужно пройти активацию),
    если 1 - возвращает str(User n - активен).
    Сложность алгоритма - O(n)
    """
    if users.get(n) is None:    # O(1)
        return None             # O(1)
    for key, val in users.items():  # O(n)
        if users.get(key)[1] == '1' and key == n:  # O(1)
            return f'User {n} - активен'    # O(1)
    return 'Нужно пройти активацию'         # O(1)


def check_user_3(n):
    """Функция проверяет вхождение логина в словарь "users", если ключа нет - возвращает None.
        Если ключ есть, то проверяет второе значение ключа (второй элемент списка),
        если 0 - возвращает str(Нужно пройти активацию),
        если 1 - возвращает str(User n - активен).
        Сложность алгоритма - O(n**2)
        """
    if users.get(n) is None:        # O(1)
        return None                 # O(1)
    for i in range(len(users)):     # O(n)
        for key, val in users.items():  # O(n)
            if users.get(key)[1] == '1' and key == n:  # O(1)
                return f'User {n} - активен'  # O(1)
        return 'Нужно пройти активацию'  # O(1)
