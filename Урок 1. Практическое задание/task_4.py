"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

# Алгоритм 1
def access(res):                  # O(1)
    if res['aut'] == 'No':        # O(1)
        print(f'Пользователь {res["login"]} не допущен к ресурсу. Необходимо активировать учетную запись.')
    else:
        print(f'Пользователь {res["login"]} допущен к ресурсу.')


user_1 = {'login': 'Dog', 'pass': 111, 'aut': 'No'}
user_2 = {'login': 'Cat', 'pass': 222, 'aut': 'No'}
user_3 = {'login': 'Frog', 'pass': 333, 'aut': 'Yes'}
user_4 = {'login': 'Parrot', 'pass': 444, 'aut': 'No'}
user_5 = {'login': 'Pig', 'pass': 555, 'aut': 'No'}
user_6 = {'login': 'Cow', 'pass': 666, 'aut': 'Yes'}

access(user_1)
access(user_3)
print('Алгоритм 1: Сложность O(1)')
