"""
Задание 4.

Для этой задачи:
1)
придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""
users_data = {'user01': ['7845a', 0], 'user02': ['462186', 1], 'user03': ['asdasd', 1],
              'user04': ['7845a', 0], 'user05': ['asd5a6w', 0], 'user06': ['486asd', 1]}


def authentication_v1(login, password):  # O(n)
    if login in users_data.keys() and password == users_data[login][0]:  # O(n)
        if users_data[login][1] == 1:  # O(1)
            print(f'Добро пожаловать, {login}!')  # O(1)
        elif users_data[login][1] == 0:  # O(1)
            print(f'{login}, ваша учётная запись не активирована, чтобы продолжить требуется активация!')  # O(1)
            while True:
                inp = input('Для активации нажмите "y" ')  # O(1)
                if inp.lower() == 'y':  # O(1)
                    users_data[login][1] = 1  # O(1)
                    print('Ваша учетная запись активирована!',
                          f'Добро пожаловать, {login}!', sep='\n')  # O(1)
                    break
                else:
                    print('Введен неверный ответ, повторите попытку!')  # O(1)
    else:
        print('Логин и/или пароль введены не верно. Повторите попытку снова!')  # O(1)
    # for k, v in dct.items():
    #     if v[1] == 0:
    #         inp = input(f'{k}, ваша учётная запись не активирована,'
    #                     f' чтобы продолжить требуется активация, для активация нажмите "y" ')
    #         if inp.lower() == 'y':
    #             v[1] = 1
    #             print('Ваша учетная запись активирована!')
    # return dct


def authentication_v2(login, password):  # O(1)
    try:
        if password == users_data[login][0]:  # O(1)
            if users_data[login][1] == 1:  # O(1)
                print(f'Добро пожаловать, {login}!')  # O(1)
            elif users_data[login][1] == 0:  # O(1)
                print(f'{login}, ваша учётная запись не активирована, чтобы продолжить требуется активация!')  # O(1)
                while True:
                    inp = input('Для активации нажмите "y" ')  # O(1)
                    if inp.lower() == 'y':  # O(1)
                        users_data[login][1] = 1  # O(1)
                        print('Ваша учетная запись активирована!',
                                f'Добро пожаловать, {login}!', sep='\n')  # O(1)
                        break
                    else:
                        print('Введен неверный ответ, повторите попытку!')  # O(1)
        else:
            print('Пароль введен не верно. Повторите попытку снова!')  # O(1)
    except KeyError:
        print('Логин введен не верно')


authentication_v1('user01', '7845a')
authentication_v2('user04', '7845a')

# Второй вариант будет предпочтительнее, так как сложность функции будет O(n)
