"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""


def autorization1(users):  # O(n)
    for user in users:  # O(n)
        if user['activation']:  # O(1)
            print(f'Позьзователь {user["name"]} допушен к ресурсу')  # O(1)
        else:  # O(1)
            print(f'Позьзователь {user["name"]} должен активировать учетную запись')  # O(1)


def autorization2(users):  # O(n^2)
    for user in users:  # O(n)
        for item in user.values():  # O(n)
            if item == True:  # O(1)
                print(f'Позьзователь {user["name"]} допушен к ресурсу')  # O(1)
            elif item == False:  # O(1)
                print(f'Позьзователь {user["name"]} должен активировать учетную запись')  # O(1)


my_users = [
    {
        'name': 'Andrew',
        'login': 'login',
        'password': 'pass',
        'activation': False
    },
    {
        'name': 'Ivan',
        'login': 'login',
        'password': 'pass',
        'activation': True
    },
    {
        'name': 'Vlad',
        'login': 'login',
        'password': 'pass',
        'activation': True
    }
]

autorization1(my_users)
autorization2(my_users)
