"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""


def check_if_authorized(users_list: dict, checking_username: str) -> bool:
    """
    Функция проверки активации со сложностью O(n)
    """

    for username, (_, is_authorized) in users_list.items():  # O(n)
        if username == checking_username:  # O(1)
            return is_authorized  # O(1)


def check_if_authorized_2(users_list: dict, checking_username: str) -> bool:
    """
    Функция проверки активации со сложностью O(1)
    Решение эффективнее, т.к. O(1) < O(n) (взятие элемента по ключу словаря эффективнее перебора всех ключей)
    """

    user = users_list.get(checking_username)  # O(1)
    return user[1]  # O(1) + O(1)


if __name__ == '__main__':
    users = {
        'Taras': ('123456', True),
        'Alex': ('2', False)
    }

    print(check_if_authorized(users, 'Taras'))
    print(check_if_authorized(users, 'Alex'))
    print(check_if_authorized_2(users, 'Taras'))
    print(check_if_authorized_2(users, 'Alex'))
