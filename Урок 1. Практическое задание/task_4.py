"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

import random


def auth_1(login, psw):
    """
    Функция возвращает:
    0 - пользователь не может быть допущен к ресурсу
    1 - учётная запись не активирована и пользователь хочет пройти процедуру активации
    2 - аутентификация пройдена успешно

    Общая сложность алгоритма O(1)
    """

    inf_login = users_storage.get(login)                                                   # O(1)
    if inf_login is None or inf_login[0] != psw:                                           # O(1)
        """ Нашёл информацию что сравнение строк это O(n), где n — размер меньшей строки, 
            предполагая что длина пароля имеет малый предел
            и не стремится к бесконечности, осмелюсь поставить сложность O(1)
         """
        return 0                                                                           # O(1)
    else:                                                                                  # O(1)
        if inf_login[1] == 0:                                                              # O(1)
            print(f'Учётная запись не активирована!')                                      # O(1)
            if input('Хотите пройти процедуру активации? (Да - 1 , Нет - 0) ') == 1:       # O(1)
                return 1                                                                   # O(1)
            else:                                                                          # O(1)
                return 0                                                                   # O(1)
        else:                                                                              # O(1)
            return 2                                                                       # O(1)


def auth_2(login, psw):
    """
    Функция возвращает:
    0 - пользователь не найден либо неверный пароль
    1 - учётная запись не активирована и пользователь хочет пройти процедуру активации
    2 - учётная запись не активирована и пользователь  не хочет пройти процедуру активации
    3 - аутентификация пройдена успешно

    Общая сложность алгоритма O(N)
    """
    flag = False                                                                            # O(1)
    for key in users_storage.keys():                                                        # O(N)
        if key == login:                                                                    # O(1)
            flag = True                                                                     # O(1)
            inf_login = users_storage[key]                                                  # O(1)
            break                                                                           # O(1)
    if flag is False or inf_login[0] != psw:                                                # O(1)
        return 0                                                                            # O(1)
    else:                                                                                   # O(1)
        if inf_login[1] == 0:                                                               # O(1)
            print(f'Учётная запись не активирована!')                                       # O(1)
            if input('Хотите пройти процедуру активации? (Да - 1 , Нет - 0) ') == 1:        # O(1)
                return 1                                                                    # O(1)
            else:                                                                           # O(1)
                return 0                                                                    # O(1)
        else:                                                                               # O(1)
            return 3                                                                        # O(1)


users_storage = {f'user_{i}': [f'psw_{i}', random.randint(0, 1)] for i in range(1, 10)}
# auth_1(input('Введите логин: '), input('Введите пароль: '))
# auth_2(input('Введите логин: '), input('Введите пароль: '))

"""
Общий вывод: первое решение эффективнее, т.к. метод get() получает сразу получает значение ключа, без необходимости
перебирать весь словарь целиков в худшем случае, соответственно снижается время выполнения программы
"""
