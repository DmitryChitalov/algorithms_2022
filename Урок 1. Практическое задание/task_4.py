"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""
##############################################################################
def check_allowance():
    """Функция должна реализовать проверку, может ли пользователь быть допущен к ресурсу.

    Алгоритм 1:
    Сложность: .
    """
    us_login = input('Введите логин: ')
    if us_login in users_dict:
        us_password = input('Введите пароль: ')
        if users_dict[us_login][0] == us_password:
            if users_dict[us_login][1] == 1:
                return 'У Вас есть допуск к ресурсу.'
            else:
                aut_init = input('У Вас нет допуска к ресурсу.'
                                 'Пройти активацию?(y/n) :')
                if aut_init == 'y':
                    users_dict[us_login][1] = 1
                    return 'У Вас есть допуск к ресурсу.'
                else:
                    return 'У Вас нет допуска к ресурсу.'
        else:
            return 'Вы ввели неверный пароль.'
    else:
        return 'Нет такого пользователя.'

users_dict = {'Aaa': ['1234', 0], 'Bbb': ['1234', 1], 'Ccc': ['1234', 0], 'Ddd': ['1234', 0],
              'Fff': ['1234', 1], 'Ggg': ['1234', 0], 'Vvv': ['1234', 1], 'Qqq': ['1234', 0],
              'Www': ['1234', 0], 'Zzz': ['1234', 0]}

print(check_allowance())
