"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

#Сложность О(n)
def check_login(mp_dict, login, password):
    x = ['Пользователь найден', 'Пользователь не найден' ]
    y = ['пароль верный', 'пароль неверный' ]
    z = ['ученая запись активирована', 'нужно активировать учетную запись' ]
    a =[1, 3, 4]
    print(a.index(4))
    if login in mp_dict.keys():
        if mp_dict[login][0] == password:
            if mp_dict[login][1] == 'Y':
                print(x[0], ', ', y[0], ', ', z[0])
            else:
                print(x[0], ', ', y[0], ', ', z[1])
        else:
            if mp_dict[login][1] == 'Y':
                print(x[0], ', ', y[1], ', ', z[0])
            else:
                print(x[0], ', ', y[1], ', ', z[1])
    else:
        print(x[1], ', ', y[1], ', ', z[1])
    return 

customers = {'login1': ['123','Y'], 'login2': ['123','Y'], 'login3': ['123','Y']}
check_login(customers, 'login1', '1234')