"""
Задание 4.
Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.
Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

"""Решение №1 Сложность функции O(n^2)"""

users = [{
            'user': 'usr_1',
            'password': "000",
            'activation': 0
           },
            {
            'user': 'usr_2',
            'password': "001",
            'activation': 1
            },
            {
            'user': 'usr_3',
            'password': "002",
            'activation': 0
            },
            {
            'user': 'usr_4',
            'password': "003",
            'activation': 1
            },
            {
            'user': 'usr_5',
            'password': "004",
            'activation': 1
           },
            {
            'user': 'usr_6',
            'password': "005",
            'activation': 0
            },
            {
            'user': 'usr_7',
            'password': "006",
            'activation': 1
            },
            {
            'user': 'usr_8',
            'password': "007",
            'activation': 0
            }
            ]


def auth(user, pswrd, db=users):
    auth_users = {} # O(1)
    for i in db:      # O(n) - т.е. с нижним циклом O(n*n)
        for val in i.values():    # O(n)
            if val == user: O(1)  # O(1)
                auth_users.update(i)        # в данном случае O(1)
    if len(auth_users) = 0: # O(1)
        print("Незарегистрированный аккаунт. Пройдите регистрацию.")
    for val in auth_users.values(): # в обычном случае O(n), но у нас известно, что словарь из трех пар, с нижним циклом О(n*n), если уйти на ветку активации, то О(n*m)
        if val == pswrd: # O(1)
            for key, values in auth_users.items(): # O(n)
                if values == 1 and key == "activation": # O(1)
                    print("Успешная авторизация")   # O(1)
                elif val != 1 and key == "activation":  # O(1)
                    print("Вы не авторизированы, нужно активировать аккаунт, Y/N?: ") # O(1)
                    a = input() # O(1)
                    if a == "Y": # O(1)
                        for dct in db: # O(m)
                            if dct == auth_users: # O(1)
                                dct["activation"] = 1 # O(1)
                                print(f"Аккаунт пользователя {user} активен и авторизирован.") # O(1)
                    elif a == "N":
                        print('В доступе отказано, аккаунт не активирован.')
    if pswrd not in auth_users.values(): # O(1)
        print("Неверное имя пользователя или пароль.") # O(1)

    return db


print(auth("usr_1", "000"))
print(auth("usr_2", "001"))


"""Решение №2 функция имеет линейную сложность О(n)"""

def auth_2(user, pswrd, db=users):
    auth_users = {}
    for i in db:    # O(n)
        if i['user'] == user and i['password'] == pswrd and i['activation'] == 1:   # O(1)
            print(f'Успешная авторизация пользователя {user}') # O(1)
            auth_users.update(i) # в моем случае O(1), т.к. мы добавляем в пустой словарь только 1 раз 3 пары значений
        elif i['user'] == user and i['password'] == pswrd and i['activation'] == 0: # O(1)
            print('Вы авторизированы. Необходимо активировать аккаунт, желаете сделать это сейчас?: (Y/N)') # O(1)
            answer = input() # O(1)
            if answer == "Y": # O(1)
                i['activation'] = 1 # O(1)
                print(f'Успешная авторизация пользователя {user}, аккаунт активирован') # O(1)
                auth_users.update(i) # в моем случае O(1), т.к. мы добавляем в пустой словарь только 1 раз 3 пары значений
            elif answer != 'Y': # O(1)
                print('В авторизации отказано, активируйте аккаунт') # O(1)
                return i # O(1)
    if len(auth_users) == 0: # O(1)
        print('В доступе отказано. Неверное имя или пароль.') # O(1)
    return "Welcome!!!"




print(auth_2("usr_1", "000"))
print(auth_2("usr_2", "001"))
