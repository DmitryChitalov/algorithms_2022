"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

# !!!! Для оценки разницы производительности, буду оценивать только разные вырожения в двух вариантах,
# одинаковые игнорирую

"""
Вариант 1: храним данные в словаре, ключ - логин, значение - кортеж, в котором первым элементом идет пароль,
вторым бинарная отметка об аутентификации
"""


def auth_1(users_dict):
    login = input('Введите имя пользователя: ')
    password = input('Введите пароль: ')
    try:
        assert password == users_dict.get(login)[0]
        if users_dict.get(login)[1]:    # 0(2)
            print('Аутентификация пройдена')
            return users_dict
        else:
            usr_answr = input('Учетная запись не активированна!\n'
                              'Активировать -  [y]es\n'
                              'Отмена - введите любой символ: ')
            if usr_answr == 'y':
                users_dict[login] = (password, True)  # O(1)
                print('Аутентификация пройдена')
                return users_dict
            else:
                print('Аутентификация не пройдена: учетная запись не активирована')
                return users_dict
    except (AssertionError):
        print('Ошибка аутентификации: неверный пароль')
        return
    except (TypeError):
        print('Ошибка аутентификации: неверный логин')
        return users_dict

"""
Вариант 2: Храним логин и пароль в словаре, за хранение данных об активированных аккаунтах у нас будет отвечать
множество. Активация будет проводиться путем добавления логина в множество.
"""


def auth_2(users_dict, users_set):
    login = input('Введите имя пользователя: ')
    password = input('Введите пароль: ')
    try:
        assert password == users_dict.get(login)    # O(1)
        if users_dict[login] in users_set:
            print('Аутентификация пройдена')
            return users_set
        else:
            usr_answr = input('Учетная запись не активированна!\n'
                              'Активировать -  [y]es\n'
                              'Отмена - введите любой символ: ')
            if usr_answr == 'y':
                users_set.add(login)    # O(1)
                print('Аутентификация пройдена')
                return users_set
            else:
                print('Аутентификация не пройдена: учетная запись не активирована')
                return users_set
    except (AssertionError):
        print('Ошибка аутентификации: неверный пароль')
        return
    except (TypeError):
        print('Ошибка аутентификации: неверный логин')
        return users_set


"""
Итак, по производительности у нас получились 2 крайне похожих варианта - если отбросить одинаковые операции в двух
функциях, и оценивать только индивидуальные: вариант 1 - О(3), вариант 2 О(2). Т.е. итоговая разница составляет всего
О(1)!.
"""
# Использование варианта 1:
# users_1 = {'superman111': ('qwerty', True), 'batman': ('1111222', False), 'iron_m@n': ('123456', True)}
# users_1 = auth_1(users_1)
# print(users_1)

# Использование варианта 2:
users_2 = {'superman111': 'qwerty', 'batman': '1111222', 'iron_m@n': '123456'}
activated_set = set(['superman111', 'iron_m@n'])
activated_set = auth_2(users_2, activated_set)
print(activated_set)
