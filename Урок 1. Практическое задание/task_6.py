"""
Задание 6. На закрепление навыков работы с очередью

Примечание: в этом задании вспомните ваши знания по работе с ООП
и опирайтесь на пример урока

Реализуйте класс-структуру "доска задач".

Структура должна предусматривать наличие нескольких очередей задач, например
1) базовой, откуда задачи берутся, решаются и отправляются в список решенных
2) очередь на доработку, когда нерешенные задачи из первой очереди отправляются
на корректировку решения
3) список решенных задач, куда задачи перемещаются из базовой очереди или
очереди на доработку

После реализации структуры, проверьте ее работу на различных сценариях

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""


# создаем класс доска задач. Исходим из того, что все задачи будут уникальными и не могут иметь одинаковое название
class Taskboard:
    def __init__(self):
        self.tasks = [[], [], []]  # задачи будут находиться во вложенных списках, соответственно списки с 1 по 3:
        # 1) задачи базового уровня. 2) задачи на доработке. 3) решенные задачи

    def add_taskboard(self, item):
        self.tasks[0].append(item)  # все новые задачи поступают в первый список

    def from_queue(self, task_from, item, done):  # двигаем задачи по очереде в зависимости от решены они или нет (done)

        if done:  # если задача решена, то она попадает в третий список завершенных задач
            self.tasks[2].append(self.tasks[task_from][self.tasks[task_from].index(item)])
            self.tasks[task_from].remove(item)
        if not done:  # если задача не решена она идет во второй список на доработку
            self.tasks[1].append(self.tasks[task_from][self.tasks[task_from].index(item)])
            self.tasks[task_from].remove(item)

    def get_val(self):
        return self.tasks

    def get_tasks(self):  # для удобства реализован метод наглядно показывающий на какой стадии находятся задачи
        return f'Ваши текущие задачи {self.tasks[0]}\nВаши задачи на доработке {self.tasks[1]}\n' \
               f'Ваши выполненные задачи {self.tasks[2]} '


t = Taskboard()
t.add_taskboard('task_1')
t.add_taskboard('task_2')
t.add_taskboard('task_3')
print(t.get_val())  # => получаем три задачи, все три задачи попадают в первый базовый список
t.from_queue(0, 'task_1', False)  # задача 1 не решена и отправляется во второй список на доработку
t.from_queue(0, 'task_2', True)  # задача 2 решена и отправляется в третий список в завершенные задачи
print(t.get_tasks())  # проверяем => в каждой очереди по одной задаче
t.from_queue(1, 'task_1', False)  # проверяем сценарий, когда одна задача не решается несколько раз
t.from_queue(1, 'task_1', False)
t.from_queue(1, 'task_1', False)
t.from_queue(0, 'task_3', True)
print(t.get_val())  # задача 1 продолжает оставаться на доработке
t.from_queue(1, 'task_1', True)
print(
    t.get_tasks())  # завершаем выполнение оставшейся задачи и проверяем. Все три задачи должны находиться в завершенных
