"""
Задание 1.	Написать программу, которая будет складывать, вычитать,
умножать или делить два числа. Числа и знак операции вводятся пользователем.
После выполнения вычисления программа не должна завершаться, а должна
запрашивать новые данные для вычислений. Завершение программы должно
выполняться при вводе символа '0' в качестве знака операции. Если пользователь
вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
сообщать ему об ошибке и снова запрашивать знак операции.
Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.
Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ
Решите через рекурсию. Решение через цикл не принимается.
Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""


def calculation():
    actions = ['+', '-', '*', '/', '0']
    action = input('Введите операцию (+, -, *, / или 0 для выхода): ')

    if action == '0':
        return print('Спасибо за работу, до новых встреч!')

    try:
        if action in actions:
            x = int(input('Введите первое число: '))
            y = int(input('Введите второе число: '))
            if action == '+':
                return print(f'Ваш результат {x + y}'), calculation()
            elif action == '-':
                return print(f'Ваш результат {x - y}'), calculation()
            elif action == '*':
                return print(f'Ваш результат {x * y}'), calculation()
            else:
                try:
                    result = x / y
                    return print(f'Ваш результат {result}'), calculation()
                except ZeroDivisionError:
                    return print('На ноль делить нельзя, попробуйте заново'), calculation()
        else:
            return print('Пожалуйста выберите действие из списка'), calculation()
    except ValueError:
        return print('Пожалуйста вводите именно цифры'), calculation()


calculation()


"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.
Решите через рекурсию. Решение через цикл не принимается.
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def even_odd_count():
    user_number = abs(int(input('Введите число: ')))

    def even_odd(n, even=0, odd=0):
        if n // 10 == 0:
            if n % 2 == 0:
                even += 1
            else:
                odd += 1
            return print(f'Количество четных цифр в числе: {even}, a нечетных: {odd}')
        else:
            if n % 2 == 0:
                even += 1
            else:
                odd += 1
            n = n // 10
        return even_odd(n, even, odd)

    return even_odd(user_number)


even_odd_count()


"""
Задание 3.	Сформировать из введенного числа
обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
то надо вывести число 6843.
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все цифры извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.
Решите через рекурсию. Решение через цикл не принимается.
Пример:
Введите число, которое требуется перевернуть: 123
Перевернутое число: 321
Не забудьте проверить на числе, которое оканчивается на 0.
1230->3210
"""


def reverse(n, i=0, get_start=0):
    while n % 10 == 0 and get_start == 0:
        n = n // 10
        i += 1
    if n // 10 == 0:
        return str(n * 10**i)

    element = str(n % 10)
    get_start = 1
    return element + reverse(n // 10, i, get_start)


print(reverse(int(input('Введите число, которое требуется перевернуть: '))))


"""
Задание 4.	Найти сумму n элементов следующего ряда чисел:
1 -0.5 0.25 -0.125 ...
Количество элементов (n) вводится с клавиатуры.
Пример:
Введите количество элементов: 3
Количество элементов - 3, их сумма - 0.75
Решите через рекурсию. Решение через цикл не принимается.
Нужно обойтисть без создания массива!
"""


def elements_sum(number_of_elements, start_number=1.0):
    element = start_number * (-1) / 2
    number_of_elements -= 1
    if number_of_elements == 1:
        return element + 1

    return element + elements_sum(number_of_elements, element)


print(elements_sum(5))


"""
Задание 5.	Вывести на экран коды и символы таблицы ASCII, начиная с символа
под номером 32 и заканчивая 127-м включительно.
Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.
Пример:
32 -   33 - ! 34 - " 35 - # 36 - $ 37 - % 38 - & 39 - ' 40 - ( 41 - )
42 - * 43 - + 44 - , 45 - - 46 - . 47 - / 48 - 0 49 - 1 50 - 2 51 - 3
52 - 4 53 - 5 54 - 6 55 - 7 56 - 8 57 - 9 58 - : 59 - ; 60 - < 61 - =
62 - > 63 - ? 64 - @ 65 - A 66 - B 67 - C 68 - D 69 - E 70 - F 71 - G
72 - H 73 - I 74 - J 75 - K 76 - L 77 - M 78 - N 79 - O 80 - P 81 - Q
82 - R 83 - S 84 - T 85 - U 86 - V 87 - W 88 - X 89 - Y 90 - Z 91 - [
92 - \ 93 - ] 94 - ^ 95 - _ 96 - ` 97 - a 98 - b 99 - c 100 - d 101 - e
102 - f 103 - g 104 - h 105 - i 106 - j 107 - k 108 - l 109 - m 110 - n 111 - o
112 - p 113 - q 114 - r 115 - s 116 - t 117 - u 118 - v 119 - w 120 - x 121 - y
122 - z 123 - { 124 - | 125 - } 126 - ~ 127 - 
Решите через рекурсию. Решение через цикл не принимается.
Допускается исп-е встроенных ф-ций
"""


def ascii_table(start, finish, row_len, get_row_len=0):
    get_row_len += 1
    if start == finish:
        return print(str(start) + ' - ' + chr(start))
    if get_row_len % row_len != 0:
        return print(str(start) + ' - ' + chr(start), end=' '), ascii_table(start+1, finish, row_len, get_row_len)
    else:
        return print(str(start) + ' - ' + chr(start)), ascii_table(start+1, finish, row_len, get_row_len)


ascii_table(32, 127, 10)


import random

"""
Задание 6.	В программе генерируется случайное целое число от 0 до 100.
Пользователь должен его отгадать не более чем за 10 попыток. После каждой
неудачной попытки должно сообщаться больше или меньше введенное пользователем
число, чем то, что загадано. Если за 10 попыток число не отгадано,
то вывести загаданное число.
Решите через рекурсию. Решение через цикл не принимается.
"""


def guess_number(computer_number=random.randint(0, 100), try_num=1, max_try=10):
    number = computer_number

    if try_num < max_try:
        user_number = int(input('Угадай, какое число загадал комп: '))
        if user_number == number:
            return print('Угадал(а)!')
        elif user_number < number:
            print(f'Попытка {try_num} из 10, пока не угадал(а), комп загадал число побольше')
            return guess_number(number, try_num + 1)
        else:
            print(f'Попытка {try_num} из 10, пока не угадал(а), комп загадал число поменьше')
            return guess_number(number, try_num + 1)
    else:
        return print(f'Количество попыток закончилось, комп загадал {number}')


guess_number()


"""
Задание 7.	Напишите программу, доказывающую или проверяющую, что для множества
натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2,
где n - любое натуральное число.
Пример:
для n = 5
1+2+3+4+5 = 5(5+1)/2
Нужно написать функцибю-рекурсию только для левой части выражения!
Результат нужно сверить с правой частью.
Решите через рекурсию. Решение через цикл не принимается.
"""


def chek(number, check_sum=0, check_expression=0):
    if check_sum == 0:
        check_expression = number * (number + 1) / 2

    check_sum += number
    if number == 1:
        return print(check_sum == check_expression)
    return chek(number-1, check_sum, check_expression)


chek(5)
