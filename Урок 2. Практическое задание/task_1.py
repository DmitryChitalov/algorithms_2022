"""
Задание 1.	Написать программу, которая будет складывать, вычитать,
умножать или делить два числа. Числа и знак операции вводятся пользователем.
После выполнения вычисления программа не должна завершаться, а должна
запрашивать новые данные для вычислений. Завершение программы должно
выполняться при вводе символа '0' в качестве знака операции. Если пользователь
вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
сообщать ему об ошибке и снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""
def recurs_calcul():
    users = input('Введите операцию (+, -, *, / или 0 для выхода): ')
    if users == '0':
        print('Выход')
        return
    if not (users == '+' or users == '-' or users == '/' or users == '*' or users == '0'):
        print('Неверная операция')
        return recurs_calcul()
    a = input('Введите первое число: ')
    b = input('Введите второе число: ')
    if not (a. isdecimal() and b. isdecimal()):
        print('Вместо числа введена строка! Исправьтесь')
        return recurs_calcul()
    a, b = int(a), int(b)
    if users == '+':
        result = a + b
    elif users == '-':
        result = a - b
    elif users == '*':
        result = a * b
    elif users == '/':
        try:
            result = round((a / b), 2)
        except ZeroDivisionError:
            print("На ноль делить нельзя!")
            return recurs_calcul()
    print(f'Ваш результат: {result}')
    return recurs_calcul()

recurs_calcul()
