"""
Задание 1.	Написать программу, которая будет складывать, вычитать,
умножать или делить два числа. Числа и знак операции вводятся пользователем.
После выполнения вычисления программа не должна завершаться, а должна
запрашивать новые данные для вычислений. Завершение программы должно
выполняться при вводе символа '0' в качестве знака операции. Если пользователь
вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
сообщать ему об ошибке и снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""

def argument():
    return input("Input operator: ")


def check(arg):
    return arg == '0' or arg == '+' or arg == '-' or arg == '*' or arg == '/'


def calc(a, b, arg):
    if arg == '+':
        return a + b
    elif arg == '-':
        return a - b
    elif arg == '*':
        return a * b
    else:
        return a / b

def calc_go(a=None, b=None):
    try:
        if a is None:
            a = float(input('Input a: '))
    except ValueError:
        print('Error Input only float!')
        calc_go(a, b)
    try:
        if b is None:
            b = float(input('Input b: '))
    except ValueError:
        print('Error Input only float!')
        calc_go(a, b)
    arg = argument()

    if not check(arg):
        print('Check you operator!')
        calc_go(a, b)
        return
    elif arg == '0':
        return
    elif arg == '/' and b == 0:
        print('I can not do it!')
        calc_go()
        return
    else:
        print(calc(a, b, arg))
        calc_go()


calc_go()