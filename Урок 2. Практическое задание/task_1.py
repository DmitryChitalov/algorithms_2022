"""
Задание 1.	Написать программу, которая будет складывать, вычитать,
умножать или делить два числа. Числа и знак операции вводятся пользователем.
После выполнения вычисления программа не должна завершаться, а должна
запрашивать новые данные для вычислений. Завершение программы должно
выполняться при вводе символа '0' в качестве знака операции. Если пользователь
вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
сообщать ему об ошибке и снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""


def calc():
    operations = ['+', '-', '*', '/']
    operation = input('Введите операцию: ')
    num1 = input('Введите первое число: ')
    num2 = input('Введите второе число: ')
    if operation == 0:
        return None
    elif operation in operations:
        if operation == operations[0]:
            result = int(num1) + int(num2)
            return print(result), calc()
        elif operation == operations[1]:
            result = int(num1) - int(num2)
            return print(result), calc()
        elif operation == operations[2]:
            result = int(num1) * int(num2)
            return print(result), calc()
        elif operation == operations[3]:
            if num2 == "0":
                return print("нельзя делить на ноль"), calc()
            else:
                result = int(num1) / int(num2)
                return print(result), calc()


if __name__ == "__main__":
    calc()
