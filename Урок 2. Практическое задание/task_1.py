"""
Задание 1.	Написать программу, которая будет складывать, вычитать,
умножать или делить два числа. Числа и знак операции вводятся пользователем.
После выполнения вычисления программа не должна завершаться, а должна
запрашивать новые данные для вычислений. Завершение программы должно
выполняться при вводе символа '0' в качестве знака операции. Если пользователь
вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
сообщать ему об ошибке и снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Решите через рекурсию. Решение через цикл не принимается.

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""

def sum(a, b):
    return f'{a} + {b} = {a + b}'
def sub(a, b):
    return f'{a} - {b} = {a - b}'
def mult(a, b):
    return f'{a} * {b} = {a * b}'
def div(a, b):
    return f'{a} / {b} = {a / b}'

def check():
    oper = input('Введите операцию (+, -, *, / или 0 для выхода): ')
    if oper == '0':
        print('Выход')
    else:
        try:
            num_1 = float(input('Введите первое число: '))
            num_2 = float(input('Введите второе число: '))
            func = {'+': sum(num_1, num_2),
                    '-': sub(num_1, num_2),
                    '*': mult(num_1, num_2),
                    '/': div(num_1, num_2)}
            print(f'Ваш результат :', func[oper])
            return check()
        except (ValueError, ZeroDivisionError, KeyError):
            print('Вы ввели строку а не число или делили на ноль или вместо операции ввели текст (((. Исправьтесь')
            return check()
check()
