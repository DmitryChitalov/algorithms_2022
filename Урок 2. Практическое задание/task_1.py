"""
Задание 1.	Написать программу, которая будет складывать, вычитать,
умножать или делить два числа. Числа и знак операции вводятся пользователем.
После выполнения вычисления программа не должна завершаться, а должна
запрашивать новые данные для вычислений. Завершение программы должно
выполняться при вводе символа '0' в качестве знака операции. Если пользователь
вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
сообщать ему об ошибке и снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Решите через рекурсию. Решение через цикл не принимается.

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""


class CalcNumbers:
    def __init__(self):
        self.inp = CalcNumbers.check_inp()  # проверка до инициализации в переменной экземпляра
        self.x = CalcNumbers.check_val_x()  # проверка до инициализации в переменной экземпляра
        self.y = CalcNumbers.check_val_y()  # проверка до инициализации в переменной экземпляра
        self.result = CalcNumbers.calc(self)  # результат выводится через __str__()

    @staticmethod
    def check_inp():
        inp = input('Введите операцию (+, -, *, / или 0 для выхода): ')
        if inp not in ['+', '-', '*', '/', '0']:
            print('Введено что-то не то...')
            return CalcNumbers.check_inp()  # рекурсивный вызов, если проверка не пройдена
        elif inp == '0':
            return exit(0)
        else:
            return inp

    @staticmethod
    def check_val_x():
        try:
            x = int(input('Введите первое число: '))
        except ValueError:
            print('Вы вместо трехзначного числа ввели строку -(. Исправьтесь')
            return CalcNumbers.check_val_x()  # рекурсивный вызов, если проверка не пройдена
        if x not in range(100, 1000) and x != 0:
            print('Вы ввели не трехзначное число')
            return CalcNumbers.check_val_x()  # рекурсивный вызов, если проверка не пройдена
        else:
            return x

    @staticmethod
    def check_val_y():
        try:
            y = int(input('Введите второе число: '))
        except ValueError:
            print('Вы вместо трехзначного числа ввели строку -(. Исправьтесь')
            return CalcNumbers.check_val_y()  # рекурсивный вызов, если проверка не пройдена
        else:
            return y

    def calc(self):
        if self.inp == '+':
            return self.x + self.y
        elif self.inp == '-':
            return self.x - self.y
        elif self.inp == '*':
            return self.x * self.y
        elif self.inp == '/':
            try:
                return self.x / self.y
            except ZeroDivisionError:
                print('На ноль делить нельзя')
                return CalcNumbers.check_inp()  # рекурсивный вызов, если проверка не пройдена

    def __str__(self):
        return f'Ваш результат: {self.result}'


if __name__ == '__main__':
    calc_1 = CalcNumbers()
    print(calc_1)
