"""
Задание 1.	Написать программу, которая будет складывать, вычитать,
умножать или делить два числа. Числа и знак операции вводятся пользователем.
После выполнения вычисления программа не должна завершаться, а должна
запрашивать новые данные для вычислений. Завершение программы должно
выполняться при вводе символа '0' в качестве знака операции. Если пользователь
вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
сообщать ему об ошибке и снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""

def calc():
    user_input = lambda n: n if n.isdigit() else user_input(input('Вы вместо числа ввели строку (((. '
                                                                       'Исправьтесь.\nВведите число: '))
    check_oper = lambda o: o if o in ['+', '-', '/', '*'] else exit(0) if o == '0' \
        else (input('Нет такого оператора.'
                    'Введите +, -, * или /: '))
    operator = check_oper(input('Введите операцию (+, -, *, / или 0 для выхода): '))

    first_n = user_input(input('Введите первое число: '))
    second_n = user_input(input('Введите второе число: '))
    try:
        print(eval(f'{first_n + operator + second_n}'))
    except ZeroDivisionError:
        print('Не надо на ноль делить.')
    return calc()

calc()


