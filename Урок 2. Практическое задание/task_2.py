"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""
def rec_even(val, even=0, not_even=0):
    if int(val % 10) > 0 and int(val // 10) == 0:
        if int(val % 10) % 2 == 0 or val == 0:
            return f'Количество четных и нечетных цифр в числе равно: (  {str(int(even + 1))} , {str(int(not_even))})'
        else:
            return f'Количество четных и нечетных цифр в числе равно: (' + str(int(even)) +', '+ str(int(not_even+ 1))+ ')'

    else:
        if int(val % 10) % 2 == 0:
            return rec_even(val // 10, even + 1, not_even)
        else:
            return rec_even(val // 10, even, not_even + 1)

val = 6573984598670
print(rec_even(val))