"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def count_odd_even(number, odd=0, even=0):
    if number // 10 == 0:
        if number % 2 == 0:
            even += 1

        odd += 1
        return f'Amount Odd = {odd}\nAmount of Even = {even}'

    last_number = number % 10
    number = number // 10

    if last_number % 2 == 0:
        return count_odd_even(number, odd, even + 1)
    return count_odd_even(number, odd + 1, even)


print(count_odd_even(1234567))
