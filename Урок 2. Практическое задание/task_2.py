"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def odd_or_even(number: int, odd_count=0, even_count=0):
    """
    Функция принимает в качестве аргументов исходное натуральное число и начальные значения счетчиков (четных
    и нечетных чисел), которые по умолчанию равны нулю, и выводит на экран количество четных и нечетных чисел,
    входящих в данное число.
    :param number: Исходное натуральное число
    :param odd_count: Начальное значение счетчика нечетных чисел
    :param even_count: Начальное значение счетчика четных чисел
    :return:
    """
    left = number // 10
    right = number % 10
    if right % 2 != 0:
        odd_count += 1
    else:
        even_count += 1
    if left != 0:
        odd_or_even(left, odd_count, even_count)
    else:
        print(f'Нечетных чисел {odd_count}, четных чисел {even_count} (включая нули)')


if __name__ == "__main__":
    print('Пожалуйста, введите натуральное число:')
    user_number = int(input())
    odd_or_even(user_number)


