"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. Решение через цикл не принимается.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def even_and_odd(number: int, even=0, odd=0):
    """
    Функция считает количество чётных и нечётных чисел в виде кортежа,
    где первый элемент - это количество чётных чисел,
    второй - нечётных.
    :param number:
    :param even:
    :param odd:
    :return: tuple
    """
    if number == 0:
        return even, odd
    n = number % 10
    if n % 2 == 0:
        even += 1
    elif n % 2 != 0:
        odd += 1
    return even_and_odd(number // 10, even, odd)


if __name__ == '__main__':
    print(even_and_odd(123))
