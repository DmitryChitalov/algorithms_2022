"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

def odd_even(number, even = 0, odd = 0, i = 0):
    """Функция возвращает количество четных и нечетных цифр в виде кортежа"""
    if number == 0 and i == 0: # Для случая с нулем, который четное число.
        return 1, odd
    elif number == 0 and i != 0:
        return even, odd
    else:
        if number % 10 % 2 == 0:
            even += 1
            i += 1
            return odd_even(number // 10, even, odd, i)
        else:
            odd += 1
            i += 1
            return odd_even(number // 10, even, odd, i)


print(odd_even(11122))
print(odd_even(0))

