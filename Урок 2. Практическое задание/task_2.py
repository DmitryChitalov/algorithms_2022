"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. Решение через цикл не принимается.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def find_even_or_not(number, even_num, not_even_num):

    if number < 1:
        return f"Четных {even_num}, Нечетных {not_even_num}"
    else:
        if number & 1:
            not_even_num += 1
        else:
            even_num += 1
        return find_even_or_not(number // 10, even_num, not_even_num)


print(find_even_or_not(int(input("Введите число: ")), 0, 0))