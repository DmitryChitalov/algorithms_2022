"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

def count_even (num):
    if num // 10 == 0:
        if num % 2 == 0:
            ev = 1
            odd = 0
        else:
            ev = 0
            odd = 1
        return ev, odd

    else:
        if num %10 % 2 == 0:
            ev = 1
            odd = 0
        else:
            ev = 0
            odd = 1

        return ev + count_even(num//10)[0], odd + count_even(num//10)[1]

num = 13596852606
print(count_even(num))
print('В числе {} четных чисел - {}, нечетных - {}'.format(num, count_even(num)[0], count_even(num)[1]))


# # Вариант 2
# def count_even_2 (num):
#     total = 0
#     if num // 10 == 0:
#
#         if num % 2 == 0:
#             even = 1
#         return even
#
#     else:
#         total +=1
#         if num %10 % 2 == 0:
#             even = 1
#
#         even = even + count_even_2(num//10)
#     return even, total - even
#
#
# num = 24659
# print(count_even_2(num))
# print('В числе {} четных чисел - {}, нечетных - {}'.format(num, count_even_2(num)[0], count_even_2(num)[1]))
