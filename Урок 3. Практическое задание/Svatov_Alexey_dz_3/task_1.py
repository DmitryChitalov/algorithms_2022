"""
Задание 1.

Реализуйте:

a) заполнение списка, оцените сложность в O-нотации.
   заполнение словаря, оцените сложность в O-нотации.
   сделайте аналитику, что заполняется быстрее и почему.
   сделайте замеры времени.

b) выполните со списком и словарем операции: изменения и удаления элемента.
   оцените сложности в O-нотации для операций
   получения и удаления по списку и словарю
   сделайте аналитику, какие операции быстрее и почему
   сделайте замеры времени.


ВНИМАНИЕ: в задании два пункта - а) и b)
НУЖНО выполнить оба пункта

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""
from random import randint
from time import time


def sw_decorator(func):
    def stopwatch(*args, **kwargs):
        start = time()
        result = func(*args, **kwargs)
        end = time()
        print(f'Время выполенения функции {func.__name__} = {end - start}')
        return result

    return stopwatch


# --------------------------------------------------------a--------------------------------------------------------------

@sw_decorator
def fill_list(target_list, count_elems):
    for i in range(count_elems):  # O(n)
        target_list.append(randint(0, 1000))  # O(1)
    return target_list


@sw_decorator
def fill_dict(target_dict, count_elems):
    for i in range(count_elems):  # O(n)
        target_dict[i] = randint(0, 1000)  # O(1)
    return target_dict


test_list = []
fill_list(test_list, 10000)  # время = 0.02413320541381836

test_dict = {}
fill_dict(test_dict, 10000)  # время = 0.02263951301574707

"""
Время выполнения каждой из функций сопоставимо, т.к. O big идентичны. 

В случае со списком добавление элемента происходит в конец списка, что не требует сдвига последующих элементов и 
последующего "пересчёта индексов" элементов, находящихся после места вставки.

В случае со словарём вставка происходит по принципу работы с хэш-таблицами, то есть по обращению к  "уникальному" ключу
"""
