
"""
Задание 1.
Реализуйте функции:
a) заполнение списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
b) получение элемента списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
с) удаление элемента списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""


from time import perf_counter
n = 1000000


def count_time(func):
    def wrapper(*args):
        t_start = perf_counter()
        res = func(*args)
        t_delta = perf_counter() - t_start
        print(f'Время выполнения функции {func.__name__}(): {t_delta}')
        return res
    return wrapper


# Пункт  a:
@count_time
def list_filling(num):                       # O(n)
    return [i for i in range(0, num)]        # O(n)


@count_time
def dict_filling(num):                       # O(n)
    return {i: None for i in range(0, num)}  # O(n)


print('Пункт  a:')
print('Заполнение списка:')
list1 = list_filling(n)
list2 = list_filling(n)
list3 = list_filling(n)
print()

print('Заполнение  словаря:')
dict1 = dict_filling(n)
dict2 = dict_filling(n)
dict3 = dict_filling(n)
print()


# Пункт  b:
@count_time
def get_list_item(list, el):        # O(n)
    for i in list:                  # O(n)
        if i == el:                 # O(1)
            return i                # O(1)

@count_time
def get_dict_item(my_dict, k):        # O(n)
    for i in my_dict:                 # O(n)
        if i == k:                    # O(1)
            return i                  # O(1)

@count_time
def get_dict_item_get(my_dict, k):    # O(1)
    return my_dict.get(k)             # O(1)

print('Пункт  b:')
print('Получение элемента списка:')
list_element = get_list_item(list1, n-1)
print('Получение элемента словаря:')
dict_element = get_dict_item(dict1, n-1)
print('Получение элемента словаря через get() :')
dict_element = get_dict_item_get(dict1, n-1)
print()


# Пункт c:
@count_time
def del_list_item(list, el):         #O(n)
    for i in range(el):
        list.remove(el)
        return list

@count_time
def del_dict_item(dict, el):          #O(n)
    for i in range(el):
        dict.pop(i)
        return dict


@count_time
def del_dict_item_pop(dict, el):      # O(1)
    dict.pop(el)                      # O(1)
    return dict                       # O(1)


print('Пункт  c:')
print('Удаление элемента списка:')
del_list_item(list1, n-1)
print('Удаление элемента словаря:')
del_dict_item(dict1, n-1)
print('Удаление элемента словаря:')
del_dict_item_pop(dict1, n-1)

"""
Пункт  a:
Заполнение списка:
Время выполнения функции list_filling(): 0.035031900042667985
Время выполнения функции list_filling(): 0.03369040018878877
Время выполнения функции list_filling(): 0.036140199983492494

Заполнение  словаря:
Время выполнения функции dict_filling(): 0.05795330018736422
Время выполнения функции dict_filling(): 0.0576581999193877
Время выполнения функции dict_filling(): 0.05781979998573661

-- словарь представляет собой хэш-таблицу, поэтому словарь выполняется медленнее 


Пункт  b:
Получение элемента списка:
Время выполнения функции get_list_item(): 0.021189899882301688
Получение элемента словаря:
Время выполнения функции get_dict_item(): 0.02456939988769591
Получение элемента словаря через get() :
Время выполнения функции get_dict_item_get(): 7.700175046920776e-06

-- через for, чтение данных из словаря и списка, мало отличаются друг от друга.
-- однако используя профильный метод get(), работающий, через хеш словаря,
-- мы получаем очевидное преимущество


Пункт  c:
Удаление элемента списка:
Время выполнения функции del_list_item(): 0.009529100032523274
Удаление элемента словаря:
Время выполнения функции del_dict_item(): 1.1800089851021767e-05
Удаление элемента словаря:
Время выполнения функции del_dict_item_pop(): 1.600012183189392e-06

-- специальный метод словаря pop() очевидно работает быстрее, чем remove списка.
-- поиск данных в словаре, благодаря хэшу, почти мгновенен
"""
