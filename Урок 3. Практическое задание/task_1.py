"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

import time

obj_list = []
obj_dict = {}


def time_decor(func):
    def wrapped(arg):
        start_time = time.time()
        print(func(arg))
        end_time = time.time()
        print(f'Время выполнения {func.__name__}: {end_time - start_time} с.')
    return wrapped


'''a) заполнение списка, оцените сложность в O-нотации
   заполнение словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени'''


@time_decor
def completion_list(num_max):  # O(n)
    """Функция заполнения списка"""
    for i in range(0, num_max):  # O(n)
        obj_list.append(i)  # O(1)
    return f'Создан список со значениями от 0 до {num_max}.'


@time_decor
def completion_dict(num_max):  # O(n)
    """Функция заполнения словаря"""
    for i in range(0, num_max):  # O(n)
        obj_dict[i] = i  # O(1)
    return f'Создан словарь с парами ключ-значение от 0 до {num_max}.'


completion_list(1000000)
completion_dict(1000000)
print('Сложность функций одинаковая. Список заполняется быстрее словаря, т.к. у ключей словаря генерируется хеш.')
print('-----------------------------------')


'''b) получение элемента списка, оцените сложность в O-нотации
   получение элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени'''


@time_decor
def getting_list(num_search):  # O(n)
    """Функция поиска значения по списку"""
    for i in obj_list:  # O(n)
        if i == num_search:  # O(1)
            return f'Найдено значение {obj_list[num_search]} в списке'  # O(1)
    return f'{num_search} такого значения нет в списке.'


@time_decor
def getting_dict(num_search):  # O(n)
    """Функция поиска значения по ключу словаря"""
    for key in obj_dict:  # O(n)
        if obj_dict[key] == num_search:  # O(1)
            return f'Найдено значение {obj_dict[num_search]} в словаре'  # O(1)
    return f'{num_search} такого ключа нет в словаре.'


getting_list(999880)
getting_dict(999880)
print('Сложность функций одинаковая. Поиск по списку работает быстрее поиска по словарю.')
print('-----------------------------------')


'''с) удаление элемента списка, оцените сложность в O-нотации
   удаление элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени'''


@time_decor
def del_list(num_del):  # O(n)
    """Функция удаления значения из списка"""
    for i in obj_list:  # O(n)
        if i == num_del:  # O(1)
            obj_list.pop(num_del)  # O(1)
            return f'Удалено значение {num_del} из списка.'
    return f'{num_del} такого значения нет в списке.'


@time_decor
def del_dict(num_del):  # O(n)
    """Функция удаления значения из словаря"""
    for key in list(obj_dict):  # O(n)
        if key == num_del:  # O(1)
            obj_dict.pop(num_del)  # O(1)
            return f'Удалена пара ключ-значение с ключом {num_del} из словаря.'
    return f'{num_del} такого ключа нет в словаре.'


del_list(888886)
del_dict(888886)
print('Сложность функций одинаковая. Удаление элемента из списка работает быстрее, чем удаление элемента из словаря.')
print('-----------------------------------')
