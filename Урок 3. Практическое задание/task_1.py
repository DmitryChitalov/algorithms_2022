"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

import time


def time_measurement(func):
    def wrapper(*args):
        start = time.time()
        start_func = func(*args)
        end = time.time()
        print(end - start)
        return start_func
    return wrapper

# Блок А


@time_measurement
def append_list(n):
    """
    Функция для заполнения списка
    Алгоритм: простой генератор списка
    Сложность: O(n)
    """
    obj_list = [i for i in range(n)]  # O(n)
    return obj_list


@time_measurement
def append_dict(n):
    """
     Функция для заполнения списка
     Алгоритм: простой генератор списка
     Сложность: O(n)
     """
    obj_dict = {x: x for x in range(n)}  # O(n)
    return obj_dict


append_list(10000000)
append_dict(10000000)
