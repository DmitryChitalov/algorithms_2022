"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

import time


# from random import randrange, sample


# Декоратор - вычисление времени
def calc_time(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        res = func(*args, **kwargs)
        end = time.time()
        print('Время выполнения функции {}: {} секунд.'.format(func.__name__, end - start))
        return res

    return wrapper




#################################################################################################################
# # a) Заполнение списка / словаря

# Список
@calc_time
def push_in_list(lst, rng):  # O(n)
    for el in rng:
        lst.append(el)
    return lst



lst = [1, 55, 63, 98, 2, 64, 87]
rng = range(1, 50000)

lst_new = push_in_list(lst, rng)  # O(n)
# print(lst_new)




# Словарь

# @calc_time
# def push_in_dict(dict, data_key, data_val):
#     for i in data_key, data_val:
#         dict[data_key[i]] = data_val[i]
#     return dict

#
# dict = {
# }
#
# data_key = [i for i in range(1, 10)]
# data_val = [i for i in range(1, 100)]
#
# dict_new = push_in_dict(dict, data_key, data_val)


# ################################################################################################################
# # b) Получение элемента из списка / словаря

@calc_time
def get_val(lst, n):            #O(n)
    for i in range(n):
        val = lst[i]
    return val


lst = [i for i in range(1, 100000)]
# print(lst)

val = get_val(lst, 100)


# ###############################################################################################################
# # c) Удаление элемента из списка / словаря

@calc_time
def pop_out(lst, n):            #O(n)
    for i in range(n):
        lst.pop()
    return lst


for i in


lst = [i for i in range(1, 10000)]
# print(lst)

lst_new = pop_out(lst, 7000)
# print(lst_new)

