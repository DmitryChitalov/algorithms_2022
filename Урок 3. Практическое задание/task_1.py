"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

from time import time

n = 10 ** 5

# Пункт А
def time_decorator(func):
    def timer(*args, **kwargs):
        start = time()
        result = func(*args, **kwargs)
        end = time()
        print(f'Время выполенения функции {func.__name__} '
              f'составило {end - start}')
        return result

    return timer


@time_decorator
# Сложность O(n)
def fill_list(lst, num):
    for i in range(num):
        lst.append(i)


some_list = []
fill_list(some_list, n)
print('_' * 100)


@time_decorator
# Сложность O(n)
def fill_dict(dct, num):
    for i in range(num):
        dct[i] = i


some_dict = {}
fill_dict(some_dict, n)
print('_' * 100)


"""
Время выполенения функции fill_list составило 0.012964725494384766
_______________________________________________________________________________
Время выполенения функции fill_dict составило 0.007947921752929688
_______________________________________________________________________________
Вывод: список заполняется быстрее, поскольку словарь требует вычисление хешей
"""

# Пункт Б
@time_decorator
# Сложность O(1)
def get_el_list(lst):
    for j in range(20000):
        lst[j] = lst[j + 1]


get_el_list(some_list)
print('_' * 100)


@time_decorator
# Сложность O(1)
def get_el_dict(dct):
    for j in range(1, 20001):
        dct[j] = 'a'


get_el_dict(some_dict)
print('_' * 100)


"""
Время выполенения функции get_el_list составило 0.0020265579223632812
____________________________________________________________________________________________________
Время выполенения функции get_el_dict составило 0.0009918212890625
____________________________________________________________________________________________________
Вывод: Получение и изменение элемента у словаря происходи быстрее, чем у списка
"""

# Пункт C
@time_decorator
# Сложность O(n)
def del_el_list(lst):
    for i in range(10000):
        lst.pop(i)


del_el_list(some_list)
print('_' * 100)


@time_decorator
# Сложность O(1)
def del_el_dict(dct):
    for i in range(10000):
        dct.pop(i)


del_el_dict(some_dict)
print('_' * 100)


"""
Время выполенения функции del_el_list составило 0.24933385848999023
____________________________________________________________________________________________________
Время выполенения функции del_el_dict составило 0.0009968280792236328
____________________________________________________________________________________________________
Вывод: Удаление элемента у словаря происходи быстрее, чем у списка так как в списке все элементы после удаления
сдвигаются
"""
