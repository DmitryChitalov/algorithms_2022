"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""
from time import time

NUM = 10 ** 6


def calc_time(func):
    """  Декоратор для измерения времени работы функции """
    def timer(*args, **kwargs):
        start = time()
        result = func(*args, **kwargs)
        end = time()
        print(f'Выполнение функции {func.__name__} заняло {end - start} ')
        return result
    return timer


@calc_time
def app_list(my_list, count):
    """
    заполнение списка методом  append
    Сложность: O(n)
    """
    for i in range(count):                             # O(n)
        my_list.append(f'{i}-й элемент')               # O(1)


@calc_time
def ins_list(my_list, count):
    """
    Заполнение списка методом insert
    Сложность: O(n^2)"""
    for i in range(count):                             # O(n)
        my_list.insert(0, f'{i}-й элемент')            # O(n)


@calc_time
def dict_fill(my_dict, count):
    """
    Заполнение словаря
    Сложность: O(n)
    """
    for i in range(count):                              # O(n)
        my_dict[i] = f'{i}-й элемент'                   # O(1)


new_list_app = []
app_list(new_list_app, NUM)
print('*' * 50)
new_list_ins = []
# ins_list(new_list_ins, NUM)
print('*' * 50)
new_dict = {}
dict_fill(new_dict, NUM)
print('*' * 50)


""" Выполнение функции app_list заняло 0.03655099868774414 
**************************************************
Выполнение функции ins_list заняло 3.754563331604004 
**************************************************
Выполнение функции dict_fill заняло 0.04980611801147461 
**************************************************

Список заполняется быстрее методом append, имеет сложность O(n).
Словарь заполняется немного дольше, т.к. хеширование ключей занимает 
дополнительное время. хотя сложность функции так же O(n)
Самое долгое время занимает заполнение списка методом insert, т.к.
элементы вставляются по индексу. Сложность O(n^2)
"""


@calc_time
def get_list(my_list):
    """
    Получение элементов списка
    Сложность: O(n)
    """
    elem = 0
    for i, val in enumerate(my_list):           # O(n)
        elem = val                     # O(1)
    return elem


@calc_time
def get_dict(my_dict):
    """
    Получение элементов словаря
    Сложность: O(n)
    """
    elem = 0
    for i, val in enumerate(my_dict):            # O(n)
        elem = val                    # O(1)
    return elem


get_list(new_list_app)
print('*' * 50)
get_dict(new_dict)
print('*' * 50)

""" 
**************************************************
Выполнение функции get_list заняло 0.09326648712158203 
**************************************************
Выполнение функции get_dict заняло 0.08691930770874023 
**************************************************
Получение элемента словаря быстрее, чем получение элемента списка
"""


@calc_time
def del_list(my_list):
    """
    Удаление элемента списка
    Сложность: O(n)
    """
    for _ in enumerate(my_list):         # O(n)
        my_list.pop()                     # O(1)


@calc_time
def del_dict(my_dict):
    """
    Удаление элемента словаря
    Сложность: O(n)
    """
    for i in range(len(my_dict)):       # O(n)
        my_dict.pop(i)                  # O(1)


del_list(new_list_app)
print('*' * 50)
del_dict(new_dict)
print('*' * 50)

""" 
**************************************************
Выполнение функции del_list заняло 0.08691716194152832 
**************************************************
Выполнение функции del_dict заняло 0.19190192222595215 
**************************************************
Удаление элементов списка происходит быстрее, 
т.к. хеширование ключей занимает время"""
