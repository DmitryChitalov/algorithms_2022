"""
Задание 1.

Реализуйте:

a) заполнение списка, оцените сложность в O-нотации.
   заполнение словаря, оцените сложность в O-нотации.
   сделайте аналитику, что заполняется быстрее и почему.
   сделайте замеры времени.

b) выполните со списком и словарем операции: изменения и удаления элемента.
   оцените сложности в O-нотации для операций
   получения и удаления по списку и словарю
   сделайте аналитику, какие операции быстрее и почему
   сделайте замеры времени.


ВНИМАНИЕ: в задании два пункта - а) и b)
НУЖНО выполнить оба пункта

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""


from datetime import datetime

def timer(time_func):
    def test_time():
        start = datetime.now()
        result = time_func()
        print(datetime.now() - start)
        return result
    return test_time

@timer
def spisok():
    l = []
    for i in range(1, 10000):
        if i**2 % 2 == 0:
            l.append(i)
    return l


@timer
def dic():
    d = {}
    for i in range(1, 10000):
        if i % 2 == 0:
            d[i] = i**2
    return d



l = spisok()      # 0:00:00.003000
d = dic()         # 0:00:00.003001

# пример может быть не удачный получился, но по факту
# словарь обрабатывается медленее за счет того что когда добавляется
# информация, необходимо посчитать хеш, а всписок просто добавляется
# например в конец
