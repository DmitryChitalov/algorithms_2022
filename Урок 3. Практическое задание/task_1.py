"""
Задание 1.
Реализуйте:
a) заполнение списка, оцените сложность в O-нотации.
   заполнение словаря, оцените сложность в O-нотации.
   сделайте аналитику, что заполняется быстрее и почему.
   сделайте замеры времени.
b) выполните со списком и словарем операции: изменения и удаления элемента.
   оцените сложности в O-нотации для операций
   получения и удаления по списку и словарю
   сделайте аналитику, какие операции быстрее и почему
   сделайте замеры времени.
ВНИМАНИЕ: в задании два пункта - а) и b)
НУЖНО выполнить оба пункта
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""
import time


# Декоратор для замера времени выполнения функции
def count_time(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        print(f'Время выполнения {func.__name__}: {time.time() - start}')
        return result

    return wrapper


@count_time
def list_filling(n):  # заполнение списка
    return [x for x in range(n)]  # линейная сложность O(n)


@count_time
def dict_filling(n):  # заполнение словаря
    return {x: 'value' for x in range(n)}  # линейная сложность O(n)


@count_time
def list_changing(list_):  # изменение элементов списка
    for i in range(len(list_)):  # линейная сложность O(n)
        list_[i] = i + i  # O(1)
    return


@count_time
def dict_changing(dict_):  # изменение элементов словаря
    for key in dict_:  # линейная сложность O(n)
        dict_[key] = 'value_new'  # O(1)
    return


@count_time
def list_deleting(list_):  # удаление элементов списка
    for _ in range(len(list_)):  # линейная сложность O(n)
        # del list_[0] # общая квадратичная сложность O(n^2) и уже при 300,000 эл-тов выполняется 24с
        list_.pop(-1)  # O(1) самый благоприятный вариант - удаляется последний элемент
    return


@count_time
def dict_deleting(dict_, list_keys):   # удаление элементов словаря
    for key in list_keys:  # линейная сложность O(n)
        del dict_[key]  # O(1)
    return


size = 3000000  # 3,000,000
# заполнение списка и словаря
l0 = list_filling(size)  # 0.116
d0 = dict_filling(size)  # 0.225
# изменение элементов списка и словаря
list_changing(l0)  # 0.157
dict_changing(d0)  # 0.105
# удаление элементов списка и словаря
list_deleting(l0)  # 0.150
dict_deleting(d0, list(d0.keys()))  # 0.110

'''
Заполнение списка оказалось примерно в 2 раза быстрее. Это предсказуемо. Для хеширования ключей словаря требуется
дополнительное время.
Удаление и изменение элементов в словаре уже в 1.5 раза быстрее из-за более быстрого доступа к элементам.
Удаление из списка произвольного эл-та уже стремиться к квадратичной сложности, из-за перестроения списка,
и уже не сравнима с операцией удаления в словаре.
'''