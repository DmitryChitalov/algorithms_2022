"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""


from time import time


def measure_time(func_for_measure):
    def func_wrapp(*args):
        time_start = time()
        func_result = func_for_measure(*args)
        time_end = time()
        print(f'Время выполнения функции {func_for_measure.__name__}: {time_end - time_start}')
        return func_result
    return func_wrapp


#a)
# Сложность: O(N)
@measure_time
def fill_list(num_of_els, a_list=[]):
    for i in range(32, 32 + num_of_els):    # O(N)
        a_list.append(chr(i))               # O(1)
    return a_list
# Время выполнения функции fill_list: 0.2270512580871582


# Сложность: O(N)
@measure_time
def fill_dict(num_of_els, a_dict={}):
    for i in range(32, 32 + num_of_els):    # O(N)
        a_dict[i] = chr(i)                  # O(1)
    return a_dict
# Время выполнения функции fill_dict: 0.3380765914916992


the_list = fill_list(1100000)
the_dict = fill_dict(1100000)


# Несмотря на то, что сложности алгоритмов заполнения списка и заполнения
# словаря одинаковые, словарь заполняется дольше из-за необходимости
# вычисления хешей ключей
