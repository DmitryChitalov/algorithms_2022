"""
Задание 1.

Реализуйте:

a) заполнение списка, оцените сложность в O-нотации.
   заполнение словаря, оцените сложность в O-нотации.
   сделайте аналитику, что заполняется быстрее и почему.
   сделайте замеры времени.

b) выполните со списком и словарем операции: получения и удаления элемента.
   оцените сложности в O-нотации для операций
   получения и удаления по списку и словарю
   сделайте аналитику, какие операции быстрее и почему
   сделайте замеры времени.


ВНИМАНИЕ: в задании два пункта - а) и b)
НУЖНО выполнить оба пункта

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

#######################################################################
# а)
import random


def speed_timer(func):
    import time

    def wrapper(arg):
        start_st = time.time()
        func(arg)
        end_st = time.time()
        print(f'[*] Время выполнения {func.__name__}: {(end_st - start_st)} сек.')

    return wrapper


@speed_timer
def list_crt(n):
    a = []  # O(1)
    for i in range(n):  # O(n)
        a.append(i)  # O(1)


list_crt(10000)


@speed_timer
def dict_crt(n):
    b = {}  # O(1)
    for i in range(n):  # O(n)
        b[i] = i  # O(1)


dict_crt(10000)

'''
Cложность в O-нотации у обоих функций линейная O(n).
Сложность заполнения у обоих функций константная.
Список заполняется быстрее, чем словарь, скорее всего это 
связано с созданием ключей(вычисления хэша).
'''

print('==================================')


#######################################################################
# b)
@speed_timer
def list_get(n):
    a = [i ** 2 for i in range(n)]  # O(n)
    el = random.randint(1, n - 1)  # O(n)
    if a[el] in a:  # O(n)
        print(True)  # O(1)
        print(a.pop(el))  # O(1)


list_get(10000)


@speed_timer
def dict_get(n):
    b = {i: i ** 2 for i in range(n)}  # O(n)
    el = random.randint(1, n - 1)  # O(n)
    print(el, b[el])  # O(1)
    del b[el]  # O(1)


dict_get(10000)

'''
Cложность  O-нотации у обоих функций линейная O(n).
При поиске в списке O-нотация: O(n). При удалении элемента в списке
O-нотация: O(1).
При поиске и удалении элемента в словаре O-нотация: O(1). Так как происходит
обращение по ключю.
'''
