"""
Задание 3.
Определить количество различных (уникальных) подстрок
с использованием хеш-функции
Дана строка S длиной N, состоящая только из строчных латинских букв
Подсказка: вы должны в цикле для каждой подстроки вычислить хеш
Все хеши записываем во множество.
Оно отсечет дубли.
Экономия на размере хранимых данных (для длинных строк) и
скорость доступа вместе с уникальностью элементов,
которые даёт множество, сделают решение коротким и эффективным.
Пример:
рара - 6 уникальных подстрок
рар
ра
ар
ара
р
а
"""

# Непонятно, зачем нам в этой задаче нужны хеши, но попрробую их прикрутить.
# Насколько я понял, хеши дадут прирост в производительности, когда длина рассматриваемой строки будет кратно
# (или многократно) длиннее длины хеша.

import hashlib


work_string = input('Какую строку разобрать? ')
uniq_string = {work_string}

work_hash = hashlib.sha256(work_string.encode(encoding='utf-8')).hexdigest()
uniq_hash = {work_hash}

for i in range(len(work_string)):
    for j in range(1, len(work_string[i:]) + 1):
        check_string = work_string[i:i + j]
        check_hash = hashlib.sha256(check_string.encode(encoding='utf-8')).hexdigest()

# В этом условии проверял, была ли уже такая подстрока в проверке и, если нет, печатал её
        # if check_hash in uniq_hash:
        #     continue
        # print(check_string)
        uniq_hash.add(check_hash)

# Вычел 1, т.к. из примера понял, что полную строку мы подстрокой не считаем.
print('Уникальных подстрок ', len(uniq_hash) - 1)
