# декоратор для замеров
from time import time

n = 10 ** 5  # число операций


def time_decorator(func):
    def timer(*args, **kwargs):
        start = time()
        result = func(*args, **kwargs)
        end = time()
        print(f'Время выполенения функции {func.__name__} '
              f'составило {end - start}')
        return result

    return timer


@time_decorator
def fill_list_append(lst, num):
    """Заполняет список"""
    for i in range(num):
        lst.append(i)  # Сложность операции O(1). Вставка в конец списка


some_list = []
fill_list_append(some_list, n)
print('_' * 100)


@time_decorator
def fill_list_insert(lst, num):
    """Заполняет список"""
    for i in range(num):
        lst.insert(0, i)  # Сложность операции O(n) (по документации).
                                                # Вставка в начало списка


some_list = []
fill_list_insert(some_list, n)
print('_' * 100)


@time_decorator
def fill_dict(dct, num):
    """Заполняет словарь"""
    for i in range(num):  # Операция заполнения словаря занимает меньше
        # времени, так как он представляет из себя хеш-таблицу и операция
                        # добавления нового элемента имеет сложность О(1).
        dct[i] = i


some_dict = {}
fill_dict(some_dict, n)
print('_' * 100)


"""
Время выполенения функции fill_list_append составило 0.007004976272583008
_______________________________________________________________________________
Время выполенения функции fill_list_insert составило 2.785857677459717
_______________________________________________________________________________
Время выполенения функции fill_dict составило 0.01000523567199707
_______________________________________________________________________________
"""

# Операции удаления, получения по индексу и ключу
@time_decorator
def change_list(lst):
    """Выполняет операции по изменению списка"""
    for i in range(10000):  # удаляем 1000 элементов из списка
        lst.pop(i)
    for j in range(1000):
        lst[j] = lst[j + 1]  # изменяем тысячу элементов в списке


change_list(some_list)
print('_' * 100)


"""
В функции change_list(lst) операции удаления элемента не 
с конца списка lst.pop(i) выполняются за О(n). Обращение по
индексу с изменением элемента списка выполняется за О(1).
"""


@time_decorator
def change_dict(dct):
    """Выполняет операции по изменению словаря"""
    for i in range(10000):
        dct.pop(i)  # удаляем тысячу ключей из словаря
    for j in range(1001, 2002):
        dct[j] = 'fill'  # изменяем тысячу значений в соваре


change_dict(some_dict)
print('_' * 100)

"""
В функции change_dict(some_dict) все операции 
изменения словаря проходят за время O(1).
Следовательно функция по изменению словаря отрабатывает гораздо быстрее.
"""

"""
Время выполенения функции change_list составило 0.31821274757385254
_______________________________________________________________________________
Время выполенения функции change_dict составило 0.0010006427764892578
_______________________________________________________________________________
"""
