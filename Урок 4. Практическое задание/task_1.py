"""
Задание 1.
Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива
Сделайте замеры времени выполнения кода с помощью модуля timeit
Попробуйте оптимизировать код, чтобы снизить время выполнения
Проведите повторные замеры
ОБЯЗАТЕЛЬНО! Добавьте аналитику: что вы сделали и какой это принесло эффект
"""


from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


# Модернизируем функциию, используя List Comprehension
def func_2(nums):
    return [i for i in range(len(nums)) if nums[i] % 2 == 0]


num = list(range(10000))

a = timeit("func_1(num)", globals=globals(), number=1000)
print('Функция итератора с .append()     ',a)
b = timeit('func_2(num)', globals=globals(), number=1000)
print('Функция через List Comprehension: ',b)
print('Повышение скорости работы :       ',round((a - b) / a * 100, 2),'%')


''' 
Функция итератора с .append()      0.5960876001045108
Функция через List Comprehension:  0.4908330999314785
Повышение скорости работы :        17.66 %

Провели замеры 1000 раз с исходным массивом из 10000 элементов.
Применяя для наполнения массива List Comprehension, а не традиционный итератор
 с методом .append() мы получаем повышение производительности на 17-20%. 
'''
