"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Попробуйте оптимизировать код, чтобы снизить время выполнения
Проведите повторные замеры

ОБЯЗАТЕЛЬНО! Добавьте аналитику: что вы сделали и какой это принесло эффект
"""

from timeit import timeit


# def func_1(nums):
#     new_arr = []                  O(1)
#     for i in range(len(nums)):    O(n)
#         if nums[i] % 2 == 0:      O(1)
#             new_arr.append(i)     O(1)
#     return new_arr
#
#
# nums = [3, 2, 3, 4, 3, 2, 3, 23, 2, 3]
#
# print(timeit("func_1(nums)", globals=globals()))
# "время выполнения кода 1.4510588, присвоение, итератор, проверка, условие, добавление в новый список "


# def func_1(nums):
#     new_arr = nums[0:len(nums):2]
#     return new_arr
#
# nums = [3, 2, 3, 4, 3, 2, 3, 23, 2, 3]
# func_1(nums)
# print(timeit("func_1(nums)", globals=globals()))
#
# "время выполнения кода 0.30450150000000004, индексация работает по O(1) самый удачный вариант, для такой задачи"

def func_1(nums):
    return [k for k in nums[::2]]

nums = [3, 2, 3, 4, 3, 2, 3, 23, 2, 3]
func_1(nums)
print(timeit("func_1(nums)", globals=globals()))
"время выполнения кода 0.7958405000000001, лист комприхэншинс работает О(n) но быстрее обычного итератора"

