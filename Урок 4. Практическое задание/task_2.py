"""
Задание 2.

Приведен код, который формирует из введенного числа
обратное по порядку входящих в него цифр.
Задача решена через рекурсию
Выполнена попытка оптимизировать решение мемоизацией
Сделаны замеры обеих реализаций.

Сделайте аналитику, нужна ли здесь мемоизация или нет и почему?!!!

П.С. задание не такое простое, как кажется
"""

from timeit import timeit
from random import randint


def recursive_reverse(number):
    if number == 0:
        return str(number % 10)
    return f'{str(number % 10)}{recursive_reverse(number // 10)}'


num_100 = randint(10000, 1000000)
num_1000 = randint(1000000, 10000000)
num_10000 = randint(100000000, 10000000000000)

print('Не оптимизированная функция recursive_reverse', end='')
print(
    timeit(
        "recursive_reverse(num_100)",
        setup='from __main__ import recursive_reverse, num_100',
        number=10000))
print(
    timeit(
        "recursive_reverse(num_1000)",
        setup='from __main__ import recursive_reverse, num_1000',
        number=10000))
print(
    timeit(
        "recursive_reverse(num_10000)",
        setup='from __main__ import recursive_reverse, num_10000',
        number=10000))

count = 0
inner_count = 0
def memoize(f):
    cache = {}
    print(f'срабатывание обертки декоратора кеш на данный момент {cache}')
    global inner_count, count
    count += 1

    def decorate(*args):
        global inner_count
        inner_count += 1
        print(f'срабатывание основного декоратора проход {inner_count} срабатывание обертки {count}')
        
        if args in cache:
            print('возврат из кеша')
            return cache[args]

        else:
            print(f'внесение в кеш {args}')
            cache[args] = f(*args)
            return cache[args]
    return decorate


@memoize
def recursive_reverse_mem(number):
    if number == 0:
        return ''
    return f'{str(number % 10)}{recursive_reverse_mem(number // 10)}'


# print('Оптимизированная функция recursive_reverse_mem', end='')
print(
    timeit(
        'recursive_reverse_mem(num_100)',
        setup='from __main__ import recursive_reverse_mem, num_100',
        number=10))

# print(
#     timeit(
#         'recursive_reverse_mem(num_1000)',
#         setup='from __main__ import recursive_reverse_mem, num_1000',
#         number=10000))
# print(
#     timeit(
#         'recursive_reverse_mem(num_10000)',
#         setup='from __main__ import recursive_reverse_mem, num_10000',
#         number=10000))

'''
срабатывание обертки декоратора кеш на данный момент {}
срабатывание основного декоратора проход 1 срабатывание обертки 1
внесение в кеш (328079,)
срабатывание основного декоратора проход 2 срабатывание обертки 1
внесение в кеш (32807,)
срабатывание основного декоратора проход 3 срабатывание обертки 1
внесение в кеш (3280,)
срабатывание основного декоратора проход 4 срабатывание обертки 1
внесение в кеш (328,)
срабатывание основного декоратора проход 5 срабатывание обертки 1
внесение в кеш (32,)
срабатывание основного декоратора проход 6 срабатывание обертки 1
внесение в кеш (3,)
срабатывание основного декоратора проход 7 срабатывание обертки 1
внесение в кеш (0,)
срабатывание основного декоратора проход 8 срабатывание обертки 1
возврат из кеша
срабатывание основного декоратора проход 9 срабатывание обертки 1
возврат из кеша
срабатывание основного декоратора проход 10 срабатывание обертки 1
возврат из кеша
срабатывание основного декоратора проход 11 срабатывание обертки 1
возврат из кеша
срабатывание основного декоратора проход 12 срабатывание обертки 1
возврат из кеша
срабатывание основного декоратора проход 13 срабатывание обертки 1
возврат из кеша
срабатывание основного декоратора проход 14 срабатывание обертки 1
возврат из кеша
срабатывание основного декоратора проход 15 срабатывание обертки 1
возврат из кеша
срабатывание основного декоратора проход 16 срабатывание обертки 1
возврат из кеша
0.00012965099995199125

Выводы срабатывание основного декоратора 16 раз из них 
7 раз - внесение в кеш чисел первый проход а все остальные проходы были взяты из
кеша 9 штук о чем говорит число - срабатывание обертки равное 1-му кешь у нас одинаковый
для всех последующий кроме первого запусков
'''