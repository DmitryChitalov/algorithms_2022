"""
Задание 3.

Приведен код, формирующий из введенного числа
обратное по порядку входящих в него
цифр и вывести на экран.

Сделайте профилировку каждого алгоритма через timeit

Обязательно предложите еще свой вариант решения!

Сделайте вывод, какая из четырех реализаций эффективнее и почему!
"""
from timeit import timeit


def revers(enter_num, revers_num=0):
    if enter_num == 0:
        return revers_num
    else:
        num = enter_num % 10
        revers_num = (revers_num + num / 10) * 10
        enter_num //= 10
        return revers(enter_num, revers_num)


def revers_2(enter_num, revers_num=0):
    while enter_num != 0:
        num = enter_num % 10
        revers_num = (revers_num + num / 10) * 10
        enter_num //= 10
    return revers_num


def revers_3(enter_num):
    enter_num = str(enter_num)
    revers_num = enter_num[::-1]
    return revers_num


def revers_4(enter_num):  # мой вариант функции
    return ''.join(reversed(str(enter_num)))  # используем функцию reversed для переворота строк,
    # сначала преобразуя число в строку


print(revers(12345))
print(revers_2(12345))
print(revers_3(12345))
print(revers_4(12345))
print(timeit('revers(12345)', globals=globals()))  # 0.9283184999367222
print(timeit('revers_2(12345)', globals=globals()))  # 0.6284979999763891
print(timeit('revers_3(12345)', globals=globals()))  # 0.22402800002600998
print(timeit('revers_4(12345)', globals=globals()))  # 0.418050599982962

'''
Выводы: первая функция использует рекурсию, т.е. обращается сама к себе пока не получит перевернутое число, и имеет 
О(n**2)-сложность. 
Вторая функция использует цикл while, O(n)-сложность.
Третья функция преобразует число в строку, потом делается срез с конца, по сути реверс только через срез.
Моя четвертая функция, использует встроенную функцию reversed, и метод join для получения строки.
Как показывают замеры, первая функция (рекурсия) как и ожидалось имеет самое долгое время исполнения. Вторая функция
работает быстрее рекурсии, что также ожидаемо, но дольше третьего и четвертого варианта. Третий вариант оказался
самым быстрым, на мой взгляд, так как при исполнении функции не используется циклы и рекурсии, по сути происходит только
одна операция (срез). Моя функция заняла почетное второе место, уступив номеру 3, тк в ней применены сразу
два встроенных метода - reversed и join, что однако все же оказывается быстрее цикла и тем более рекурсии.
'''
