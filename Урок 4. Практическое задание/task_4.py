"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Обязательно напишите третью версию (здесь возможно даже решение одной строкой).
Сделайте замеры и опишите, получилось ли у вас ускорить задачу
"""
from timeit import timeit


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    elem = max(array, key=array.count)
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {array.count(elem)} раз(а)'


if __name__ == '__main__':
    array = [1, 3, 1, 3, 4, 5, 1]
    print(func_1())
    print(func_2())
    print(func_3())
    print('')
    print('func_1', timeit('func_1()', globals=globals(), number=10000))
    print('func_2', timeit('func_2()', globals=globals(), number=10000))
    print('func_3', timeit('func_3()', globals=globals(), number=10000))

    """
    Результаты замеров:
    func_1 0.018011200008913875
    func_2 0.025077999976929277
    func_3 0.016939499997533858
    
    Самый долгий результат получился во втором варианте.
    Так как в нем несколько раз используется сложность алгоритма O(n)
    в начале через цикл формируется новый массим из частот, потом
    находится максимальная частота в этом массиве, которая тоже имеет сложность O(n)
    и только потом через индекс максимального элемента определяется сам элемент
    
    Третий вариант, ускорил решение задачи и полчился самым быстрым,
    так как использовался оператор max из встроенной библиотеки и
    в нем сразу определяется максимум из заданного массива.
    """
