"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Обязательно напишите третью версию (здесь возможно даже решение одной строкой).
Сделайте замеры и опишите, получилось ли у вас ускорить задачу
"""

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


print(func_1())
print(func_2())


def func_3():
    new_number = max(array, key=array.count)
    return f'Чаще всего встречается число {new_number}, ' \
           f'оно появилось в массиве {array.count(new_number)} раз(а)'


print(func_3())

print(f'Выполнение func_1() заняло: ', timeit("func_1()", globals=globals(), number=10000))
print(f'Выполнение func_2() заняло: ', timeit("func_2()", globals=globals(), number=10000))
print(f'Выполнение func_3() заняло: ', timeit("func_3()", globals=globals(), number=10000))


"""
Чаще всего встречается число 1, оно появилось в массиве 3 раз(а)
Чаще всего встречается число 1, оно появилось в массиве 3 раз(а)
Чаще всего встречается число 1, оно появилось в массиве 3 раз(а)


Выполнение func_1() заняло:  0.03640325
Выполнение func_2() заняло:  0.04991617699999999
Выполнение func_3() заняло:  0.027189032000000002

Самой долгой по выполнению оказалась func_2(), так как в процессе анализа первоначального массива подсчитывается 
количества включиений каждого элемента, и на основе этого заполняется новый массив, который далее снова анализируется
для определения наиболее часто встречаемого числа.

func_3() оказалась самой эффективной по времени выполнения, так как использует встроенную функцию max().
"""