"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Обязательно напишите третью версию (здесь возможно даже решение одной строкой).
Сделайте замеры и опишите, получилось ли у вас ускорить задачу
"""
from collections import Counter
from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'1 Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'2 Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    my_tuple = Counter(array).most_common(1)[0]
    elem = my_tuple[0]
    max_3 = my_tuple[1]
    return f'3 Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_3} раз(а)'


print(func_1())
print(timeit("func_1()", globals=globals()))
#  Это самый быстрый способ определения числа, которое встречается в массиве чаще всего.
# Элементы перебираются в цикле, если элемент встречается больше раз, чем ранее определенное,
# то за максимально встречающееся значение elem принимается этот элемент,
# а подсчитанное число его вхождений в массив принимается за max.
print(func_2())
print(timeit("func_2()", globals=globals()))
# Этот способ медленее первого.
#  Создается второй список,
# Элементы второго указывают на число повторений элементов первого списка, стоящих на тех же местах.
# Выбирают максимальный элемент из второго списка.
# Определяется индекс первого входдения максимального элемента из второго списка - max.
# По данному индексу определяется значение элемента,
# встречающееся чаще всего, т.к. индексы совпадают.
print(func_3())
print(timeit("func_3()", globals=globals()))
# Это самый медленный способ. Код оптимизировался, ускорить задачу не получилось.
# В collections есть класс Counter для подсчета неизменяемых объектов.
# Метод most_common возвращает список из кортежей [(элемент, число вхождений), ]
# которы начинается с наиболее распространенных до наименее распространенных.
# Задаем, что нужен 1 элемент в списке. Выбираем первый элемент с индексом 0.
# Из него получаем самый распространенный элемент и число его вхождений в массив.
