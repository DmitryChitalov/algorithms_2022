"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Обязательно напишите третью версию (здесь возможно даже решение одной строкой).
Сделайте замеры и опишите, получилось ли у вас ускорить задачу
"""

from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    elem = max(array, key=lambda x: array.count(x))
    count = array.count(elem)
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {count} раз(а)'


print(func_1())
print(f'Время выполнения func_1', timeit('func_1()', globals=globals(), number=100000), '\n')

print(func_2())
print(f'Время выполнения func_2', timeit('func_2()', globals=globals(), number=100000), '\n')

print(func_3())
print(f'Время выполнения func_3', timeit('func_3()', globals=globals(), number=100000))

"""
Задачу ускорить не получилось, работает медленнее всех func_3, но это из за того что для вывода количества раз
ещё раз вызываю метод count, если сделать только count для количества то работает наравне с func_2,
самая эффективная func_1 за счёт того что один раз использует метод count в коде

Чаще всего встречается число 1, оно появилось в массиве 3 раз(а)
Время выполнения func_1 0.14009459999215323 

Чаще всего встречается число 1, оно появилось в массиве 3 раз(а)
Время выполнения func_2 0.17191900000034366 

Чаще всего встречается число 1, оно появилось в массиве 3 раз(а)
Время выполнения func_3 0.2090061000053538
"""