"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Обязательно напишите третью версию (здесь возможно даже решение одной строкой).
Сделайте замеры и опишите, получилось ли у вас ускорить задачу
"""

from timeit import timeit


array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    val = max(array, key=lambda x: array.count(x))
    return f'Чаще всего встречается число {val}, ' \
           f'оно появилось в массиве {array.count(val)} раз(а)'


print(func_1())
print(func_2())
print(func_3())

print(timeit('func_1', globals=globals(), number=1000000))
print(timeit('func_2', globals=globals(), number=1000000))
print(timeit('func_3', globals=globals(), number=1000000))


"""
АНАЛИТИКА
Особых различий по времени работы всех трёх функций не отмечено. 
Больше сказывается нагрузка в данный момент системы, где они выполняются (при многократных запусках
то один, то другой выполняется быстрей).


1:
0.05425790000000001
0.0562994
0.0644593

2:
0.02402090000000001
0.034298700000000015
0.0489367

3:
0.058956900000000007
0.048696799999999985
0.057113

4:
0.04617159999999999
0.04346419999999998
0.0495922
"""
