"""
Задание 5.**

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето Эратосфена" (в материалах есть его описание)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
"""


def simple(i):
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


i = int(input('Введите порядковый номер искомого простого числа: '))
print(simple(i))



# Решето Эратосфена
def resheto(i):
    my_list = [x for x in range(2, i * 10)]
    p = 2
    while p < i:
        my_list = list(filter(lambda x: x % p != 0 or x == p, my_list))
        p = list(filter(lambda x: x > p, my_list))[0]

    return my_list[i - 1]

print(timeit(stmt='simple(i)', globals=globals(), number=1000))
print(timeit(stmt='resheto(i)', globals=globals(), number=1000))

"""
#10
29
0.015461799979675561
29
0.015461799979675561
0.02969300001859665

#100
541
1.6837032999901567
541
1.6837032999901567
0.7503155999875162

#1000
7919
283.62187320002704
7919
30.52199969999492

Решето Эратосфена - чем больше вводимое число тем скорость по 
сравнению с первым вариантом быстрее, увеличивается "почти пропорционально" в двараза по отношению к "квадрату вводимого числа", а при
тысячном числе прирост в скорости в 10-ки раз
"""

