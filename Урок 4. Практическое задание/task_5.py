"""
Задание 5.**

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето Эратосфена" (в материалах есть его описание)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
"""

from timeit import timeit

def simple(i):
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


i = int(input('Введите порядковый номер искомого простого числа: '))
print(simple(i))


print(f'простое число с порядковым номером "10" == {simple(10)}, время нахождения числа == '
      f'{timeit("simple(10)", globals=globals(), number=100)}')

print(f'простое число с порядковым номером "100" == {simple(100)}, время нахождения числа == '
      f'{timeit("simple(100)", globals=globals(), number=100)}')

print(f'простое число с порядковым номером "1000" == {simple(1000)}, время нахождения числа == '
      f'{timeit("simple(1000)", globals=globals(), number=100)}')
# простое число с порядковым номером "10" == 29, время нахождения числа == 0.0017545999999999395
# простое число с порядковым номером "100" == 541, время нахождения числа == 0.14133180000000012
# простое число с порядковым номером "1000" == 7919, время нахождения числа == 24.7249326

def sieve_of_eratosthenes(num):
    sieve = list(range(100000))
    sieve[1] = 0
    for i in sieve:
        if i > 1:
            for j in range(i + i, len(sieve), i):
                sieve[j] = 0
    sieve_ = [x for x in sieve if x != 0]
    return sieve_[num-1]


print(f'простое число с порядковым номером "10" == {sieve_of_eratosthenes(10)}, время нахождения числа == '
      f'{timeit("sieve_of_eratosthenes(10)", globals=globals(), number=100)}')

print(f'простое число с порядковым номером "100" == {sieve_of_eratosthenes(100)}, время нахождения числа == '
      f'{timeit("sieve_of_eratosthenes(100)", globals=globals(), number=100)}')

print(f'простое число с порядковым номером "1000" == {sieve_of_eratosthenes(1000)}, время нахождения числа == '
      f'{timeit("sieve_of_eratosthenes(1000)", globals=globals(), number=100)}')
# простое число с порядковым номером "10" == 29, время нахождения числа == 1.9212732000000017
# простое число с порядковым номером "100" == 541, время нахождения числа == 1.8805705999999986
# простое число с порядковым номером "1000" == 7919, время нахождения числа == 1.9187014999999974

""" Первый алгоритм эффективен при использовании с порядковым номером чисел до 100.
  Эффективность "Решета Эратосфена" возрастает с порядковым номером простых чисел."""
