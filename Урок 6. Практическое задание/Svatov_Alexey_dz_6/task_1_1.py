"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""

# Урок 4. task_1.

from memory_profiler import profile


@profile
def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


@profile
def func_2(nums):
    return [i for i in range(len(nums)) if nums[i] % 2 == 0]


@profile
def func_2_v2(nums):
    return (i for i in range(len(nums)) if nums[i] % 2 == 0)


@profile
def func_2_v3(nums):
    return filter(lambda num: num % 2 == 0, nums)


nums_old = [i for i in range(1000000)]

func_1(nums_old)
func_2(nums_old)
func_2_v2(nums_old)
func_2_v3(nums_old)

"""
В func_2_v2 вместо lc использован генератор, который оптимальнее, чем lc.
В func_2_v3 использована функция filter, которая также показывает лучший результат (по памяти), чем иные варианты.
"""
