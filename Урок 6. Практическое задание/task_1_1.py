"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
from memory_profiler import memory_usage


# Первый скрипт. Курс основы. Урок 5. Задание 5.
# Представлен список чисел. Определить элементы списка, не имеющие повторений.

def mem_usage(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f"Выполнение функции заняло {mem_diff} Mib")
        return res

    return wrapper


src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]


# Исходный вариант
@mem_usage
def uniq_l(list_):
    return [i for i in src if list_.count(i) == 1]


print(uniq_l(src))


# Оптимизированный
@mem_usage
def uniq_l(list_):
    return (i for i in src if list_.count(i) == 1)


print(uniq_l(src))

'''
Исходный код: 0.0078125 Mib
Оптимизированный: 0.0 Mib
Небольшой прирост в памяти, получился благодаря замене list comprehensions (что дает массив)
на генератор.
'''
