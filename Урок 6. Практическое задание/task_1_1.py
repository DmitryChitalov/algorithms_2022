"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""

"""Обычный класс и класс со слотами"""

"""
Функция sys.getsizeof возвращает размер переданного ей обьекта, 
этот размер не включает в себя сложные структуры классов и т.д.

Функция pympler.asizeof - рекурсивно ищет все вложенные 
поля и элементы, и отображает общий размер обьекта
"""

from pympler import asizeof


# Task 9_2.
# Реализовать класс Road (дорога).
# Техническое задание:
#
# определить атрибуты: length (длина), width (ширина). Подумайте атрибуты чего?
# значения атрибутов должны передаваться при создании экземпляра класса
# атрибуты сделать защищёнными
# определить метод расчёта массы асфальта, необходимого для покрытия всей дороги
# метод возвращает массу асфальта в виде строки в требуемом формате (см примеры/тесты)
# формула 'длина * ширина * масса асфальта для покрытия одного кв. метра дороги асфальтом, ' \
#         'толщиной в 1 см * число см толщины полотна';
# проверить работу метода и вывести массу асфальта для 2-3 наборов параметров.

class Road:

    def __init__(self, length, width):
        self._length = length
        self._width = width

    def calc_mass(self):
        mass = f'{int(self._length * self._width * 25 * 5 / 1000)} т'
        return mass


BC_OBJ = Road(20, 5000)
print(asizeof.asizeof((BC_OBJ)))  # -> 328


class Road:
    __slots__ = ['_length', '_width']

    def __init__(self, length, width):
        self._length = length
        self._width = width

    def calc_mass(self):
        mass = f'{int(self._length * self._width * 25 * 5 / 1000)} т'
        return mass


BC_OBJ = Road(20, 5000)
print(asizeof.asizeof(BC_OBJ))  # -> 112

# В этой задаче используется оптимизацию с помощью конструкции __slots__ (Способ 2. Слоты в ООП), это позволило
# уменьшить память, потребляемую экземплярами класса
