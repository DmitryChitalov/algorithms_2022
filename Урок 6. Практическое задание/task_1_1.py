"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""

from pympler import asizeof

# ДЗ 9, Задание 2 из Основ. Реализовать класс Дорога и посчитать массу асфальта по длине и ширине дороги.
# Без оптимизации:

class Road:
    def __init__(self, _length, _width):
        self._length = _length
        self._width = _width

    def mass(self):
        self.weight = 25
        self.thickness = 5
        print(f"{self._length * self._width * self.weight * self.thickness / 1000} тонн")


example = Road(20, 5000)
example.mass()
print(asizeof.asizeof(example))

# С оптимизацией:

class Road:
    __slots__ = ['_length', '_width', 'weight', 'thickness']
    def __init__(self, _length, _width):
        self._length = _length
        self._width = _width

    def mass(self):
        self.weight = 25
        self.thickness = 5
        print(f"{self._length * self._width * self.weight * self.thickness / 1000} тонн")


example = Road(20, 5000)
example.mass()
print(asizeof.asizeof(example))

# До оптимизации: 512, после оптимизации: 192.
# Что изменил: Использовал конструкцию slots в классе, а значит атрибуты хранились не в динамическом словаре,
# а в списке, который занимает меньше памяти, т.к. не хэш-таблица
