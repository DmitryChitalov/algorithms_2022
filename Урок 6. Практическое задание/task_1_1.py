"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
###########################################################################
"""
Задание 4.	Из курса Алгоритмы и структуры данных Python.
Найти сумму n элементов следующего ряда чисел:
1 -0.5 0.25 -0.125 ...
Количество элементов (n) вводится с клавиатуры.

Пример:
Введите количество элементов: 3
Количество элементов - 3, их сумма - 0.75

Решите через рекурсию. Решение через цикл не принимается.
Нужно обойтисть без создания массива!
"""
# решение исходное:
from memory_profiler import profile


@profile
def get_sum(nums, st_num=1, res=0):
    while nums == 0:
        return res
    else:
        return get_sum(nums - 1, res=res + st_num, st_num=st_num / -2)


# решение оптимизированное:
@profile
def get_sum_cycle(nums, st_num=1, res=0):
    while nums > 0:
        nums -= 1
        res += st_num
        st_num /= -2
    else:
        return res


if __name__ == '__main__':
    n = int(input('Введите количество элементов: '))

    print(f'Количество элементов - {n}, их сумма = {get_sum(n)}')
    print(f'Количество элементов - {n}, их сумма = {get_sum_cycle(n)}')

"""
Аналитика:
Использовал цикл вместо рекурсии.
В результате сократилось время выполнения решения, а также нужно меньше памяти.
Так как рекурсия использует стек, для хранения вызовов.
"""
