"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""

from memory_profiler import memory_usage

# lesson 4 task 1

def func_4(nums):
    new_arr = []
    l = len(nums) - 1
    while l:
        if not nums[l] % 2:
            new_arr.append(l)
        l = l - 1
    return new_arr


m1 = memory_usage()
my_big_list = list(range(1, 100000))
newlist = func_4(my_big_list)
m2 = memory_usage()
mem_usage = m2[0] - m1[0]
print(f"Выполнение заняло {mem_usage} Mib")

# Оптимизируем с помощью генератора.


def func_4_gen(nums_gen):
    new_arr = []
    idx = 0
    for i in nums_gen:
        if i % 2:
            new_arr.append(idx)
        idx += 1
    return new_arr


m3 = memory_usage()
my_big_gen = (i for i in range(1, 100000))

newlist2 = func_4_gen(my_big_gen)
m4 = memory_usage()
mem_usage = m4[0] - m3[0]
print(f"Выполнение заняло {mem_usage} Mib")

"""
Вывод. Использован генератор вместо списка, использование памяти существенно сокращено.
До оптимизации:
Выполнение заняло 6.06640625 Mib
После оптимизации:
Выполнение заняло 2.171875 Mib
"""