"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
from memory_profiler import profile
import random
import string

'''
Для первой задачи за основу взят код из 3 задания 3 урока Основ питона. В данном варианте буду применять удаление
словаря, чтобы посмотреть результаты задействованной памяти. Так как стандартный код из домашнего задания не дал
нужных результатов по нагрузке памяти, пришлось немного модифицировать скрипт, добавив соответствующую функцию для
наполнения словаря большим количеством случайных слов. Использование del привело к -0.4 MiB, при наполнение словаря
0.8 - 0.9 MiB.
'''


# Основы - 3.3. Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую
# словарь, в котором ключи — первые буквы имён, а значения — списки, содержащие имена, начинающиеся с соответствующей

def generate_str(numb):  # это "генератор" строк для загрузки инкремента словаря
    count = 0
    result = []
    while count != numb:
        count += 1
        result.append(''.join(random.choice(string.ascii_uppercase) for _ in range(10)))
    return result


@profile
def thesaurus(*args):
    names = {}  # создаем пустой словарь
    args = ' '.join(generate_str(5000))  # для загрузки инкремента использую функцию
    for item in args:
        key = item[0]  # ключ в словаре будет первой буквой имени
        if key not in names:  # если в словаре нет ключа, то добавляем его и список для имен
            names[key] = []
        names[key].append(item)
    return f'Обычный словарь наполнен'


@profile
def thesaurus_1(*args):  # вариант с del словаря
    names = {}  # создаем пустой словарь
    args = ' '.join(generate_str(5000))
    for item in args:
        key = item[0]  # ключ в словаре будет первой буквой имени
        if key not in names:  # если в словаре нет ключа, то добавляем его и список для имен
            names[key] = []
        names[key].append(item)
    del names
    return f'Улучшенный словарь наполнен'


print(thesaurus("Ivan", "Petya", "Iliya", "Amelia", "Alex"))

print(thesaurus_1("Ivan", "Petya", "Iliya", "Amelia", "Alex"))
