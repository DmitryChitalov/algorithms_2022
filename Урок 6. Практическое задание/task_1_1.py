"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""

from memory_profiler import profile

# Задание 2 из урока 1 python basics.
# Для кубов нечётных чисел от 1 до 1000.
# Вычислить сумму чисел, сумма цифр кубов
# которых делится нацело на 7.


@profile
def task_1_02():
    number = 1
    number_sum = 0
    while number <= 1000:
        digit = number**3
        numeric_sum = 0
        while digit > 0:
            numeric = digit % 10
            numeric_sum += numeric
            digit = digit // 10
        if numeric_sum % 7 == 0:
            number_sum += number
        print(number, '^3 =', number**3, [numeric_sum], 'накоп. сумма:', number_sum)
        number += 2


@profile
def mody_task_1_02():  # Использовал f строки
        number = 1
        number_sum = 0
        while number <= 1000:
            digit = number ** 3
            numeric_sum = 0
            while digit > 0:
                numeric = digit % 10
                numeric_sum += numeric
                digit = digit // 10
            if numeric_sum % 7 == 0:
                number_sum += number
            print(f'{number} ^3 = {number**3} [{numeric_sum}] накоп. сумма: {number_sum}')
            number += 2


if __name__ == '__main__':
    task_1_02()
    mody_task_1_02()

