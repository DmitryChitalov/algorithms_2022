"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
from hashlib import sha256

from memory_profiler import memory_usage


def memory(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f"Выполнение заняло {mem_diff} Mib")
        return res

    return wrapper


@memory
def uniq_hashes(in_str):
    uniq_hash = set(sha256(in_str[i:j + 1].encode()).hexdigest()
                    for i in range(len(in_str)) for j in range(i + 1, (len(in_str) + 1)))
    return uniq_hash


@memory
def uniq_hashes2(in_str):
    yield set(sha256(in_str[i:j + 1].encode()).hexdigest()
              for i in range(len(in_str)) for j in range(i + 1, (len(in_str) + 1)))


a = input("Введите строку строчными латинскими буквами: ")
print(f'Количество подстрок: {len(uniq_hashes(a))}')
print(f'Количество подстрок: {len(list(uniq_hashes2(a))[0])}')

"""
оптимизация позволила улучшить показатели по памяти в ~ 1000 раз 
"""