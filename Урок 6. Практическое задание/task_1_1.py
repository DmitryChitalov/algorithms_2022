"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
# курс алгоритмы урок 4 задание 1
# Приведен код, который позволяет сохранить в
# массиве индексы четных элементов другого массива

from memory_profiler import memory_usage
from random import randint
from numpy import array, append


def memory_counter(func):
    def wrapper(*args):
        start = memory_usage()[0]
        result = func(*args)
        end = memory_usage()[0]
        memory_used = end - start
        print('Использовано памяти:', memory_used)
        return result
    return wrapper


@memory_counter
def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


@memory_counter
def func_numpy(nums):
    new_arr_2 = array([])
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            append(new_arr_2, i)
    return new_arr_2


if __name__ == '__main__':
    num_array = [randint(0, 500) for i in range(100000)]

    func_1(num_array)
    func_numpy(num_array)

# Использовано памяти: 1.56640625
# Использовано памяти: 0.0078125
# в функции заменён список на array из модуля numpy, что значительно сократило потребление памяти
