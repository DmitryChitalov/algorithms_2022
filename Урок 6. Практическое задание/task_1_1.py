"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""

from memory_profiler import memory_usage

"""Задание 1_3 курс Алгоритмы"""


def deco(func):
    def wrapper(*args):
        start = memory_usage()
        res = func(args[0])
        stop = memory_usage()
        mem_diff = stop[0] - start[0]
        return res, mem_diff

    return wrapper


@deco
def best_of_1(data_in):
    data = data_in.copy()
    best_of = []
    for i in range(3):
        best_of.append(max(data, key=data.get))
        data.pop(best_of[i])
    return best_of


@deco
def best_of_2(data_in):
    data = data_in.copy()
    best_of = []
    for i in range(3):
        best_of.append(max(data, key=data.get))
        yield data.pop(best_of[i])


if __name__ == '__main__':
    storage = {i: i ** 2 for i in range(10000)}

    res_func, mem_func = best_of_1(storage)
    print(f'Использовано памяти: {mem_func}')

    res_gen, mem_gen = best_of_2(storage)
    print(f'Использовано памяти: {mem_gen}')

    """
    Для оптимизации применено постороение функции как 
    генератора. В результате занимаемое пространство памяти 
    сократилось с 0,03125 до 0,0 Mib - практически не занимает 
    места
    """
