"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""

"""Основы Python. HW2. Task5:"""
from random import uniform
from numpy import array
import numpy as np
from memory_profiler import profile

my_list = [round(uniform(10, 100), 2) for _ in range(30000)]  # автоматическая генерация случайных 30000 чисел


@profile
def transfer_list_in_str(list_in: list) -> list:
    """Функция принимает в себя список чисел, преобразует каждое число в заданный формат строк
    и возвращает список строк """
    str_out = []
    for i in list_in:
        rubles, penny = str(i).split('.')
        if len(penny) < 2:
            penny = '0' + penny
        str_out.append(f'{rubles} руб {penny} коп')
    return str_out


# print(f'Исходный список: {my_list}')
"""Профилированный код"""


@profile
def transfer_list_in_str_2(list_in: list):
    """Функция принимает в себя список чисел, преобразует каждое число в заданный формат строк
        и возвращает ndarray строк """
    str_out = array([])
    for i in list_in:
        rubles, penny = str(i).split('.')
        if len(penny) < 2:
            penny = '0' + penny
        np.append(str_out, f'{rubles} руб {penny} коп')
    return str_out


# result_1 = transfer_list_in_str(my_list)
result_2 = transfer_list_in_str_2(my_list)


"""ОТВЕТ: Использование функции с обычным списком увеличило Mem usage на 3.5 MiB 
в результате выполнения append
Использование функции с ndarray не привело к увеличению Mem usage
"""