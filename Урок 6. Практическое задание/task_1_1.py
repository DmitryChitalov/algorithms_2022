"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
# дз 1, задача 2, основы python
from memory_profiler import profile


@profile
def my_list():
    total_list = []
    sum_list = 0

    for i in range(0, 5000):
        if i % 2 != 0:
            total_list.append(i ** 3)

    for el in total_list:
        sum_els = 0
        cycle_el = el
        while cycle_el / 10 > 0:
            sum_els += cycle_el % 10
            cycle_el = cycle_el // 10
        if sum_els % 7 == 0:
            sum_list += el

    print(sum_list)

# оптимизирована
@profile
def my_list_optim_tuple():
    sum_list = 0
    total_list = tuple(i ** 3 for i in range(0, 5000) if i % 2 != 0)

    for el in total_list:
        sum_els = 0
        cycle_el = el
        while cycle_el / 10 > 0:
            sum_els += cycle_el % 10
            cycle_el = cycle_el // 10
        if sum_els % 7 == 0:
            sum_list += el

    print(sum_list)

my_list()
my_list_optim_tuple()

#  после оптимизации экономия памяти составила 0.1 MiB. Замена списка на кортеж.