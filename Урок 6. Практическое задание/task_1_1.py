"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
###########################################################################
"""Профилирование времени и памяти"""

from memory_profiler import memory_usage
# from recordclass import recordclass


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff

    return wrapper


@decor
def check_max_profit_1(dct_obj):
    # Функция должна обеспечивать поиск трех компаний с наибольшей годовой прибылью.

    sorted_dict = {}
    for i in sorted(dct_obj.values(), reverse=True)[:3]:
        for k in dct_obj:
            if dct_obj[k] == i:
                sorted_dict[k] = dct_obj[k]
    return sorted_dict


@decor
def check_max_profit_up(dct_obj):
    # Функция должна обеспечивать поиск трех компаний с наибольшей годовой прибылью.

    sorted_dict = {}
    for i in sorted(dct_obj.values(), reverse=True)[:3]:
        for k in dct_obj:
            if dct_obj[k] == i:
                sorted_dict[k] = dct_obj[k]
    return sorted_dict


if __name__ == '__main__':
    profit_dict = {x: x for x in range(1000000)}

    res, mem_diff = check_max_profit_1(profit_dict)
    print(f"Выполнение заняло {mem_diff} Mib")
    del profit_dict

