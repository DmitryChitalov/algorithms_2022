"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
"До потимитизации"

from memory_profiler import profile, memory_usage
from sys import getsizeof


def decor_memory(func):
    def wrapper():
        memory_1 = memory_usage()
        res = func()
        memory_2 = memory_usage()
        all_memory = memory_1[0] - memory_2[0]
        return res, print(all_memory)

    return wrapper


x = ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй', 'директор аэлита']


@profile
def strings():
    for k in x:
        z = (k[:k.find(" "):-1])
        m = (z[z.find(" ")::-1])
        m = m.strip()
        print(f"Привет, {m.title()}!")


strings()
print(getsizeof(strings))  # 136/ -0.01171875

"""Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    53     18.2 MiB     18.2 MiB           1   @profile
    54                                         def strings():
    55     18.2 MiB      0.0 MiB           5       for k in x:
    56     18.2 MiB      0.0 MiB           4           z = (k[:k.find(" "):-1])
    57     18.2 MiB      0.0 MiB           4           m = (z[z.find(" ")::-1])
    58     18.2 MiB      0.0 MiB           4           m = m.strip()
    59     18.2 MiB      0.0 MiB           4           print(f"Привет, {m.title()}!")"""


"После оптимизации Применены: comprehension, f'', встроенные функции"


@profile
def opt_strings():
    print(*[f'Привет, {x.split(" ")[-1].capitalize()}!\n' for x in x], sep='')


opt_strings()
print(getsizeof(opt_strings()))  # 56/ -0.00390625

""""Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    68     18.2 MiB     18.2 MiB           1   @profile
    69                                         def opt_strings():
    70     18.2 MiB      0.0 MiB           7       print(*[f'Привет, {x.split(" ")[-1].capitalize()}!\n' for x in x], sep='')"""