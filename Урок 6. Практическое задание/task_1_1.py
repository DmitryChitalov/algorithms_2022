"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""

from collections import namedtuple
from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff
    return wrapper

# Курс Основ
# Написать функцию num_translate, переводящую числительные от 0 до 10 c английского на русский язык.


@decor
def num_translate(key):
    trans = {'one': 'один', 'two': 'два', 'three': 'три', 'four': 'черыре',
         'five': 'пять', 'six': 'шесть', 'seven': 'семь', 'eight': 'восемь',
         'nine': 'девять', 'ten': 'десять'}
    return trans.get(key)


print(num_translate('one'))

# Оптимизированный вариант


@decor
def num_translate1(word):
    trans_type = namedtuple('trans', ('one', 'two', 'three', 'four',
                             'five', 'six', 'seven', 'eight', 'nine', 'ten'))
    trans = trans_type(one='один', two='два', three='три', four='черыре',
                       five='пять', six='шесть', seven='семь', eight='восемь', nine='девять', ten='десять')

    return getattr(trans, word)


print(num_translate1('two'))

# В место словаря был использован именуемый кортеж, т.к. хэш таблицы словаря тоже занимают память.
# в результате память оптимизировалась