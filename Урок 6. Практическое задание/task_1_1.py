"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""

"""
Урок 2 
Задание 3.	Сформировать из введенного числа
обратное по порядку входящих в него
цифр и вывести на экран. 
"""
from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return mem_diff

    return wrapper


numbers_list = []


@decor
def reversed_number(number):
    rev_num = ''.join(numbers_list)
    if number == 0:
        return rev_num
    else:
        new_number = str(number % 10)
        numbers_list.append(new_number)
        return reversed_number(number // 10)


@decor
def reverse_number_2(number):
    number = str(number)
    return number.split().reverse()


my_number = 123859423651489621233194648783928465473829284645592927
print(reversed_number(my_number))
print(reverse_number_2(my_number))

"""
0.08203125
0.0
Для оптимизации использования памяти рекурсия была заменена на встроенную операцию
и как видно из замеров, это существенно снизило использование оперативной памяти. 
"""
