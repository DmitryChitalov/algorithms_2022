"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""

"""Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

# Версия с рекурсией

from memory_profiler import profile


@profile
def oddeve(num, odd=0, eve=0):
    if num == 0:
        return print(f'Количество четных и нечетных цифр в числе равно: {odd}, {eve}')
    else:
        if num % 10 % 2 == 0:
            odd += 1
        else:
            eve += 1
    return oddeve(num//10, odd, eve)


oddeve(123456789)


"""Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    13     18.3 MiB     18.3 MiB           1   @profile
    14                                         def oddeve(num, odd=0, eve=0):
    15     18.3 MiB      0.0 MiB          10       while num != 0:
    16     18.3 MiB      0.0 MiB           9           if num % 10 % 2 == 0:
    17     18.3 MiB      0.0 MiB           4               odd += 1
    18                                                 else:
    19     18.3 MiB      0.0 MiB           5               eve += 1
    20     18.3 MiB      0.0 MiB           9           num = num // 10
    21     18.3 MiB      0.0 MiB           1       return print(f'Количество четных и нечетных цифр в числе равно: {odd}, {eve}')"""


# Оптимизированная версия
from memory_profiler import profile


@profile
def oddeve(num, odd=0, eve=0):
    while num != 0:
        if num % 10 % 2 == 0:
            odd += 1
        else:
            eve += 1
        num = num // 10
    return print(f'Количество четных и нечетных цифр в числе равно: {odd}, {eve}')


oddeve(123456789)

"""Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    13     18.4 MiB     18.4 MiB           1   @profile
    14                                         def oddeve(num, odd=0, eve=0):
    15     18.4 MiB      0.0 MiB          10       while num != 0:
    16     18.4 MiB      0.0 MiB           9           if num % 10 % 2 == 0:
    17     18.4 MiB      0.0 MiB           4               odd += 1
    18                                                 else:
    19     18.4 MiB      0.0 MiB           5               eve += 1
    20     18.4 MiB      0.0 MiB           9           num = num // 10
    21     18.4 MiB      0.0 MiB           1       return print(f'Количество четных и нечетных цифр в числе равно: {odd}, {eve}')"""
