"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""
# Сгенерировать 100000 пользователей: имя, возраст, идентификационный номер
# Подсчитать средний возраст у пользователей id от 10500 до 10800

# ============= Итоги ==============
# В первом случае решение было на основе обыкновенного словаря и объектов 
# класса пользователей, потребление оперативной памяти 23.2500 MiB
# Во втором случае использовался модуль shelve как база данных, откуда 
# данные подгружались частями.
# Потребление оперативной памяти при этом чуть больше 1.0 MiB
# Однако есть потеря в скорости доступа на диске, поэтому данные групировались 
# по 1000 пользователей на ключ 


from memory_profiler import profile
import shelve
import random


def get_first_name():
    list_of_first_names = ['Аарон', 'Абрам', 'Аваз', 'Августин', 'Авраам', 'Агап', 'Агапит', 'Агат', 'Агафон', 'Адам', 'Адриан', 'Азамат', 'Азат', 'Азиз', 'Аид', 'Айдар', 'Айрат', 'Акакий', 'Аким', 'Алан', 'Александр', 'Алексей', 'Али', 'Алик', 'Алим', 'Алихан', 'Алишер', 'Алмаз', 'Альберт', 'Амир', 'Амирам', 'Амиран', 'Анар', 'Анастасий', 'Анатолий', 'Анвар', 'Ангел', 'Андрей', 'Анзор', 'Антон', 'Анфим', 'Арам', 'Аристарх', 'Аркадий', 'Арман', 'Армен', 'Арсен', 'Арсений', 'Арслан', 'Артём', 'Артемий', 'Артур', 'Архип', 'Аскар', 'Аслан', 'Асхан', 'Асхат', 'Ахмет', 'Ашот', 'Бахрам', 'Бенджамин', 'Блез', 'Богдан', 'Борис', 'Борислав', 'Бронислав', 'Булат', 'Вадим', 'Валентин', 'Валерий', 'Вальдемар', 'Вардан', 'Василий', 'Вениамин', 'Виктор', 'Вильгельм', 'Вит', 'Виталий', 'Влад', 'Владимир', 'Владислав', 'Владлен', 'Влас', 'Всеволод', 'Вячеслав', 'Гавриил', 'Гамлет', 'Гарри', 'Геннадий', 'Генри', 'Генрих', 'Георгий', 'Герасим', 'Герман', 'Германн', 'Глеб', 'Гордей', 'Григорий', 'Густав', 'Давид', 'Давлат', 'Даврон', 'Дамир', 'Дана', 'Даниил', 'Данил', 'Данис', 'Данислав', 'Даниэль', 'Данияр', 'Дарий', 'Даурен', 'Даян', 'Демид', 'Демьян', 'Денис', 'Джамал', 'Джан', 'Джеймс', 'Джереми (Иеремия)', 'Джозеф', 'Джонатан', 'Дик', 'Дин', 'Динар', 'Дино', 'Дмитрий', 'Добрыня', 'Доминик', 'Евгений', 'Евдоким', 'Евсей', 'Евстахий', 'Егор', 'Елисей', 'Емельян', 'Еремей', 'Ефим', 'Ефрем', 'Ждан', 'Жерар', 'Жигер', 'Закир', 'Заур', 'Захар', 'Зенон', 'Зигмунд', 'Зиновий', 'Зураб', 'Зуфар', 'Ибрагим', 'Иван', 'Игнат', 'Игнатий', 'Игорь', 'Иероним', 'Иисус', 'Ильгиз', 'Ильнур', 'Ильшат', 'Илья', 'Ильяс', 'Имран', 'Иннокентий', 'Ираклий', 'Исаак', 'Исаакий', 'Исидор', 'Искандер', 'Ислам', 'Исмаил', 'Итан', 'Казбек', 'Камиль', 'Карен', 'Карим', 'Карл', 'Ким', 'Кир', 'Кирилл', 'Клаус', 'Клим', 'Конрад', 'Константин', 'Коре', 'Корнелий', 'Кристиан', 'Кристофер', 'Кузьма', 'Лаврентий', 'Ладо', 'Лев', 'Леви', 'Ленар', 'Леон', 'Леонард', 'Леонид', 'Леопольд', 'Лоренс', 'Лука', 'Лукиллиан', 'Лукьян', 'Любомир', 'Людвиг', 'Людовик', 'Люций', 'Маджид', 'Майкл', 'Макар', 'Макарий', 'Максим', 'Максимилиан', 'Максуд', 'Мансур', 'Мар', 'Марат', 'Марк', 'Марсель', 'Мартин (Мартын)', 'Матвей', 'Махмуд', 'Мика', 'Микула', 'Милослав', 'Мирон', 'Мирослав', 'Михаил', 'Моисей', 'Мстислав', 'Мурат', 'Муслим', 'Мухаммед', 'Мэтью', 'Назар', 'Наиль', 'Нариман', 'Натан', 'Нестор', 'Ник', 'Никита', 'Никодим', 'Никола', 'Николай', 'Нильс', 'Ной', 'Нурлан', 'Огюст', 'Олег', 'Оливер', 'Орест', 'Орландо', 'Осип', 'Оскар', 'Осман', 'Остап', 'Остин', 'Павел', 'Панкрат', 'Пантелеймон', 'Патрик', 'Педро', 'Перри', 'Пётр', 'Платон', 'Потап', 'Прохор', 'Равиль', 'Радий', 'Радик', 'Радомир', 'Радослав', 'Разиль', 'Раиль', 'Раиф', 'Райан', 'Раймонд', 'Рамазан', 'Рамзес', 'Рамиз', 'Рамиль', 'Рамон', 'Ранель', 'Расим', 'Расул', 'Ратибор', 'Ратмир', 'Раушан', 'Рафаэль', 'Рафик', 'Рашид', 'Ринат (Ренат)', 'Ричард', 'Роберт', 'Родим', 'Родион', 'Рожден', 'Ролан', 'Роман', 'Ростислав', 'Рубен', 'Рудольф', 'Руслан', 'Рустам', 'Рэй', 'Савва', 'Савелий', 'Саид', 'Салават', 'Самат', 'Самвел', 'Самир', 'Самсон', 'Самуил', 'Санжар', 'Сани', 'Саян', 'Святослав', 'Севастьян', 'Семён', 'Серафим', 'Сергей', 'Сидор', 'Симба', 'Соломон', 'Спартак', 'Станислав', 'Степан', 'Сулейман', 'Султан', 'Сурен', 'Тагир', 'Таир', 'Тайлер', 'Талгат', 'Тамаз', 'Тамерлан', 'Тарас', 'Тахир', 'Тигран', 'Тимофей', 'Тимур', 'Тихон', 'Томас', 'Трофим', 'Уинслоу', 'Умар', 'Устин', 'Фазиль', 'Фарид', 'Фархад', 'Фёдор', 'Федот', 'Феликс', 'Филипп', 'Флор', 'Фома', 'Фред', 'Фридрих', 'Хабиб', 'Хаким', 'Харитон', 'Хасан', 'Цезарь', 'Цефас', 'Цецилий (Сесил)', 'Цицерон', 'Чарльз', 'Чеслав', 'Чингиз', 'Шамиль', 'Шарль', 'Шерлок', 'Эдгар', 'Эдуард', 'Эльдар', 'Эмиль', 'Эмин', 'Эрик', 'Эркюль', 'Эрмин', 'Эрнест', 'Эузебио', 'Юлиан', 'Юлий', 'Юнус', 'Юрий', 'Юстиниан', 'Юстус', 'Яков', 'Ян', 'Яромир', 'Ярослав']
    return random.choice(list_of_first_names)

class Person:
    def __init__(self, id, name, age):
        self.id = id
        self.name = name
        self.age = age
        self.id = id

    
# @profile(precision=4)
def foo():
    persons = {}
    for id in range(1, 10**5+1):
        persons[id] = Person(id, get_first_name(), random.randint(15, 99))

    sum_age = 0
    count_persons = 0
    for id in range(10500, 10800):
        count_persons += 1
        sum_age += persons[id].age
    if count_persons:
        return sum_age/count_persons
    else:
        None

@profile(precision=4)
def foo2():
    def get_shelve_id(id):
        span = id // 1000 + 1
        return f'{1000*(span-1)+1}-{1000*span}'
    db = shelve.open('persondb')
    db.clear()
    for span in range(1, 101):
        persons = {}
        for step in range(1, 1001):
            id = span * step
            persons[id] = Person(id, get_first_name(), random.randint(15, 99))
        db[f'{1000*(span-1)+1}-{1000*span}'] = persons
    sum_age = 0
    count_persons = 0
    shelve_id_tmp = 0
    for id in range(10500, 10800):
        shelve_id = get_shelve_id(id)
        if shelve_id != shelve_id_tmp:
            persons = db[shelve_id]
            shelve_id_tmp = shelve_id
            for id, person in persons.items():
                if 10500 <= id < 10800:
                    count_persons += 1
                    sum_age += person.age
    if count_persons:
        return sum_age/count_persons
    else:
        None



print(foo2())

