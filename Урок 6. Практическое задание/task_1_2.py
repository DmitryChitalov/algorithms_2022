"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""

"""
Основы языка Python Урок 2. 
Дан список, содержащий искажённые данные с должностями и именами сотрудников:
['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй', 'директор аэлита']
Известно, что имя сотрудника всегда в конце строки. Сформировать и вывести на экран фразы вида: 'Привет, Игорь!'
Подумать, как получить имена сотрудников из элементов списка, как привести их к корректному виду.
"""
from memory_profiler import profile,memory_usage

def decor(func):
   def wrapper(*args, **kwargs):
      m1 = memory_usage()
      res = func(*args)
      m2 = memory_usage()
      mem_diff = m2[0] - m1[0]
      return res, mem_diff


m1 = memory_usage()
list1 = ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй', 'директор аэлита']
for member in list1:
    print(f' Привет, {member.split(" ")[-1].capitalize()}!')
m2 = memory_usage()
print(m2[0] - m1[0])

""" Оптимизция c помощью генератора"""


m3 = memory_usage()
gen  = (member.split(" ")[-1].capitalize() for member in list1)
for i in gen:
   print( f' Привет, {i}!')
m4 = memory_usage()
print(m4[0] - m3[0])

"""
 Использование генератора позволяет сократить использование памяти
 До оптимизации  памяти использовалось 0.00390625 , после 0.0
 """
