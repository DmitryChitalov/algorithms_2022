"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""
from recordclass import recordclass
from sys import getsizeof

"""
Основы Python (3 урок)
2. * (вместо задачи 1) Доработать предыдущую функцию в num_translate_adv(): 
реализовать корректную работу с числительными, начинающимися с заглавной буквы — результат тоже должен 
быть с заглавной.
"""


def num_translate_1(value):
    translate = {'one': 'один', 'two': 'два', 'three': 'три', 'for': 'четыре',
                 'five': 'пять', 'six': 'шесть', 'seven': 'семь', 'eight': 'восемь',
                 'nine': 'девять', 'ten': 'десять'}
    print(getsizeof(translate))
    if value[0].isupper():
        str_out = translate[value.lower()].title()
    else:
        str_out = translate[value]
    return str_out


print(num_translate_1('one'))


def num_translate(value):
    trs = recordclass('var', ('one', 'two', 'three', 'fore', 'five', 'six', 'seven', 'eight', 'nine', 'ten'))
    translate = trs(one='один', two='два', three='три', fore='четыре', five='пять', six='шесть', seven='семь',
                    eight='восемь', nine='девять', ten='десять')
    print(getsizeof(translate))
    if value[0].isupper():
        return getattr(translate, value.lower()).title()
    else:
        return getattr(translate, value)


print(num_translate('one'))

# Вместо словаря я использую recordclass. Внутри функции сделал замеры выделенной папяти для словаря и recordclass.
# Второе выигрывает по памяти почти в 3 раза. Еще убрал 3 переменные (хотя это не влияет на память).