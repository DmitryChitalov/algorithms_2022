"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""
from memory_profiler import profile

@profile
def func_2(nums):
    new_arr = [i for i in range(len(nums)) if nums[i] % 2 == 0]
    return new_arr

@profile
def new_func(n):
    new_list = filter(lambda x: x % 2 == 0, range(len(n)))
    return new_list

if __name__ == '__main__':
    a = list(range(100000))
    func_2(a)
    new_func(a)

# Line #    Mem usage    Increment  Occurrences   Line Contents
# =============================================================
#     35     32.0 MiB     32.0 MiB           1   @profile
#     36                                         def func_2(nums):
#     37     33.8 MiB  -2515.8 MiB      100003       new_arr = [i for i in range(len(nums)) if nums[i] % 2 == 0]
#     38     33.8 MiB      0.0 MiB           1       return new_arr


# Line #    Mem usage    Increment  Occurrences   Line Contents
# =============================================================
#     40     32.2 MiB     32.2 MiB           1   @profile
#     41                                         def new_func(n):
#     42     32.2 MiB      0.0 MiB           1       new_list = filter(lambda x: x % 2 == 0, range(len(n)))
#     43     32.2 MiB      0.0 MiB           1       return new_list


