"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""
'''курс основы python урок 5 задание №4
Представлен список чисел. Необходимо вывести те его элементы, 
значения которых больше предыдущего, например:

src = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
result = [12, 44, 4, 10, 78, 123'''
from random import randint
src = [randint(1,1000) for i in range(10000000)]


from memory_profiler import memory_usage

def decor(func):
    def wrapper():
        m1 = memory_usage() # текущее использование памяти
        func()
        m2 = memory_usage()
        print(m2[0] - m1[0])
    return wrapper

# 1 до оптимизации
@decor
def func1():
    return [src[x] for x in range(1, len(src)) if src[x] > src[x - 1]]

# 2 после оптимизации
@decor
def func2():
    return (src[x] for x in range(1, len(src)) if src[x] > src[x - 1])

func1()  # 0.3125 Использоваие памяти
func2()  # 0.0 Использоваие памяти

'''При использовании генератора при задании большого исходного числа 
время его создания остается незначительным т.к. данные будут использоватья
по мере обращения, когда с попомощью списковой
сборки затрачивается больше памяти'''