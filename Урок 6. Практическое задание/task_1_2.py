"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""

from pympler.asizeof import asizeof

'''
Курс основ python урок 5 задание 2:
Написать программу сложения и умножения двух шестнадцатеричных чисел.
При этом каждое число представляется как массив,
элементы которого это цифры числа.
Например, пользователь ввёл A2 и C4F.
Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’],
произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].
'''

class HexNum:
    def __init__(self, hexnum):
        self.hexnum = int(hexnum, 16)

    def __mul__(self, other):
        return list(hex(self.hexnum * other.hexnum))[2:]

    def __add__(self, other):
        return list(hex(self.hexnum + other.hexnum))[2:]

hexnum1 = HexNum('AAA')
print(f'hexnum1: {asizeof((hexnum1))}')


class HexNum:
    __slots__ = 'hexnum'

    def __init__(self, hexnum):
        self.hexnum = int(hexnum, 16)

    def __mul__(self, other):
        return list(hex(self.hexnum * other.hexnum))[2:]

    def __add__(self, other):
        return list(hex(self.hexnum + other.hexnum))[2:]

hexnum2 = HexNum('AAA')
print(f'hexnum2: {asizeof((hexnum2))}')


"""
Вывод: Используя слоты, мы ограничиваем объект в создании дополнительных атрибутов, 
тем самым экономим память
"""