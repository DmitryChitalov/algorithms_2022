"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""

from memory_profiler import profile

# @profile
# def test3():
#     my_list = list(i**3 for i in range(1,10001,2))
#     sum = 0 # общая сумма
#     sum_2 = 0 # общая сумма b
#     for num in my_list:
#         sum_num = 0 # сумма цифр в числе
#         num_1 = num
#         while True:
#             sum_num += num_1 % 10
#             num_1 //= 10
#             if num_1 < 10:
#                 sum_num += num_1 % 10
#                 break
#         if sum_num % 7 == 0:
#             sum += num
#     for num in my_list:
#         sum_num_2 = 0 # сумма цифр для b
#         num_2 = num + 17 # число + 17
#         while True:
#             sum_num_2 += num_2 % 10
#             num_2 //= 10
#             if num_2 < 10:
#                 sum_num_2 += num_2 % 10
#                 break
#         if sum_num_2 % 7 == 0:
#             sum_2 += num + 17
#     print("a", sum, "b", sum_2)
#
# test3()

@profile
def test4():
    my_list = (i**3 for i in range(1,10001,2))
    sum = 0 # общая сумма
    sum_2 = 0 # общая сумма b
    for num in my_list:
        sum_num = 0 # сумма цифр в числе
        num_1 = num
        while True:
            sum_num += num_1 % 10
            num_1 //= 10
            if num_1 < 10:
                sum_num += num_1 % 10
                break
        if sum_num % 7 == 0:
            sum += num
    for num in my_list:
        sum_num_2 = 0 # сумма цифр для b
        num_2 = num + 17 # число + 17
        while True:
            sum_num_2 += num_2 % 10
            num_2 //= 10
            if num_2 < 10:
                sum_num_2 += num_2 % 10
                break
        if sum_num_2 % 7 == 0:
            sum_2 += num + 17
    print(f'"a" {sum}, "b" {sum_2}')
    del my_list
    del sum
    del sum_2
    del sum_num
    del sum_num_2
test4()


"""
'Print' заменен на f-строку, удалены лишние переменные и список заменен на генератор списка заменен на генератор.
Это и немного ускоряет процесс и высвобождает память.
"""


