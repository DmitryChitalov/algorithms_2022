"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта

3. Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка».
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
вычитание (__sub__()), умножение (__mul__()), деление (__floordiv__, __truediv__()).
Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и округление до целого
числа деления клеток, соответственно.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек двух клеток
больше нуля, иначе выводить соответствующее сообщение.
Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Этот метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом случае метод make_order()
вернёт строку: *****\n*****\n**.
Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод make_order()
вернёт строку: *****\n*****\n*****.
"""
from memory_profiler import memory_usage, profile
from pympler import asizeof


def memory(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f"Выполнение заняло {mem_diff} Mib")
        return res

    return wrapper


class Cell:
    def __init__(self, n):
        self.n = n

    def __str__(self):
        return f' n = {self.n}'

    def __add__(self, other):
        return Cell(self.n + other.n)

    def __sub__(self, other):
        if self.n > other.n:
            return Cell(self.n - other.n)
        else:
            return 'Разность количества ячеек двух клеток должна быть больше нуля'

    def __mul__(self, other):
        return Cell(self.n * other.n)

    def __truediv__(self, other):
        if other.n != 0:
            return Cell(self.n // other.n)
        else:
            return 'Количество ячеек клетки - делителя должна быть больше нуля'

    def make_order(self, number):
        if number > 0:
            k = self.n // number
            ost = self.n % number
            my_str = '*' * number
            last_str = '*' * ost
            for i in range(k):
                print(my_str)
            print(last_str)


class Cell2:
    __slots__ = ['n']

    def __init__(self, n):
        self.n = n

    def __str__(self):
        return f' n = {self.n}'

    def __add__(self, other):
        return Cell(self.n + other.n)

    def __sub__(self, other):
        if self.n > other.n:
            return Cell(self.n - other.n)
        else:
            return 'Разность количества ячеек двух клеток должна быть больше нуля'

    def __mul__(self, other):
        return Cell(self.n * other.n)

    def __truediv__(self, other):
        if other.n != 0:
            return Cell(self.n // other.n)
        else:
            return 'Количество ячеек клетки - делителя должна быть больше нуля'

    def make_order(self, number):
        if number > 0:
            k = self.n // number
            ost = self.n % number
            my_str = '*' * number
            last_str = '*' * ost
            for i in range(k):
                print(my_str)
            print(last_str)


@memory
def func_call1():
    one = []
    two = []
    for i in range(1000):
        one.append(Cell(4363463345634563456345634564543634633456345634563456345645436346334563456345634563456454363463345634563456345634564543634633456345634563456345645))
        two.append(Cell(23475698723496283452483752347569872349628345248375234756987234962834524837523475698723496283452483752347569872349628345248375))
        print(one[i] + two[i])
        print(one[i] - two[i])
        print(one[i] * two[i])
        print(one[i] / two[i])
    print(asizeof.asizeof(one)) # -> 161008
    print(asizeof.asizeof(two[0])) # -> 288
    printed = Cell(13000)
    printed.make_order(144)
    print(asizeof.asizeof(printed)) # -> 240


@memory
def func_call2():
    one = []
    two = []
    for i in range(1000):
        one.append(Cell2(4363463345634563456345634564543634633456345634563456345645436346334563456345634563456454363463345634563456345634564543634633456345634563456345645))
        two.append(Cell2(23475698723496283452483752347569872349628345248375234756987234962834524837523475698723496283452483752347569872349628345248375))
        print(one[i] + two[i])
        print(one[i] - two[i])
        print(one[i] * two[i])
        print(one[i] / two[i])
    print(asizeof.asizeof(one))  # -> 48952
    print(asizeof.asizeof(two[0]))  # -> 120
    del one, two
    printed = Cell2(13000)
    printed.make_order(144)
    print(asizeof.asizeof(printed))  # -> 72


func_call2()
# func_call1()
# func_call2()


#
# снижение размера памяти произошло в результате использования slots
# (большое число копий объекта)

# оригинал
# n = 4363463345634563456369110263267130916908829386911026217995064691582938691102621798419288888300869110262179841918017027386981026217984191801594020
# n = 4363463345634563456322158865820138350003861882215886473295808001086188221588647328493619838625822158864732849351112059882285886473284935111097270
# n = 102435350893136143610753505513095736854853499886034961262269291960762379991602970326456152140992123074178101086610483659859847632595410414096882563812750887012339743065618274430989174277909552437913562030476432521394596250117064236958842186764018536294032307777374576875
# n = 185871500440890988102
# ...
#     print(asizeof.asizeof(one)) # -> 161008
#     print(asizeof.asizeof(two[0])) # -> 288
#     print(asizeof.asizeof(printed)) # -> 240
# Выполнение заняло 0.60546875 Mib

# slots
#  n = 4363463345634563456369110263267130916908829386911026217995064691582938691102621798419288888300869110262179841918017027386981026217984191801594020
#  n = 4363463345634563456322158865820138350003861882215886473295808001086188221588647328493619838625822158864732849351112059882285886473284935111097270
#  n = 102435350893136143610753505513095736854853499886034961262269291960762379991602970326456152140992123074178101086610483659859847632595410414096882563812750887012339743065618274430989174277909552437913562030476432521394596250117064236958842186764018536294032307777374576875
#  n = 185871500440890988102
# ...
#     print(asizeof.asizeof(one))  # -> 48952
#     print(asizeof.asizeof(two[0]))  # -> 120
#     print(asizeof.asizeof(printed))  # -> 72
# Выполнение заняло 0.203125 Mib


# однако на малых числах снижения размера памяти почти не наблюдается
#     for i in range(1):

# оригинал
# Выполнение заняло 0.046875 Mib

# slots
# Выполнение заняло 0.04296875 Mib
