"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""
from memory_profiler import profile
from numpy import array
from pympler.asizeof import asizeof

"""
Курс Основ Python урок 2 задание 3
Дан список заполненный произвольными целыми числами.
Получите новый список, элементами которого будут только уникальные элементы исходного.
    Примечание. Списки создайте вручную, например так:
my_list_1 = [2, 2, 5, 12, 8, 2, 12]

В этом случае ответ будет:
[5, 8]
"""


@profile
def original():
    numbers_list = [4, 5, 8, 45, 8, 4, 5, 4, 5, 45, 4, 845, 9, 889, 1, 5, 35, 4]
    result = []  # пустой список, в который будем добавлять уник. элементы
    for number in numbers_list:
        if numbers_list.count(number) == 1:  # проверяем количество элементов и их уникальность в списке.
            result.append(number)  # добавляем уник. элемент
    return result


@profile
def lc():
    numbers_list = [4, 5, 8, 45, 8, 4, 5, 4, 5, 45, 4, 845, 9, 889, 1, 5, 35, 4]
    return array(number for number in numbers_list if numbers_list.count(number) == 1)


@profile
def gen():
    numbers_list = [4, 5, 8, 45, 8, 4, 5, 4, 5, 45, 4, 845, 9, 889, 1, 5, 35, 4]
    for i in numbers_list:
        if i % 2 == 0:
            yield i


if __name__ == '__main__':
    print(asizeof(original()))
    print(asizeof(lc()))
    print(asizeof(gen()))
    print("""В оптимизированном варианте NumPy Array справился лучше всех,
так как он лучше справляется с числовыми данными. В данном скрипте он оказался лучше генератора""")
