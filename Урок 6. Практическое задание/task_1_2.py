"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""

from timeit import default_timer
import memory_profiler


def decor(func):
    """Замер времени и памяти"""

    def wrapper(*args):
        mem_1 = memory_profiler.memory_usage()
        start_time = default_timer()
        res = func(args[0])
        mem_2 = memory_profiler.memory_usage()
        print(f'memory: {mem_2[0] - mem_1[0]}, time: {default_timer() - start_time}')
        return res

    return wrapper


# Задание с курса "Основы языка Python"

@decor
def old_version(num):
    """Вычислить сумму тех чисел из списка,
    сумма цифр которых делится нацело на 7"""
    my_list = []
    full_summ = 0
    for i in range(1, num + 1, 2):
        my_list.append(i ** 3)
    for i in my_list:
        num = i
        sum_num = 0
        while num > 0:
            sum_num += num % 10
            num //= 10
        if sum_num % 7 == 0:
            full_summ += i
    print(full_summ)


def nums_generator(max_num):
    """Генератор кубов нечетных чисел от 1 до n"""
    for i in range(1, max_num + 1, 2):
        num = i ** 3
        sum_num = 0
        while num > 0:
            sum_num += num % 10
            num //= 10
        yield i ** 3 if sum_num % 7 == 0 else 0


@decor
def new_version(num):
    """Вычисляет сумму тех чисел из списка,
    сумма цифр которых делится нацело на 7"""
    nums_gen = nums_generator(num)
    full_summ = 0

    for _ in range(1, num + 1, 2):
        num = next(nums_gen)
        full_summ += num
    print(full_summ)


old_version(1000)  # memory: 0.07421875, time: 0.10943380000000003
new_version(1000)  # memory: 0.0, time: 0.10862699999999981

# Оптимизация алгоритма с помощью генератора. Для данной ситуации, где нет необходимости
# хранить значения массива,
# подходит хорошо, памяти опрактически не занимает
