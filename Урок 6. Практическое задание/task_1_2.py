"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""
from memory_profiler import memory_usage


def memory(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f"Выполнение заняло {mem_diff} Mib")
        return res

    return wrapper


"""Курс "Алгоритмы и структуры данных на Python" Урок №2 Задание №2 """


@memory
def my_func(j):
    def counting_numbers(i, even=0, odd=0):
        if i == 0:
            return even, odd
        else:
            num_i = i % 10
            i //= 10
            if num_i % 2 == 0:
                even += 1
            else:
                odd += 1
        return counting_numbers(i, even, odd)

    return counting_numbers(j)


@memory
def counting_numbers_2(i, even=0, odd=0):
    while i > 0:
        if i % 2 == 0:
            even += 1
        else:
            odd += 1
        i = i // 10
    print(f'\nКоличество четных цифр: {even}\nКоличество нечетных цифр: {odd}\n')


i = int(input('Введите число: '))
print(f'\nКоличество четных и нечетных цифр в числе равно: {my_func(i)}\n')
counting_numbers_2(i)

"""Заменила рекурсию на цикл, потребление памяти существенно снизилось. """
