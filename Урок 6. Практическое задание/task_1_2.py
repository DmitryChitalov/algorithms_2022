"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""
# Из алгоритмы. ДЗ 2.3

from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff

    return wrapper


# 1) Версия до оптимизации

@decor
def reverse_number(num):
    if num < 10:
        return str(num)
    else:
        return str(num % 10) + str(reverse_number(num // 10))


# Выполнение заняло 0.24609375 Mib

# 2) Версия после оптимизации. Решение через срез.


@decor
def reverse_number_2(num):
    return str(num)[::-1]


# Выполнение заняло 0.0703125 Mib

if __name__ == '__main__':
    n = 18009906656599999
    res_1, mem_diff_1 = reverse_number(n)
    print(f'Выполнение заняло {mem_diff_1} Mib')
    res_2, mem_diff_2 = reverse_number(n)
    print(f'Выполнение заняло {mem_diff_2} Mib')

# Выполнение через срез занимает меньше места, так как это встроенная и уже оптимизированная функция.
