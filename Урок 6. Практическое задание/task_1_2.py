"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""
from memory_profiler import profile


"""
Изначальный вариант взял из курса основ.
Расчет массы с использованием ООП
Урок 9, task 2
"""


# Изначальный вариант
class Road:

    def __init__(self, length, width):
        self._length, self._width = length, width

    def calc_mass(self, mass, thickness):
        calc_mass_result = (self._length * self._width * mass * thickness)
        return f'{round(calc_mass_result * 0.001)} т.'

@profile
def road_default():
    test = Road(1000, 1000)
    return test.calc_mass(1000,1000)

# road_default()


# Оптимизированный вариант
class Road2:
    __slots__ = ('_length', '_width')

    def __init__(self, length, width):
        self._length, self._width = length, width

    def calc_mass(self, mass, thickness):
        calc_mass_result = (self._length * self._width * mass * thickness)
        return f'{round(calc_mass_result * 0.001)} т.'


@profile
def road_default():
    test = Road2(1000, 1000)
    return test.calc_mass(1000,1000)

# road_default()


"""
В данной задаче важен принцип оптимизиации создания классов.
Если известно, что в классе могу присутствовать только определенные атрибуты
тогда имеет смысл записать их в слоты в виде кортежа.
"""