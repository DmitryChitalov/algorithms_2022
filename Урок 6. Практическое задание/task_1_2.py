"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта

"""

from pympler import asizeof


class PlateStack:
    __slots__ = ['stack', 'stacks']

    def __init__(self):
        self.stack = []  # стопка
        self.stacks = []  # стопки

    def put_in(self):
        """
        добавление тарелки в стопку
        :return:
        """
        # если в тарелке ровно 10 тарелок создает новую стопку
        if len(self.stack) == 10:
            self.new_stack()

        self.stack.append(f'Plate{len(self.stack) + 1}')

    def take_out(self):
        """
        Достаем тарелку из стопки если есть стопка или стопки
        :return:
        """
        if self.stack:
            self.stack.pop()
        elif (not self.stack) and self.stacks:
            self.stack_is_over()
        else:
            print("No more plates")

    def show_current(self):
        """
        количество тарелок в нынешней стопке
        :return:
        """
        return self.stack

    def show_all(self):
        """
        показывает все стопки
        :return:
        """
        return self.stacks

    def new_stack(self):
        """
        создает новую стопку
        :return:
        """
        self.stacks.append(self.stack)
        self.stack = []

    def stack_is_over(self):
        """
        Берет стопку из скалад стопок
        :return:
        """
        self.stack = self.stacks.pop()


if __name__ == '__main__':
    obj = PlateStack()
    obj.put_in()
    obj.put_in()
    print(asizeof.asizeof(obj))

"""
520 до ипользования __slots__
304 после
"""
