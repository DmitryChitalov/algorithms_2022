"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""

from memory_profiler import profile

price = [48, 54.1, 28.7, 59, 91, 25, 68, 32.15, 5, 14, 20.6, 72.4]*100000

def view_price(price):
    for i in price:
        if str(i).find('.') > 0:
            pass
            # print('{:0<2}'.format(f'"{i}'[:str(i).find('.') + 1]), 'руб', end=' ')
            # print('{:0<2}'.format(f'{i}'[str(i).find('.')+1:]), 'коп"', end=', ')
        else:
            pass
            # print(f'"{i} руб 00 коп', end='", ')
    # print(end='\n')
# view_price(price)

@profile
def func_1(price):
    price_desc = sorted(price, reverse=True)
    view_price(price_desc)

@profile
def func_2(price):
    price.sort()
    view_price(price)


func_1(price[:])
# прирост занял 10.0 MiB во время выполнения
func_2(price[:])
# прирост занял 0.0 MiB во время выполнения



'''
Задание 2-5 из основ - Создать список, содержащий цены на товары, 
Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде <r> руб <kk> коп 
(например «5 руб 04 коп»).
Вывести цены, отсортированные по возрастанию, новый список не создавать.

В первом случае при сортировке функцией sorted прирост памяти занял 10.0 MiB во время выполнения. так как функция
возвращает новый список с отсортированными данными.
Во втором случае естественный способ сортировки элементов - метод sort. - прирост памяти занял 0.0 MiB во время выполнения.

'''







