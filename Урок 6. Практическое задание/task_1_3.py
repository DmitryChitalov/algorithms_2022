"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""
"""
Курс алгоритмы.
Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.
Решите через рекурсию. В задании нельзя применять циклы.
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""
from memory_profiler import profile


# старое решение рекурсией, недостаток присутствует стэк вызовов
@profile
def even_odd(number, even=0, odd=0):
    if number == 0:
        return even, odd
    else:
        tmp_number = number % 10
        number = number // 10
        if tmp_number % 2 == 0:
            even += 1
        else:
            odd += 1
        return even_odd(number, even, odd)


# Новое решение через цикл, нет стека вызовов, соответственно занимает меньше памяти
@profile
def new_even_odd(number, even=0, odd=0):
    for num in str(number):
        if int(num) % 2 == 0:
            even += 1
        else:
            odd += 1
    return even, odd


user_number = 123456789
print(f'Количество четных и нечетных цифр в числе {user_number}: {even_odd(user_number)}')

user_number = 123456789
print(f'Количество четных и нечетных цифр в числе {user_number}: {new_even_odd(user_number)}')
