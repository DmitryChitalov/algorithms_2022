"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""
# Курс Алгоритмы и структуры данных, Урок 2, задание 2
from memory_profiler import profile


@profile
def wrapper(num):
    def even_odd_count(number, even=0, odd=0):
        if number == 0:
            return f'Количество четных чисел: {even}, нечетных: {odd}'
        a = number % 10
        if a % 2 == 0:
            even += 1
            return even_odd_count(number//10, even, odd)
        elif a % 2 != 0:
            odd += 1
            return even_odd_count(number//10, even, odd)
    return even_odd_count(num)


@profile
def even_odd_count_optimized(number):
    even = 0
    odd = 0
    for i in range(number):
        if number == 0:
            return f'Количество четных чисел: {even}, нечетных: {odd}'
        a = number % 10
        if a % 2 == 0:
            even += 1
        elif a % 2 != 0:
            odd += 1
        number //= 10


print(even_odd_count_optimized(9**1000))
print(wrapper(9**1000))
print('\nВывод: также как и в двух прошлых заданиях, добился оптимизации памяти \n'
      'превратив рекурсию в цикл и убрав ненужные детали')
