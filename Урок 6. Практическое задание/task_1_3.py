"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""
# Скрипт из Основ. Урок 10. Задание 1. Создать класс матрицы.

from pympler import asizeof


class Matrix:
    def __init__(self, matr):
        self.matr = matr

    def __str__(self):
        result = ''
        for row in self.matr:
            for i in row:
                result += f'{i}  '
            result += '\n'
        return result

    def __add__(self, other):
        result = ''
        for i in range(len(self.matr)):
            for j in range(len(self.matr[i])):
                result += f'{self.matr[i][j] + other.matr[i][j]}  '
            result += '\n'
        return


m1 = Matrix([[31, 22], [37, 43], [51, 86]])
print(f'{asizeof.asizeof(m1)} bytes')


class Matrix1:
    __slots__ = ['matr']

    def __init__(self, matr):
        self.matr = matr

    def __str__(self):
        result = ''
        for row in self.matr:
            for i in row:
                result += f'{i}  '
            result += '\n'
        return result

    def __add__(self, other):
        result = ''
        for i in range(len(self.matr)):
            for j in range(len(self.matr[i])):
                result += f'{self.matr[i][j] + other.matr[i][j]}  '
            result += '\n'
        return


m2 = Matrix1([[31, 22], [37, 43], [51, 86]])
print(f'{asizeof.asizeof(m2)} bytes')

'''
Класс без оптимизации занимает: 696 bytes
Класс оптимизированный слотом: 528 bytes
Видим, что второй объект занимает меньше места в памяти, слоты работают
'''