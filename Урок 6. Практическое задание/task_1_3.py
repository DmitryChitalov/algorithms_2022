"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""
from random import randint
from memory_profiler import profile
from numpy import array

@profile
def func_1(nums):
    return [num for num in range(0, len(nums), 2)]

@profile
def func_2(nums):
    return (num for num in range(0, len(nums), 2))


nums = range(1_000_000)
func_1(nums)
func_2(nums)

"""
Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     5     30.8 MiB     30.8 MiB           1   @profile
     6                                         def func_1(nums):
     7     49.8 MiB -37868.0 MiB      500003       return [num for num in range(0, len(nums), 2)]


Filename: d:\Programming\GB\algorithms_6\3.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     9     32.0 MiB     32.0 MiB           1   @profile
    10                                         def func_2(nums):
    11     32.0 MiB      0.0 MiB           1       return (num for num in range(0, len(nums), 2))


Функция func_2 оптимизирована по сравнению с func_1 по использованию памяти.
Что сделано: вместо lc используется генератор, который не считает весь массив, а только по требованию.

"""


