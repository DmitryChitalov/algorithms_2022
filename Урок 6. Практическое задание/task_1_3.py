"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""
# Из основ. ДЗ 3.1

from json import loads, dumps
from pympler import asizeof
from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff

    return wrapper


number_dict = {

    "zero": "ноль",
    "one": "один",
    "two": "два",
    "three": "три",
    "four": "четыре",
    "five": "пять",
    "six": "шесть",
    "seven": "семь",
    "eight": "восемь",
    "nine": "девять",

}


# 1) Версия до оптимизации

@decor
def num_translate(value: str) -> str:
    """переводит числительное с английского на русский """
    str_out = number_dict.get(value)
    return str_out

# Выполнение заняло 0.00390625 Mib


# 2) Версия после оптимизации. Оптимизация с помощью сериализации.

dumped_dict = dumps(number_dict)


@decor
def num_translate_2(value: str) -> str:
    """переводит числительное с английского на русский """
    str_out = loads(dumped_dict).get(value)
    return str_out


# Выполнение заняло 0.0 Mib

print('Размер словаря: ', asizeof.asizeof(number_dict))
print('Размер словаря: ', asizeof.asizeof(dumped_dict))
print(num_translate("two"))
print(num_translate_2("two"))

# Хранение словаря требует большей памяти, при обращении к Json происходит сжатие.
