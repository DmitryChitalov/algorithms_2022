"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""

from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff

    return wrapper


# task_5_1
# 1. Написать генератор нечётных чисел от 1 до n (включительно), без использования ключевого слова yield

@decor  # Выполнение заняло 2.94921875 Mib
def iterator_without_yield(n):
    nums_gen = (i for i in range(1, n + 1) if i % 2 != 0)
    return nums_gen


@decor  # Выполнение заняло 1.953125 Mib
def iterator_with_filter(lst):
    nums_gen = filter(lambda i: i in range(0, 10000, 2), lst)
    return nums_gen


if __name__ == '__main__':
    res, mem_diff = iterator_without_yield(list(range(100000)))
    print(f"Выполнение заняло {mem_diff} Mib")

    # res2, mem_diff = iterator_with_filter(list(range(100000)))
    # print(f"Выполнение заняло {mem_diff} Mib")

# В этой задаче используется оптимизацию с помощью функции filter (Способ 9), это позволило
# значительно оптимизировать память
