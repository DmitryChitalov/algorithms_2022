"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""
# Основы Python. Урок 5, задание №5

from memory_profiler import profile

#Исходный код
@profile
def get_uniq_numbers(src: list):
    dict_nums = {}
    for x in src:
        dict_nums[x] = dict_nums.get(x, 0) + 1  # считаем в значениях количество повторов числа по по ключу числа
    new_list = [x for x in src if dict_nums[x] == 1] # формируем список из ключей, в которых значение == 1

    return new_list

#Оптимизированный код (удаление словаря, в который помещались промежуточные подсчеты)
@profile
def get_uniq_numbers_1(src: list):
    dict_nums = {}
    for x in src:
        dict_nums[x] = dict_nums.get(x, 0) + 1  # считаем в значениях количество повторов числа по по ключу числа
    new_list = [x for x in src if dict_nums[x] == 1] # формируем список из ключей, в которых значение == 1
    del dict_nums
    return new_list


# src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# src = [randint(0,100) for i in range(500)]
# src = [randint(0,10000) for i in range(50000)]
print(get_uniq_numbers_(src))

# Оптимизация заметна лишь при увеличении количества элементов в списке