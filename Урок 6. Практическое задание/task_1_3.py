"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""

from timeit import default_timer
import memory_profiler
from numpy import array


def decor(func):
    """Замер времени и памяти"""

    def wrapper(*args):
        mem_1 = memory_profiler.memory_usage()
        start_time = default_timer()
        res = func(args[0])
        mem_2 = memory_profiler.memory_usage()
        print(f'memory: {mem_2[0] - mem_1[0]}, time: {default_timer() - start_time}')
        return res

    return wrapper

# задание из курса алгоритмы и структуры данных

@decor
def func_3(num):
    """Возвращает список четных чисел от 0 до n"""
    return [i for i in range(0, len(num), 2)]


@decor
def func_4(num):
    """Возвращает список четных чисел от 0 до n"""
    return array([i for i in range(0, len(num), 2)])


nums = [num ** 2 for num in range(1000000)]

func_3(nums)  # memory: 20.08984375, time: 0.143509
func_4(nums)  # memory: 1.8671875, time: 0.1875547999999998

# Использование модуля numpy - переход к array вместо list - наглядная
# экономия памяти