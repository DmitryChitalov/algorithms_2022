"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""


# Так как не нашел хороших вариантов для оптимизации, то решил придумать задачи сам.
# Дано 1000 точек на плоскости. Найти три точки, которые дают максимальную площадь.

# ====== Генерация точек ===========
import random

def gen_point():
    x = random.randint(0, 2000)
    y = random.randint(0, 2000)
    return x, y

point_list = [gen_point() for _ in range(10)]

s_max = 0
points_with_max_s = {}
for num_p1 in range(10):
    for num_p2 in range(10):
        for num_p3 in range(10):
            x1 = point_list[num_p1][0]
            x2 = point_list[num_p2][0]
            x3 = point_list[num_p3][0]
            y1 = point_list[num_p1][1]
            y2 = point_list[num_p2][1]
            y3 = point_list[num_p3][1]
            s = 1/2*abs((x2 - x1)*(y3 - y1) - (x3 - x1)*(y2 - y1))
            if s_max < s:
                s_max = s
                points_with_max_s['p1'] = (x1, y1)
                points_with_max_s['p2'] = (x2, y2)
                points_with_max_s['p3'] = (x3, y3)
print(points_with_max_s)
print(s_max)

