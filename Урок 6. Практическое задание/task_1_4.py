"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта


За основу взят результат ДЗ 5 урока 3 задание
"""

from timeit import default_timer
from memory_profiler import profile


@profile
def appendleft_test():
    my_lst111 = []
    start_time4 = default_timer()
    for i in range(100000):
        my_lst111.insert(0, i)
    duration4 = default_timer() - start_time4
    return duration4


print("________________Сравнение времени функции appendleft________________________")

print(f'Время выполнения операции appendleft_test: {appendleft_test()}')

print("_________Оптимизированное решение___________________")


@profile
def appendleft_test_opt():
    my_lst222 = []
    start_time5 = default_timer()
    for i in range(100000):
        my_lst222.insert(0, i)
    duration5 = default_timer() - start_time5
    del my_lst222
    return duration5


print("________________Сравнение времени функции appendleft________________________")

print(f'Время выполнения операции appendleft_test: {appendleft_test_opt()}')

"""

Аналитика: для оптитмизации памяти мы после того, как массив для вычислений нам более не понадобился использовали 
del, что позволило высвободить память.

"""
