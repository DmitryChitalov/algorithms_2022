"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""
from random import randint
from memory_profiler import profile


@profile
def list_append(num):
    """
    Заполнение списка цифрами через append и
    добавление случайного числа
    :param num: количество элементов списка
    :return: список чисел
    """
    lst = []
    lst_random = [randint(0, j) for j in range(num)]
    for i in range(num):
        lst.append(i + lst_random[i])
    return lst


@profile
def list_append_opti(num):
    """
    Заполнение списка цифрами через append и
    добавление случайного числа
    :param num: количество элементов списка
    :return: список чисел
    """
    lst = []
    lst_random = [randint(0, j) for j in range(num)]
    for i in range(num):
        lst.append(i + lst_random[i])
    del lst_random
    return lst


if __name__ == '__main__':
    list_append(10 ** 5)
    list_append_opti(10 ** 5)

    """
    Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    54     23.0 MiB     23.0 MiB           1   @profile
    55                                         def list_append_opti(num):
    56                                             
    57                                             Заполнение списка цифрами через append и нахождение суммы
    58                                             элементов списка
    59                                             :param num: количество элементов списка
    60                                             :return: сумма элементов
    61                                             
    62     23.0 MiB      0.0 MiB           1       lst = []
    63     24.3 MiB      1.3 MiB      100003       lst_random = [randint(0, j) for j in range(num)]
    64     28.6 MiB      3.1 MiB      100001       for i in range(num):
    65     28.6 MiB      1.2 MiB      100000           lst.append(i + lst_random[i])
    66     27.0 MiB     -1.6 MiB           1       del lst_random
    67     27.0 MiB      0.0 MiB           1       return lst
    
    Использование del очищает память удаляя уже не используемый список
    """
