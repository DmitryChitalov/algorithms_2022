"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""
# Решето Эратосфена
from memory_profiler import profile
from numpy import array


@profile
def eratosfen(n):
    a = [i for i in range(n)]                  # создание массива
    a[1] = 0
    m = 2                   # замена на 0 начинается с 3-го элемента (первые два уже нули)
    while m < n:            # перебор всех элементов до заданного числа
        if a[m] != 0:       # если он не равен нулю, то
            j = m * 2       # увеличить в два раза (текущий элемент простое число)
            while j < n:
                a[j] = 0       # заменить на 0
                j = j + m       # перейти к след элементу
        m += 1
    b = []
    for i in a:
        if a[i] != 0:
            b.append(a[i])
    print(b)
    return b


@profile
def eratosfen_opt(n):
    ar = array([i for i in range(n)])
    ar[1] = 0
    b = []
    m = 2
    while m < n:
        if ar[m] != 0:
            j = m * 2
            while j < n:
                ar[j] = 0
                j = j + m
        m += 1
    for i in ar:
        if ar[i] != 0:
            b.append(ar[i])
    del ar
    return b


eratosfen(10000)
eratosfen_opt(10000)


# В первом примере массив создаю обычным путем, во втором примере использую array из NumPy