"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""
"""
Курс основы. 
Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать из этих элементов список с сохранением порядка их следования в исходном
списке 
"""
from numpy import array
from memory_profiler import profile
from random import randint


# старое решение с использованием списка
@profile
def old_task():
    src = [randint(-100, 100) for _ in range(50000)]
    unique_num = set()
    tmp = set()
    for num in src:
        if num not in tmp:
            unique_num.add(num)
        else:
            unique_num.discard(num)
        tmp.add(num)
    return [num for num in src if num in unique_num]


# новое решение с использованием массива из модуля numpy
@profile
def new_task():
    src = array([randint(-100, 100) for _ in range(50000)])
    unique_num = set()
    tmp = set()
    for num in src:
        if num not in tmp:
            unique_num.add(num)
        else:
            unique_num.discard(num)
        tmp.add(num)
    return [num for num in src if num in unique_num]


old_task()
new_task()
