"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""

# Задача про нечетные числа от 1 до n

import typing

from memory_profiler import memory_usage


def memory_using(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff

    return wrapper


@memory_using
def odd_nums(number: int) -> typing.Generator:
    """Генератор, возвращающий по очереди нечетные целые числа от 1 до number (включительно)"""

    for number in range(1, number + 1, 2):
        yield number


@memory_using
def odd_nums_list(number: int) -> list:
    return [x for x in range(1, number + 1, 2)]


if __name__ == '__main__':
    number = 1000

    _, mem_diff = odd_nums_list(number)
    print(f"Выполнение заняло {mem_diff} Mib")  # 0.01171875 Mib

    generator, mem_diff = odd_nums(number)
    for i in generator:
        print(i)
    print(f"Выполнение заняло {mem_diff} Mib")  # 0.00390625 Mib
    # Использование генераторов вместо списков значительно экономит память
