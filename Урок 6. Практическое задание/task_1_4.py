"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""
# lesson 2 task 2
from memory_profiler import memory_usage


def memory(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f"Выполнение заняло {mem_diff} Mib")
        return res

    return wrapper


def count_func(num, cnt_1=0, cnt_2=0):
    if num < 10:
        if num % 2 == 0:
            cnt_1 += 1
        else:
            cnt_2 += 1
        return f'Количество четных и нечетных цифр в числе равно: {cnt_1, cnt_2}'
    else:
        n = num % 10
        if n % 2 == 0:
            cnt_1 += 1
        else:
            cnt_2 += 1
        return count_func(num//10, cnt_1, cnt_2)


@ memory
def count_func_opt(num):
    cnt_1, cnt_2 = 0, 0
    while num:
        n = num % 10
        if n % 2 == 0:
            cnt_1 += 1
        else:
            cnt_2 += 1
        num //= 10
    return f'Количество четных и нечетных цифр в числе равно: {cnt_1, cnt_2}'


@memory
def func_call(num):
    return count_func(num)


d = int('123456789' * 100)
func_call(d)
count_func_opt(d)
'''
Я заменил рекурсию на цикл
Выполнение заняло 1.4375 Mib
Выполнение заняло 0.0 Mib
'''
