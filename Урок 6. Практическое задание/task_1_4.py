"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта

Курс: Основы языка Python. Урок 2. Задание 4.

Дан список, содержащий искажённые данные с должностями и именами сотрудников:
['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй', 'директор аэлита']

Известно, что имя сотрудника всегда в конце строки. Сформировать и вывести на экран фразы вида: 'Привет, Игорь!'
Подумать, как получить имена сотрудников из элементов списка, как привести их к корректному виду.
"""

from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff

    return wrapper


@decor
def list_solution(arr):
    res = []
    for i in range(len(arr)):  # Перебираем список по индексу
        arr[i] = arr[i].split(' ')  # Разделяем элемент списка на вложенный список по пробелу
        res.append(f'Привет, {arr[i][len(arr[i]) - 1].capitalize()}')  # Выводим приветсвтие, исправляя регистр
        arr[i] = ' '.join(arr[i])  # Возвращаем в исходный вид
    return res

@decor
def generator_solution(arr):
    for s in arr:
        temp = s.split(' ')
        yield f'Привет, {temp[-1].capitalize()}'


staff_list = ['инженер-конструктор Игорь',
              'главный бухгалтер МАРИНА',
              'токарь высшего разряда нИКОЛАй',
              'директор аэлита'
              ]

#print(list_solution(staff_list))

# gen, memo = generator_solution(staff_list)
# print(memo)


"""
Генератор: 0.01171875
Список: 0.03125

Перед замерами добавил множество элементов в список.
Резульат схож с предыдущим, генератор снова расходует меньше памяти.
"""
