"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""
"""
Задание 2 к уроку 1 Основы языка Python

Задание:
Создать список, состоящий из кубов нечётных чисел от 0 до 1000:
Вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7.
"""
from memory_profiler import profile
@profile
def summing(plus):
    cub = []
    for i in range(1, 100000, 2):
        cub.append(i ** 3)
    summa = 0
    for i in cub:
        temp_sum = 0
        temp_val = i + plus
        while temp_val > 0:
            temp_sum += temp_val % 10
            temp_val = temp_val // 10
        if temp_sum % 7 == 0:
            summa += i
    return summa


print(summing(17))
@profile
def summing2(plus):
    cub = ''.join([str(i**3) for i in range(1, 100000,2)])
    summa = 0
    for i in map(int, cub):
        temp_sum = 0
        temp_val = i + plus
        while temp_val > 0:
            temp_sum += temp_val % 10
            temp_val = temp_val // 10
        if temp_sum % 7 == 0:
            summa += i
    return summa


print(summing2(17))


"""
Заменил массив на строку, уменьшив расход на 1.2 MiB
"""