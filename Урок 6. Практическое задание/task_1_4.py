"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""
from memory_profiler import profile

"""
Взял задание с курса алгоритмы 
Оптимизировал класс который умножает два числа из строки
При исользовании слотов есть незначительное уменьшение использования памяти
"""


class Calc(str):

    def __init__(self, pasr_str):
        self.a = pasr_str
        self.mas = []
        self.c = ''
        for i in self.a:
            self.mas.append(i)
        print(self.mas)

    def __add__(self, other):
        return hex(int(self.a, 16) + int(other.a, 16))

    @profile
    def __mul__(self, other):
        for i in range(1, 10000):
            self.c += hex(int(self.a, 16) * int(other.a, 16))
        return hex(int(self.a, 16) * int(other.a, 16))


c1 = Calc("A2")
c2 = Calc("C4F")

print(c1 + c2)
print(c1 * c2)
print("\n\n Новый класс + новый замер")


class Calc1(str):
    __slots__ = ['pasr_str', 'a', 'mas', 'c']

    def __init__(self, pasr_str):
        self.c = ''
        self.a = pasr_str
        self.mas = []
        for i in self.a:
            self.mas.append(i)
        print(self.mas)

    def __add__(self, other):
        return hex(int(self.a, 16) + int(other.a, 16))

    @profile
    def __mul__(self, other):
        for i in range(1, 10000):
            self.c += hex(int(self.a, 16) * int(other.a, 16))
        return hex(int(self.a, 16) * int(other.a, 16))


c11 = Calc1("A2")
c22 = Calc1("C4F")

print(c11 + c22)
print(c11 * c22)
