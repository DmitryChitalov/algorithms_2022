"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""
from memory_profiler import profile
'''
Задание 1-5 основы
Создать список, состоящий из кубов нечётных чисел от 1 до 1000 (куб X - третья степень числа X):
Вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7. 
Например, число «19 ^ 3 = 6859» будем включать в сумму, так как 6 + 8 + 5 + 9 = 28 – делится нацело на 7. 
'''
@profile
def func_1():
    bloсk_cube = [i ** 3 + 17 for i in range(1, 10000, 2)]
    summ_seven = 0
    for i in bloсk_cube:
        summ_div = 0
        b = i
        while b > 0:
            summ_div += b % 10
            b = b // 10
        if summ_div % 7 == 0:
            summ_seven += i
    print(summ_seven)


@profile
def func_2():
    summ_seven = 0
    i = 1
    while i <= 10000:
        if i % 2:
            cube = i ** 3 + 17
            summ_div = 0
            while cube > 0:
                summ_div += cube % 10
                cube = cube // 10
            if summ_div % 7 == 0:
                summ_seven += i ** 3 + 17
        i += 1
    print(summ_seven)


func_1()
# прирост занял 0.3 MiB во время выполнения
func_2()
# прирост занял 0.0 MiB во время выполнения

'''
Второй вариант почти не использует память так как перебирает значения и не использует список, в отличие от первого,
таким образом во втором варинте память не зависит от количества значений
'''