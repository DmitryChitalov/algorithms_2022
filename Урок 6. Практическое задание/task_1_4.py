"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""
from memory_profiler import profile

my_list = []


# Функция с урока 3, задание 1, курс Алгоритмы
@profile
def complete_list(user_list):
    number = 10 ** 7
    for i in range(number):  # O(1)
        user_list.append(i)  # O(1)


complete_list(my_list)

"""
Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    39     19.9 MiB     19.9 MiB           1   @profile
    40                                         def complete_list(user_list):
    41     19.9 MiB      0.0 MiB           1       number = 10 ** 7
    42    403.8 MiB  -4356.1 MiB    10000001       for i in range(number):  # O(1)
    43    403.8 MiB  -3972.2 MiB    10000000           user_list.append(i)  # O(1)
"""

my_list = []


@profile
def complete_list(user_list):
    number = 10 ** 7
    for i in range(number):
        user_list.append(i)
    del number


complete_list(my_list)

"""
Чем больше число number, тем большей оптимизации использования памяти можно добиться удалив на него ссылку.

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    61     22.5 MiB     22.5 MiB           1   @profile
    62                                         def complete_list(user_list):
    63     22.5 MiB      0.0 MiB           1       number = 10 ** 7
    64    402.6 MiB -19837.0 MiB    10000001       for i in range(number):
    65    402.6 MiB -19457.0 MiB    10000000           user_list.append(i)
    66    402.6 MiB      0.0 MiB           1       del number
"""
