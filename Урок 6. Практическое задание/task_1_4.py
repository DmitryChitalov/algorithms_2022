"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""
import numpy
from memory_profiler import profile

@profile
def func():
    arr = [i for i in range(1, 1000000, 2)]
    return arr

# Вариант оптимизации через numpy
@profile
def new_func():
    arr = numpy.arange(1, 1000000, 2)
    return arr


if __name__ == '__main__':
    func()
    new_func()

# Line #    Mem usage    Increment  Occurrences   Line Contents
# =============================================================
#     36     39.9 MiB     39.9 MiB           1   @profile
#     37                                         def func():
#     38     59.2 MiB  -3478.1 MiB      500003       arr = [i for i in range(1, 1000000, 2)]
#     39     59.2 MiB      0.0 MiB           1       return arr
#
#

#
# Line #    Mem usage    Increment  Occurrences   Line Contents
# =============================================================
#     42     40.2 MiB     40.2 MiB           1   @profile
#     43                                         def new_func():
#     44     42.1 MiB      1.9 MiB           1       arr = numpy.arange(1, 1000000, 2)
#     45     42.1 MiB      0.0 MiB           1       return arr

#numpy показывает существенное снижение использования памяти на больших объемах данных