"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""


from memory_profiler import profile


# @profile
# def test_def():
#     n = input('Введите число прописью от 0 до 10')
#
#     def num_translate(n):
#         if n == 'zero':
#             print ('ноль')
#             exit()
#         if n == 'one':
#             print ('один')
#             exit()
#         if n == 'two':
#             print ('два')
#             exit()
#         if n == 'three':
#             print ('три')
#             exit()
#         if n == 'four':
#             print ('четыре')
#             exit()
#         if n == 'five':
#             print ('пять')
#             exit()
#         if n == 'six':
#             print ('шесть')
#             exit()
#         if n == 'seven':
#             print ('семь')
#             exit()
#         if n == 'eight':
#             print ('восемь')
#             exit()
#         if n == 'nine':
#             print ('девять')
#             exit()
#         if n == 'ten':
#             print ('десять')
#             exit()
#         else:
#             print(None)
#     num_translate(n)
#
#
# test_def()


@profile
def test_def():
    n = int(input('Введите число прописью от 0 до 10: '))
    test_dict = {
        0: ('zero', 'ноль'),
        1: ('one', 'один'),
        2: ('two', 'два'),
        3: ('three', 'три'),
        4: ('four', 'четыре'),
        5: ('five', 'пять'),
        6: ('six', 'шесть'),
        7: ('seven', 'семь'),
        8: ('eight', 'восемь'),
        9: ('nine', 'девять'),
        10: ('ten', 'десять')}
    for key, value in test_dict.items():
        if n == key:
            print(f'{value[1]}')
    del n
    del test_dict


test_def()

"""
Логика, что и прежде...но код изменен - в скорости и памяти в теории выигрывает...
"""