"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""

from memory_profiler import memory_usage
from random import randint


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff

    return wrapper


# Task 4_3.
# Приведен код, формирующий из введенного числа
# обратное по порядку входящих в него
# цифр и вывести на экран.

@decor  # Выполнение заняло 0.57421875 Mib
def mirror_1(list_of_nums):
    return ''.join(reversed(str(list_of_nums)))


@decor  # Выполнение заняло 0.00390625 Mib
def mirror_2(list_of_nums):
    for i in reversed(list_of_nums):
        yield i


if __name__ == '__main__':
    my_list = [randint(0, 9) for i in range(200000)]
    # my_generator, mem_diff = mirror_1(my_list)
    my_generator, mem_diff = mirror_2(my_list)
    # print(type(my_generator))
    # for i in my_generator:
    #     print(i)

    print(f"Выполнение заняло {mem_diff} Mib")

# В этой задаче используется оптимизацию с помощью yield.
# Она подходит тогда, когда нет необходимости сохранять всю последовательность и промежуточные значения в памяти.
# Использование yield позволяет не сохранять в память всю последовательность, а просто генерирует объект при каждом
# вызове функции. Это позволяет обойтись без использования большого количества оперативной памяти.
