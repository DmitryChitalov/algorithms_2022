"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""


from memory_profiler import memory_usage


# ИСХОДНОЕ
def func_4(nums):
    our_l = []
    i = len(nums) - 1
    while i:
        if not nums[i] % 2:
            our_l.append(i)
        i = i - 1
    return our_l


m1 = memory_usage()
test_list = list(range(1, 100000))
new_list_1 = func_4(test_list)
m2 = memory_usage()
mem_usage = m2[0] - m1[0]
print(f"Выполнение заняло {mem_usage} Mib")


# ОПТИМИЗИРОВАННОЕ
def func_4_filter(nums):
    our_list = filter(lambda x: x % 2 == 0, nums)
    return our_list


m3 = memory_usage()
test_list = list(range(1, 100000))
new_list_2 = func_4_filter(test_list)
m4 = memory_usage()
mem_usage = m4[0] - m3[0]
print(f"Выполнение заняло {mem_usage} Mib")

'''
Выполнение заняло 5.76953125 Mib
Выполнение заняло 0.34765625 Mib

Вывод:
Использование filter даёт возможность существенно экономить память.
'''