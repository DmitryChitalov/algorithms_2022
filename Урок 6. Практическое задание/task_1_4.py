"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""

"""
Курс алгоритмы, урок 4 задание 1.

Использование 'filter'.

Результаты и выводы:

До (func_2)   : Выполнение заняло 1.5703125 Mib
После (func_3): Выполнение заняло 0.66015625 Mib

Выигрыш по памяти очевиден) 
"""

from memory_profiler import profile, memory_usage
from random import randint


def memory(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f"Выполнение заняло {mem_diff} Mib")
        return res

    return wrapper


@memory
def func_2(nums):
    return [i for i in range(len(nums)) if nums[i] % 2 == 0]


@memory
def func_3(nums):
    return list(filter(lambda x: x % 2 == 0, nums))


if __name__ == '__main__':
    nums = [randint(0, 10000) for i in range(100000)]

    func_2(nums)
    func_3(nums)

