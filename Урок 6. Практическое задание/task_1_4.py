"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""
from memory_profiler import memory_usage

"""
Курс алгоритмизация python урок 2 задание 3:
Сформировать из введенного числа
обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
то надо вывести число 6843.
"""
def dec(func):
    def wrapper(*args):
        start = memory_usage()
        res = func(*args)
        return f'Заняло пямяти = {memory_usage()[0] - start[0]}'
    return wrapper

@dec
def rev(n):
    return func(n)


def func(num, rev=''):
    if num == 0:
        return rev
    rev += str(num % 10)
    return func(num // 10, rev)


@dec
def rev_while(enter_num, rev_num=''):
    while enter_num != 0:
        rev_num = rev_num + str(enter_num % 10)
        enter_num //= 10
    return rev_num



print(rev(23456789765432134567892345678976543213456789))
print(rev_while(23456789765432134567892345678976543213456789))


"""
Вывод: Рекурсия каждый вызов сохраняет в памяти и занимает ее много, поэтому цикл быстрее и занимает меньше памяти
"""