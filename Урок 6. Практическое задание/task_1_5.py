"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта
"""


from memory_profiler import profile
# @profile
# def test_def():
#     answer = int (input("Введите продолжительность времени"))
#     s = answer%60
#     m = (answer//60)%60
#     h = (answer//60)//60%24
#     d = ((answer//60)//60)//24
#     while answer != 0:
#         if answer < 60:
#             print("seconds", answer)
#             break
#         elif h <= 0:
#             print("minutes", m, "seconds", s)
#             break
#         elif d <= 0:
#             print("hours", h, "minutes", m, "seconds", s)
#             break
#         elif d > 0:
#             print ("days",d,"hours",h,"minutes",m, "seconds", s)
#             break
# test_def()



@profile
def test_def():
    answer = int(input("Введите продолжительность времени"))
    s = answer % 60
    m = (answer//60) % 60
    h = (answer//60)//60 % 24
    d = ((answer//60)//60)//24
    while answer != 0:
        if answer < 60:
            print(f'"seconds", {answer}')
            break
        elif h <= 0:
            print(f'"minutes", {m}, "seconds", {s}')
            break
        elif d <= 0:
            print(f'"hours", {h}, "minutes", {m}, "seconds", {s}')
            break
        elif d > 0:
            print(f'"days",{d},"hours",{h},"minutes",{m}, "seconds", {s}')
            break
    del answer
    del s
    del m
    del h
    del d

test_def()

"""
Опять же f-строка и удаление переменных, которые в теории уменьшили бы расходы памяти...

"""