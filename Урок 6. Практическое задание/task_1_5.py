"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта
"""

'''
Алгоритмы и структуры данных на Python. Базовый курс
Подсчитать четные и нечетные цифры введенного натурального числа.
'''

from memory_profiler import profile


@profile
def get_even_odd_count(num, even=0, odd=0):
    if num == 0:
        return f'Количество четных и нечетных цифр в числе равно: {even}, {odd}'
    else:
        cur_num = num % 10
        if cur_num % 2 == 0:
            even += 1
        else:
            odd += 1
        num //= 10
        return get_even_odd_count(num, even, odd)


@profile
def get_even_odd_count_new(number, even=0, odd=0):
    for num in str(number):
        if int(num) % 2 == 0:
            even += 1
        else:
            odd += 1
    return f'Количество четных и нечетных цифр в числе равно: {even}, {odd}'


print(get_even_odd_count(100126546540))
print(get_even_odd_count_new(100126546540))

# пытался оптимизировать код избавившись от рекурсии, но цифры остались те же,
# вероятно, польза если и есть, то незначительная
# при этом для функции с рекурсией на каждый вызов строится таблица профилирования,
# а для функции без рекурсии одна
