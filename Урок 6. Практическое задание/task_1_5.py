"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта
"""
from pympler import asizeof
from numpy import array
# основы ДЗ 5 задание 3
# оптимизированная
tutors = array(['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена'])
classes = array(['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'])


def check_gen(teachers, clas):
    i = 0
    j = 0
    while i != len(clas):
        if j == clas[-1]:
            yield (None, clas[j])
            i += 1
            j += 1
        elif i == teachers[-1]:
            yield (teachers[i], None)
        else:
            yield (teachers[i], clas[j])
            i += 1
            j += 1
    return 0


generator = check_gen(tutors, classes)
for _ in range(len(tutors)):
    print(next(generator))

print(asizeof.asizeof(check_gen(tutors, classes)))
# 1048

# неоптимизиррованная
tutors_2 = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
classes_2 = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']


def check_gen_2(teachers, clas):
    i = 0
    j = 0
    while i != len(clas):
        if j == clas[-1]:
            yield (None, clas[j])
            i += 1
            j += 1
        elif i == teachers[-1]:
            yield (teachers[i], None)
        else:
            yield (teachers[i], clas[j])
            i += 1
            j += 1
    return 0


generator = check_gen_2(tutors, classes)
for _ in range(len(tutors)):
    print(next(generator))


print(asizeof.asizeof(check_gen_2(tutors_2, classes_2)))
# 1880

# Аrray из библиотеки numpy значительно сократило использование памяти