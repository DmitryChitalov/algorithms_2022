"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта
"""

from memory_profiler import memory_usage


def memory(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f"Выполнение {func.__name__} заняло {mem_diff} Mib")
        return res

    return wrapper

# Курс основ, урок 1, задание 2
# Вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7. Например, число «19 ^ 3 = 6859» будем
# включать в сумму, так как 6 + 8 + 5 + 9 = 28 – делится нацело на 7. Внимание: использовать только арифметические операции!
# К каждому элементу списка добавить 17 и заново вычислить сумму тех чисел из этого списка, сумма цифр которых делится
# нацело на 7.


def sum_digits(value):
    res = 0
    while value != 0:
        res += value % 10
        value //= 10
    return res


@memory
def initial_version():
    arr = [i ** 3 for i in range(1, 10000001, 2)]
    res1 = sum(filter(lambda num: sum_digits(num) % 7 == 0, arr))
    res2 = sum(filter(lambda num: sum_digits(num + 17) % 7 == 0, arr))
    print(res1)
    print(res2)


initial_version()


@memory
def optimized_version():
    print(sum(filter(lambda j: sum(map(int, str(j))) % 7 == 0, [i ** 3 for i in range(1, 10000001, 2)])))
    print(sum(filter(lambda j: sum(map(int, str(j + 17))) % 7 == 0, [i ** 3 for i in range(1, 10000001, 2)])))


optimized_version()

# Выполнение initial_version заняло 0.50390625 Mib
# Выполнение optimized_version заняло 0.0859375 Mib - использование функции map экономит память

