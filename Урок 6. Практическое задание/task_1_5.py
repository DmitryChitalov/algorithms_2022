"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта
"""

from memory_profiler import profile, memory_usage
from pympler.asizeof import asizeof


def memory(func):
    def wrapper(*args, **kwargs):
        start = memory_usage()
        my_func = func(*args)
        stop = memory_usage()
        result = stop[0] - start[0]
        return my_func, result

    return wrapper


@memory
def revers_num2(num, list1=''):
    count = len(str(num))
    if count == 1:
        print(str(list1) + str(num % 10))
    else:
        count -= 1
        list1 = str(list1) + str(num % 10)
        num //= 10
        return revers_num2(num, list1)


print(asizeof(revers_num2(3699632345543212548)))


@memory
def revers_num(num):
    revers = 0
    while num > 0:
        digit = num % 10
        num = num // 10
        revers = revers * 10
        revers = revers + digit

    print(revers)


print(asizeof(revers_num(3699632345543212548)))

'''Использовал цикл while, вместо рекурсии, так как занимет меньше оперативной памяти.
(1536 vs 96)'''
