"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта
"""

"""
В данном задании использовался код с задания:
Урок 2, задание 4
https://github.com/DmitryChitalov/algorithms_2022/pull/754
Уход от рекурсии к циклу (рекурсия обычно задействует гораздо больше памяти)
"""

from memory_profiler import memory_usage


def memory_diff(func):
    def wrapper(*args, **kwargs):
        md1 = memory_usage()
        res = func(*args)
        md2 = memory_usage()
        mdiff = md2[0] - md1[0]
        print(f"Выполнение заняло {mdiff} Mib")
        return res

    return wrapper


@memory_diff
def v4(x=-1, y=1, z=0.0):
    if x == -1:
        x = int(input('Укажите количество элементов:\n'))
    res = y
    if x == 1:
        return f'Сумма элементов = {res}'
    if z == 0:
        z = y / -2
    else:
        z = z / -2
    res += z
    return v4(x-1, res, z)


print(v4())


@memory_diff
def v5():
    mas = [1]
    n = 1
    num = int(input('Укажите количество элементов:\n')) - 1
    while num:
        n = n / -2
        mas.append(n)
        num -= 1
    return sum(mas)


print(v5())

"""
Для оптимизации памяти заменил рекурсию на цикл
Результаты при запуске скрипта

Укажите количество элементов:
3
Выполнение заняло 0.0 Mib
Выполнение заняло 0.0 Mib
Выполнение заняло 0.0234375 Mib
Сумма элементов = 0.75
Укажите количество элементов:
3
Выполнение заняло 0.0 Mib
0.75
"""