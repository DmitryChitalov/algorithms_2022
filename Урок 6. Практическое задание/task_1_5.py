"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта

Пользователь вводит результат спортсмена в первый день тренировок и желаемый результат тренировок. 
Необходимо рассчитать сколько спортсмен будет пробегать в последующие дни 
и на какой день достигнет желаемого результата.
Известно, что каждый день он пробегает на 10% больше, чем в предыдущий день.
"""
from memory_profiler import memory_usage


def memory(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f"Выполнение заняло {mem_diff} Mib")
        return res

    return wrapper


@memory
def func_1():
    distance = int(input('Введите результат спортсмена в первый день тренировок в км '))
    max_distance = int(input('Введите желаемый результат спортсмена в результате тренировок в км '))
    i = 1
    while distance <= max_distance:
        print(f'В {i} день тренировок спортсмен пробежит {distance} км.')
        distance = round((distance * 1.1), 2)
        i += 1

    print(f'На {i}-й день спортсмен достиг результата — не менее {max_distance} км.')


@memory
def func_2():
    distance = int(input('Введите результат спортсмена в первый день тренировок в км '))
    max_distance = int(input('Введите желаемый результат спортсмена в результате тренировок в км '))
    i = 1
    while distance <= max_distance:
        print(f'В {i} день тренировок спортсмен пробежит {distance} км.')
        distance = round((distance * 1.1), 2)
        i += 1
    del distance
    print(f'На {i}-й день спортсмен достиг результата — не менее {max_distance} км.')


func_1()
#func_2()

# Введите результат спортсмена в первый день тренировок в км 5
# Введите желаемый результат спортсмена в результате тренировок в км 10
# В 1 день тренировок спортсмен пробежит 5 км.
# В 2 день тренировок спортсмен пробежит 5.5 км.
# В 3 день тренировок спортсмен пробежит 6.05 км.
# В 4 день тренировок спортсмен пробежит 6.66 км.
# В 5 день тренировок спортсмен пробежит 7.33 км.
# В 6 день тренировок спортсмен пробежит 8.06 км.
# В 7 день тренировок спортсмен пробежит 8.87 км.
# В 8 день тренировок спортсмен пробежит 9.76 км.
# На 9-й день спортсмен достиг результата — не менее 10 км.
# Выполнение заняло 0.01953125 Mib


# Использование del:
# Введите результат спортсмена в первый день тренировок в км 5
# Введите желаемый результат спортсмена в результате тренировок в км 10
# В 1 день тренировок спортсмен пробежит 5 км.
# В 2 день тренировок спортсмен пробежит 5.5 км.
# В 3 день тренировок спортсмен пробежит 6.05 км.
# В 4 день тренировок спортсмен пробежит 6.66 км.
# В 5 день тренировок спортсмен пробежит 7.33 км.
# В 6 день тренировок спортсмен пробежит 8.06 км.
# В 7 день тренировок спортсмен пробежит 8.87 км.
# В 8 день тренировок спортсмен пробежит 9.76 км.
# На 9-й день спортсмен достиг результата — не менее 10 км.
# Выполнение заняло 0.0 Mib

# Удаление временной переменной distance привело к экономии памяти.