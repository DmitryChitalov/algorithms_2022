"""
5. Подумайте, как можно сделать оптимизацию кода по памяти, по скорости.
Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать из этих элементов список с сохранением порядка их следования в исходном списке, например:
src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
result = [23, 1, 3, 10, 4, 11]
"""

"""
Это пятое задание из курса основ, урок на тему генераторов, lc, comprehensions

Испоьзовал Counter из collections, избавился от создания лишних множеств, что привело к уменьшению занимаемой памяти

Filename: C:\python_projects\Algoritm\lesson_6\task_1\task_1_5.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     20.7 MiB     20.7 MiB           1   @profile()
    13                                         def get_uniq_numbers(data: list):
    14     20.7 MiB      0.0 MiB           1       unique_nums = set()
    15     20.7 MiB      0.0 MiB           1       tmp = set()
    16     21.8 MiB      0.0 MiB       40001       for el in data:
    17     21.8 MiB      0.0 MiB       40000           if el not in tmp:
    18     21.8 MiB      0.4 MiB        9804               unique_nums.add(el)
    19                                                 else:
    20     21.8 MiB      0.0 MiB       30196               unique_nums.discard(el)
    21     21.8 MiB      0.7 MiB       40000           tmp.add(el)
    22                                         
    23     21.8 MiB      0.0 MiB       40003       unique_nums_ord = [el for el in src if el in unique_nums]
    24                                         
    25     21.8 MiB      0.0 MiB           1       return unique_nums_ord


8775 374 8987 811 6143 1269 117 8620 2685 6166 8601 3775 2248 6317 9119 8631 3253 9239 2445 36 1191 4717 2284 6296 8586 7537 2810 6101 8123 2401 4252 612 5690 2770 716 8866 1584 1176 135 6286 8 534 5210 30 1706 863 7217 5309 3362 2878 258 8598 3277 957 6713 8865 9978 6174 7958 3121 7997 8354 4723 1198 7765 8218 2324 2308 7918 774 3308 3190 9869 301 5251 4108 447 6168 6073 7631 6220 7497 8591 5074 6578 8614 2915 1264 4371 1213 9894 2976 6472 3333 8724 1210 929 5568 9408 161 5234 5241 7276 8162 201 1215 2049 8967 1259 7978 7470 4531 2406 6083 6446 7132 2323 5864 2719 5281 9855 7034 8950 3491 9109 9510 1487 5819 9255 4012 6197 7124 7835 8258 2601 3509 5734 6547 4211 4086 2370 2551 5514 1216 4611 3268 8264 4406 3665 3347 2186 7163 5700 7833 8244 1243 2083 1057 5225 9266 1807 2222 7542 9081 3493 1424 3842 3082 631 2195 2712 1354 2287 5841 5232 1496 3152 5739 4343 485 1633 7737 2675 5794 9877 2661 8138 3527 1683 3966 678 6337 8167 6226 760 1067 4494 5438 8130 970 6431 2405 5509 7145 5852 4131 9301 6061 1524 9042 5064 3206 7897 3576 9485 3133 8925 9501 4665 3523 6370 3707 9882 953 1192 4928 6536 4802 2874 2927 3426 7771 6132 2341 4021 655 5020 9613 6546 4978 5166 4713 8418 6951 536 7832 4558 5862 3140 7859 8720 8741 9075 9920 1794 2306 6253 4433 2596 5664 3591 2187 2193 4342 3935 9827 6465 1646 191 9884 4953 8652 1287 5518 9354 7342 3902 9183 9327 6845 565 4476 6213 8066 526 2055 878 5694 4625 6510 0 8850 7603 2093 5076 5383 8109 1070 2832 2544 1734 300 684 7027 6039 9725 3799 9360 7064 7881 8571 5498 7238 4836 5692 31 1035 6422 937 5979 1007 4452 282 9359 6145 9634 6309 5586 164 5535 4850 6473 9349 3708 6474 872 1313 5963 1238 633 4436 2962 6859 6115 9518 5928 6841 738 3420 7065 4415 1922 430 4788 443 9738 2174 6639 520 701 7448 8525 1495 6512 755 7432 5422 3986 1127 4306 646 8081 4710 830 7628 9698 157 3642 5527 1781 5470 9826 9885 2848 3201 1898 6808 8208 6078 4977 6262 8255 9160 5466 2221 7242 2838 9503 9186 1060 7157 2855 9787 1229 854 65 8056 7090 1814 4390 5148 5267 6441 7732 295 2952 2678 9439 4776 532 8145 1090 4785 7558 4318 2688 1098 739 5353 5528 6203 7062 9558 2382 6660 4950 8944 2037 1628 6677 6642 8647 6572 2740 3282 2305 7935 1382 3336 7511 156 8778 9419 2267 9811 9653 2861 4852 6273 3786 2892 7483 9372 8783 2867 4658 6884 57 6745 5181 9669 5009 2793 8638 8352 9862 7586 5830 2168 5491 9946 6641 5143 9163 8666 2799 2600 1115 627 8976 8579 3317 5684 9605 1177 7434 6329 2615 1180 3791 7352 2959 4018 1566 6707 34 1616 6373 6954 3650 3963 4241 5332 1560 8243 5039 4597 8282 8530 3215 6848 5516 8305 931 3638 6514 5593 230 6040 1150 7814 8874 7642 2993 3875 702 1469 7671 5198 7324 5800 6217 2965 192 5471 2056 2145 5876 5256 4629 7264 1613 9430 1149 4329 1927 7552 3547 4143 9506 3477 9872 521 5946 8782 8991 7150 9766 2964 414 5032 1033 2570 2007 7643 9121 8417 6664 991 9967 4570 6634 587 4100 9498 3549 8323 8461 3511 7086 8764 6485 2061 2203 3857 6281 102 8304 8676 4256 8760 2605 2226 3937 7908 3960 4321 4203 3733 546 5266 9527 7289 3230 531 6895 6579 6935 9305 3492 7762 5762 1506 3939 5364 2720 2921 5257 9825 9961 290 1612 5245 3880 6367 5704 309 4047 392 9396 3315 3246 7388 737 9106 5381 4560 2075 8028 214 8882 3968 3102 9779 9172 5735 1716 9794 9089 2664 5 3778 5719 8901 53 2099 7125 3532 595 6230 3375 9966 6306 7221 4965 4375 5626 7266 4640 7667 1855 4157 1518 4929 2727 9507 7868 6100 7682 1080 6496 7672 8049 1172 8607 2856 2812 8603 2082 3265 9377 5296 8931 5786 4048 3064 <class 'list'>
Filename: C:\python_projects\Algoritm\lesson_6\task_1\task_1_5.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    32     20.7 MiB     20.7 MiB           1   @profile()
    33                                         def uniq_num(data):
    34     21.3 MiB      0.6 MiB           1       count = Counter(data)
    35     21.3 MiB      0.0 MiB        9807       uniq_num_list = [el for el in count if count[el] == 1]
    36     21.3 MiB      0.0 MiB           1       return uniq_num_list


[8775, 374, 8987, 811, 6143, 1269, 117, 8620, 2685, 6166, 8601, 3775, 2248, 6317, 9119, 8631, 3253, 9239, 2445, 36, 1191, 4717, 2284, 6296, 8586, 7537, 2810, 6101, 8123, 2401, 4252, 612, 5690, 2770, 716, 8866, 1584, 1176, 135, 6286, 8, 534, 5210, 30, 1706, 863, 7217, 5309, 3362, 2878, 258, 8598, 3277, 957, 6713, 8865, 9978, 6174, 7958, 3121, 7997, 8354, 4723, 1198, 7765, 8218, 2324, 2308, 7918, 774, 3308, 3190, 9869, 301, 5251, 4108, 447, 6168, 6073, 7631, 6220, 7497, 8591, 5074, 6578, 8614, 2915, 1264, 4371, 1213, 9894, 2976, 6472, 3333, 8724, 1210, 929, 5568, 9408, 161, 5234, 5241, 7276, 8162, 201, 1215, 2049, 8967, 1259, 7978, 7470, 4531, 2406, 6083, 6446, 7132, 2323, 5864, 2719, 5281, 9855, 7034, 8950, 3491, 9109, 9510, 1487, 5819, 9255, 4012, 6197, 7124, 7835, 8258, 2601, 3509, 5734, 6547, 4211, 4086, 2370, 2551, 5514, 1216, 4611, 3268, 8264, 4406, 3665, 3347, 2186, 7163, 5700, 7833, 8244, 1243, 2083, 1057, 5225, 9266, 1807, 2222, 7542, 9081, 3493, 1424, 3842, 3082, 631, 2195, 2712, 1354, 2287, 5841, 5232, 1496, 3152, 5739, 4343, 485, 1633, 7737, 2675, 5794, 9877, 2661, 8138, 3527, 1683, 3966, 678, 6337, 8167, 6226, 760, 1067, 4494, 5438, 8130, 970, 6431, 2405, 5509, 7145, 5852, 4131, 9301, 6061, 1524, 9042, 5064, 3206, 7897, 3576, 9485, 3133, 8925, 9501, 4665, 3523, 6370, 3707, 9882, 953, 1192, 4928, 6536, 4802, 2874, 2927, 3426, 7771, 6132, 2341, 4021, 655, 5020, 9613, 6546, 4978, 5166, 4713, 8418, 6951, 536, 7832, 4558, 5862, 3140, 7859, 8720, 8741, 9075, 9920, 1794, 2306, 6253, 4433, 2596, 5664, 3591, 2187, 2193, 4342, 3935, 9827, 6465, 1646, 191, 9884, 4953, 8652, 1287, 5518, 9354, 7342, 3902, 9183, 9327, 6845, 565, 4476, 6213, 8066, 526, 2055, 878, 5694, 4625, 6510, 0, 8850, 7603, 2093, 5076, 5383, 8109, 1070, 2832, 2544, 1734, 300, 684, 7027, 6039, 9725, 3799, 9360, 7064, 7881, 8571, 5498, 7238, 4836, 5692, 31, 1035, 6422, 937, 5979, 1007, 4452, 282, 9359, 6145, 9634, 6309, 5586, 164, 5535, 4850, 6473, 9349, 3708, 6474, 872, 1313, 5963, 1238, 633, 4436, 2962, 6859, 6115, 9518, 5928, 6841, 738, 3420, 7065, 4415, 1922, 430, 4788, 443, 9738, 2174, 6639, 520, 701, 7448, 8525, 1495, 6512, 755, 7432, 5422, 3986, 1127, 4306, 646, 8081, 4710, 830, 7628, 9698, 157, 3642, 5527, 1781, 5470, 9826, 9885, 2848, 3201, 1898, 6808, 8208, 6078, 4977, 6262, 8255, 9160, 5466, 2221, 7242, 2838, 9503, 9186, 1060, 7157, 2855, 9787, 1229, 854, 65, 8056, 7090, 1814, 4390, 5148, 5267, 6441, 7732, 295, 2952, 2678, 9439, 4776, 532, 8145, 1090, 4785, 7558, 4318, 2688, 1098, 739, 5353, 5528, 6203, 7062, 9558, 2382, 6660, 4950, 8944, 2037, 1628, 6677, 6642, 8647, 6572, 2740, 3282, 2305, 7935, 1382, 3336, 7511, 156, 8778, 9419, 2267, 9811, 9653, 2861, 4852, 6273, 3786, 2892, 7483, 9372, 8783, 2867, 4658, 6884, 57, 6745, 5181, 9669, 5009, 2793, 8638, 8352, 9862, 7586, 5830, 2168, 5491, 9946, 6641, 5143, 9163, 8666, 2799, 2600, 1115, 627, 8976, 8579, 3317, 5684, 9605, 1177, 7434, 6329, 2615, 1180, 3791, 7352, 2959, 4018, 1566, 6707, 34, 1616, 6373, 6954, 3650, 3963, 4241, 5332, 1560, 8243, 5039, 4597, 8282, 8530, 3215, 6848, 5516, 8305, 931, 3638, 6514, 5593, 230, 6040, 1150, 7814, 8874, 7642, 2993, 3875, 702, 1469, 7671, 5198, 7324, 5800, 6217, 2965, 192, 5471, 2056, 2145, 5876, 5256, 4629, 7264, 1613, 9430, 1149, 4329, 1927, 7552, 3547, 4143, 9506, 3477, 9872, 521, 5946, 8782, 8991, 7150, 9766, 2964, 414, 5032, 1033, 2570, 2007, 7643, 9121, 8417, 6664, 991, 9967, 4570, 6634, 587, 4100, 9498, 3549, 8323, 8461, 3511, 7086, 8764, 6485, 2061, 2203, 3857, 6281, 102, 8304, 8676, 4256, 8760, 2605, 2226, 3937, 7908, 3960, 4321, 4203, 3733, 546, 5266, 9527, 7289, 3230, 531, 6895, 6579, 6935, 9305, 3492, 7762, 5762, 1506, 3939, 5364, 2720, 2921, 5257, 9825, 9961, 290, 1612, 5245, 3880, 6367, 5704, 309, 4047, 392, 9396, 3315, 3246, 7388, 737, 9106, 5381, 4560, 2075, 8028, 214, 8882, 3968, 3102, 9779, 9172, 5735, 1716, 9794, 9089, 2664, 5, 3778, 5719, 8901, 53, 2099, 7125, 3532, 595, 6230, 3375, 9966, 6306, 7221, 4965, 4375, 5626, 7266, 4640, 7667, 1855, 4157, 1518, 4929, 2727, 9507, 7868, 6100, 7682, 1080, 6496, 7672, 8049, 1172, 8607, 2856, 2812, 8603, 2082, 3265, 9377, 5296, 8931, 5786, 4048, 3064]

Process finished with exit code 0
 
"""

from memory_profiler import profile
from collections import Counter
from random import randint


@profile()
def get_uniq_numbers(data: list):
    unique_nums = set()
    tmp = set()
    for el in data:
        if el not in tmp:
            unique_nums.add(el)
        else:
            unique_nums.discard(el)
        tmp.add(el)

    unique_nums_ord = [el for el in src if el in unique_nums]

    return unique_nums_ord


src = [randint(0, 10000) for x in range(40000)]
print(*get_uniq_numbers(src), type(get_uniq_numbers(src)))


@profile()
def uniq_num(data):
    count = Counter(data)
    uniq_num_list = [el for el in count if count[el] == 1]
    return uniq_num_list

print(uniq_num(src))
