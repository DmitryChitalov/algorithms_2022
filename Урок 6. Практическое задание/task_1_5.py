"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта:
"""
#################################################################################
"""
Задание №2. Из курса основ Python.
Реализовать класс Road (дорога).
определить атрибуты: length (длина), width (ширина);
значения атрибутов должны передаваться при создании экземпляра класса;
атрибуты сделать защищёнными;
определить метод расчёта массы асфальта, необходимого для покрытия всей дороги;
использовать формулу: длина*ширина*масса асфальта для покрытия одного кв. метра дороги асфальтом,
толщиной в 1 см*число см толщины полотна; проверить работу метода.
"""
from pympler import asizeof


# решение исходное:
class Road:

    def __init__(self, _length, _width):
        self._length = _length
        self._width = _width

    def mass(self, mass_as):
        return self._length * self._width * mass_as


road_obj = Road(20, 5000)
print(road_obj.mass(125))
print(asizeof.asizeof(road_obj))


# решение оптимизированное:
class Road:
    __slots__ = ['_length', '_width']

    def __init__(self, _length, _width):
        self._length = _length
        self._width = _width

    def mass(self, mass_as):
        return self._length * self._width * mass_as


road_obj = Road(20, 5000)
print(road_obj.mass(125))
print(asizeof.asizeof(road_obj))

"""
Аналитика:
Использовал слоты для сохранения атрибутов в менее затратном по памяти
контейнере – списке, кортеже.
В результате сократилось в три раза использование памяти.
"""
