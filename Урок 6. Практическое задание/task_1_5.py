"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта
"""
import numpy
from memory_profiler import profile

"""
Взял задание с курса алгоритмы 
Сравнил 4е возможных метода добавления информацию
в словарь, в массив, в nampy массив и добавление через генератор
Лушче всего себя показали nampy и геенраторы. Они меньше всего используют памяти
"""

mas = []
diction = {}


# А Заполнение элементами
@profile
def fill_list():
    for i in range(1, 100000):
        mas.append(i)
    return


@profile
def fill_numpy():
    a = numpy.array([])
    for i in range(1, 100000):
        numpy.append(a, i)
    return


@profile
def fill_dic():
    for i in range(1, 100000):  # O(n)
        diction[i] = i  # O(1)
    return


@profile
def fill_gen():
    a = (a.append(i) for i in (range(1, 100000)))
    return


print("Лист")
fill_list()
print("Numpy")
fill_numpy()
print("Словарь")
fill_dic()
print("Генератор")
fill_gen()
