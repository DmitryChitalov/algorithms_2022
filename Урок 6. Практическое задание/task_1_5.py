"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта
"""
from random import randint
from collections import Counter
from memory_profiler import memory_usage


"""
Необходимо найти число, которое встречается в массиве чаще всего
"""


def memory_decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args, **kwargs)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f'Выполнение функции {func.__name__} заняло {mem_diff} Mib')
        return res
    return wrapper


@memory_decor
def func_3(arr):
    max_count_elem = max(arr, key=arr.count)
    max_count = arr.count(max_count_elem)
    return f'Число {max_count_elem} встречается чаще всего: {max_count} раз(а)'


@memory_decor
def count_num(arr):
    return Counter(arr).most_common(1)


array = [3, 1, 1, 3, 4, 5, 1]
for i in range(10000):
    array.append(randint(0, 20))

print(func_3(array))
print(count_num(array))
"""
Выполнение функции func_3 заняло 0.0078125 Mib
Число 6 встречается чаще всего: 504 раз(а)
Выполнение функции count_num заняло 0.0 Mib
[(6, 504)]
Решение оптимизировано с помощью класса Counter из модуля collections.
"""
