"""
Задание 2.

Попытайтесь выполнить профилирование памяти в любом скрипте с рекурсией.

Вам нужно обнаружить проблему в процессе этого. Но проблема связана не с тем,
что рекурсия потребляет много памяти, а с самим процессом замеров.

Опищите эту проблему и найдите простой путь ее решения.
Опишите этот путь и покажите его применение.
"""

from memory_profiler import profile

# Пример из ДЗ 2, Задания 4 по Алгоритмам, где нужно найти сумму ряда 1 -0.5 0.25 -0.125... длиной n


#@profile
def sum_of_seq(a, n):
    if n == 0:
        return 0
    return a + sum_of_seq(a / -2, n - 1)

# print(sum_of_seq(1, 6)

# Проблема, если просто декорировать рекурсивную функцию декоратором profile, замеры памяти будут происходить и
# выводиться отдельно при каждом вызове функции в рекурсии, что создаст много таблиц


@profile
def solution(a, n):
    return sum_of_seq(a, n)


print(solution(1, 6))

# Обернув вызов рекурсивной функции в другую функцию, декоратор посчитает память всей функции solution(), а функция
# sum_of_seq() закончит работу внутри этой функции, не вызывая лишний раз декоратор
