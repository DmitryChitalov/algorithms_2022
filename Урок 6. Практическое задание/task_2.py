"""
Задание 2.

Попытайтесь выполнить профилирование памяти в любом скрипте с рекурсией.

Вам нужно обнаружить проблему в процессе этого. Но проблема связана не с тем,
что рекурсия потребляет много памяти, а с самим процессом замеров.

Опищите эту проблему и найдите простой путь ее решения.
Опишите этот путь и покажите его применение
"""


"""
Урок 2.  Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


from memory_profiler import profile


@profile
def recursion(num, even=0, diseven=0):
    def digits(num, even=0, diseven=0):
        if num == 0:
          return f'Количество четных и нечетных цифр в числе равно: ({even}, {diseven})'
        else:
            digit = num % 10
            num = num // 10
            if digit % 2 == 0:
                even += 1
            else:
                diseven += 1
    return digits(num, even, diseven)


try:
    num = int(input('Введите натуральное число: '))
    print(recursion(num))
except ValueError:
    print("Вы вместо числа ввели строку")


'''
Проблема заключается в том, что на каждый вызов рекурсии выводится таблица.
Решение - обернуть рекурсивную функцию и замерить эту внешнюю функцию
'''