"""
Задание 2.

Попытайтесь выполнить профилирование памяти в любом скрипте с рекурсией.

Вам нужно обнаружить проблему в процессе этого. Но проблема связана не с тем,
что рекурсия потребляет много памяти, а с самим процессом замеров.

Опищите эту проблему и найдите простой путь ее решения.
Опишите этот путь и покажите его применение
"""

"""
В данном задании использовался код с задания:
Урок 2, задание 2
https://github.com/DmitryChitalov/algorithms_2022/pull/754
Уход от рекурсии к циклу (рекурсия обычно задействует гораздо больше памяти)
"""

from memory_profiler import profile

@profile
def dec(func):
    def wrapper(*args, **kwargs):
        result = func(*args)
        return result
    return wrapper


@dec
def v2(digit, x=0, y=0):
    lastnum = digit % 10
    nextnum = digit // 10
    if nextnum == 0:
        if digit % 2 == 0:
            x += 1
        else:
            y += 1
        return f'Количество четных и нечетных цифр в числе равно: ({x}, {y})'
    if lastnum % 2 == 0:
        x += 1
    else:
        y += 1
    return v2(nextnum, x, y)


print(v2(58923556))

"""
Профилирование функций с рекурсией возможно, однако, на каждый возврат рекурсией будет выводится строка с информацией о используемой в данный момент памяти,
что при большом количестве возвратов приведет к нечитабельности результатов профилирования
В качестве альтернативного способа профилирования, я использовал простейший декоратор, в который обернул рекурсивную функцию 
и профилирую результат работы самого декоратора с помошью другого декоратора profile
"""