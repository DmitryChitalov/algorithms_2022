"""
Задание 1.
Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""

from random import randint
from timeit import timeit


def bubble_sort(lst, n=1, count=0):
    while n < len(lst):
        for i in range(len(lst) - n):
            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
        n += 1
        count += 1
    return {f'Количество итераций = {count}': lst}


def bubble_sort_v2(lst, n=1, check=True, count=0):
    while n < len(lst) and check:
        check = False
        for i in range(len(lst) - n):
            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
                check = True
        n += 1
        count += 1
    return {f'Количество итераций = {count}': lst}


orig_list_10 = [randint(-100, 100) for _ in range(10)]
orig_list_100 = [randint(-100, 100) for _ in range(100)]
orig_list_1000 = [randint(-100, 100) for _ in range(1000)]

print(f'Исходный массив: {orig_list_10}\n'
      f'Отсортированный массив обычным пузырьковым методом: {bubble_sort(orig_list_10[:])}\n'
      f'Отсортированный массив модифицированным пузырьковым методом: {bubble_sort_v2(orig_list_10[:])}')

print(timeit("bubble_sort(orig_list_10[:])", globals=globals(), number=1000))
print(timeit("bubble_sort_v2(orig_list_10[:])", globals=globals(), number=1000))
print(timeit("bubble_sort(orig_list_100[:])", globals=globals(), number=1000))
print(timeit("bubble_sort_v2(orig_list_100[:])", globals=globals(), number=1000))
print(timeit("bubble_sort(orig_list_1000[:])", globals=globals(), number=1000))
print(timeit("bubble_sort_v2(orig_list_1000[:])", globals=globals(), number=1000))

"""
Списки сортируются по убыванию.
В v2 добавлена проверка "холостого" прохода по списку с последующим выходом из цикла.
Также в функции добавлен счётчик количества проходов по списку, т.к. при чистом сравнении времени выполнения неочевидно
преимущество модификации.

Вывод результатов сортировки:
Исходный массив: [55, -48, 8, 71, -76, 24, -9, 14, -48, -70]
Отсортированный массив обычным пузырьковым методом: {'Количество итераций = 9': [71, 55, 24, 14, 8, -9, -48, -48, -70, -76]}
Отсортированный массив модифицированным пузырьковым методом: {'Количество итераций = 5': [71, 55, 24, 14, 8, -9, -48, -48, -70, -76]}

Результаты измерений:
0.005173110999749042
0.005185183000321558
0.3867539700004272
0.41736651999963215
42.53644892899956
43.429200018999836
"""
