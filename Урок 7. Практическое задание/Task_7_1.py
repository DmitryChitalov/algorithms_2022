"""

Задание 1.
Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции.
Обязательно доработайте алгоритм (сделайте его умнее)!
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.
Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

"""


from random import randint
from timeit import timeit


def bubble(array):
    n = len(array)
    for i in range(n-1):
        for j in range(n-i-1):
            if array[j] < array[j+1]:
                buff = array[j]
                array[j] = array[j+1]
                array[j+1] = buff


def bubble_rev(array):
    n = len(array)
    for i in range(n-1):
        flag = True
        for j in range(n-i-1):
            if array[j] < array[j+1]:
                buff = array[j]
                array[j] = array[j+1]
                array[j+1] = buff
                flag = False
        if flag:
            break


arr = [randint(-100, 100) for _ in range(1000)]
# print('Исходный массив:', arr)
# bubble_rev(arr)
# print('Отсортированный массив:', arr)


# Замеры на массивах разной длины:

test_nums = (100, 1000)

test_arrays = tuple([randint(-100, 100) for _ in range(num)] for num in test_nums)
test_arrays1 = [randint(-100, 100) for _ in range(100)]

print('\nОбычная функция:')
for arr in test_arrays:
    print(f'Массив на {len(arr)} элементов: {timeit("bubble(arr[:])", globals=globals(), number=100)}')

print('\nДоработанная функция:')
for arr in test_arrays:
    print(f'Массив на {len(arr)} элементов: {timeit("bubble_rev(arr[:])", globals=globals(), number=100)}')

print('\nОбычная функция 2 вторая попытка:')
print(
    timeit(
        "bubble(test_arrays1)", globals=globals(), number=100))
print('\nДоработанная функция 2 вторая попытка с уже отсортированным массивом :')
print(
    timeit(
        "bubble_rev(test_arrays1)", globals=globals(), number=100))

"""
Обычная функция:
Массив на 100 элементов: 0.0603775
Массив на 1000 элементов: 5.8708311

Доработанная функция:
Массив на 100 элементов: 0.04946110000000026
Массив на 1000 элементов: 5.912123299999999

Обычная функция 2 вторая попытка:
0.026380200000000187

Доработанная функция 2 вторая попытка с уже отсортированным массивом :
0.0005436000000003105

Во доработанной функции есть условие, что если за проход не было замен, работа функции останавливается
во второй попытке видно, что с отсортированным массивом работа фунции завершается быстрее, однако при обработке 
одинаковых массивов время работы функций сопостовимо.


"""

