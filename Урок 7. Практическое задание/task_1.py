"""
Задание 1.

Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""
from random import randint
from timeit import timeit

m = list(randint(-100, 100) for _ in range(100))
print(m)


def bubble_sort(m):
    n = 1
    count = 0
    while n < len(m):
        for i in range(len(m)-n):
            if m[i] < m[i+1]:
                m[i], m[i+1] = m[i+1], m[i]
            count += 1
        n += 1
    return m, count


def bubble_sort_smart(m):
    n = 1
    count = 0
    while n < len(m):
        count_act = True
        for i in range(len(m)-n):
            if m[i] < m[i+1]:
                m[i], m[i+1] = m[i+1], m[i]
                count_act = False
            count += 1
        n += 1
        if count_act:
            return m, count
    return m


print(
    timeit(
        "bubble_sort(m[:])",
        globals=globals(),
        number=1000))
print(bubble_sort(m[:]))
print(
    timeit(
        "bubble_sort_smart(m[:])",
        globals=globals(),
        number=1000))
print(bubble_sort_smart(m[:]))

'''
результат:
[44, -75, -79, 91, -70, 87, 48, -15, -26, 14, 14, 54, -99, -20, -86, 2, -37, -29, 86, -100, -88, 85, -49, -6, -51, -55, 
89, 84, -96, 91, 83, 25, -22, -57, 44, -50, 36, 53, -27, 54, 27, -45, -5, -53, 7, -81, 66, 85, -23, 92, 62, 86, 69, -37, 
36, -12, 52, 71, 12, -74, 24, 55, -90, -11, -59, -11, 13, 67, 28, 47, -46, -95, 20, 5, 54, 46, 56, 57, -71, 54, -48, 33, 
23, -41, -3, -1, 81, -8, -67, -51, -99, 24, 66, 75, 39, 13, -6, 52, -98, 4]
0.590418600011617
([92, 91, 91, 89, 87, 86, 86, 85, 85, 84, 83, 81, 75, 71, 69, 67, 66, 66, 62, 57, 56, 55, 54, 54, 54, 54, 53, 52, 52, 48, 
47, 46, 44, 44, 39, 36, 36, 33, 28, 27, 25, 24, 24, 23, 20, 14, 14, 13, 13, 12, 7, 5, 4, 2, -1, -3, -5, -6, -6, -8, -11, 
-11, -12, -15, -20, -22, -23, -26, -27, -29, -37, -37, -41, -45, -46, -48, -49, -50, -51, -51, -53, -55, -57, -59, -67, 
-70, -71, -74, -75, -79, -81, -86, -88, -90, -95, -96, -98, -99, -99, -100], 4950)
0.5786457000067458
([92, 91, 91, 89, 87, 86, 86, 85, 85, 84, 83, 81, 75, 71, 69, 67, 66, 66, 62, 57, 56, 55, 54, 54, 54, 54, 53, 52, 52, 48, 
47, 46, 44, 44, 39, 36, 36, 33, 28, 27, 25, 24, 24, 23, 20, 14, 14, 13, 13, 12, 7, 5, 4, 2, -1, -3, -5, -6, -6, -8, -11, 
-11, -12, -15, -20, -22, -23, -26, -27, -29, -37, -37, -41, -45, -46, -48, -49, -50, -51, -51, -53, -55, -57, -59, -67, 
-70, -71, -74, -75, -79, -81, -86, -88, -90, -95, -96, -98, -99, -99, -100], 4797)

Из замеров мы видим, что сделав функцию умнее мы сокращаем количество лишних циклов с 4950 до 4797,
соответственно время выполнения сокращаем с 0,59 до 0,57.
Наибольший эффект от умной функции мы получим если подадим на вход функции уже отсортированный список.

'''