"""
Задание 1.

Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""

from random import randint
from timeit import timeit

'''Изначальная функция сортировки по убыванию пузырем'''

def bubble_sort(my_array):
    n = 1
    while n < len(my_array):
        for i in range(len(my_array)-n):
            if my_array[i] < my_array[i+1]:
                my_array[i], my_array[i+1] = my_array[i+1], my_array[i]
        n += 1
    return my_array

'''Доработанная функция сортировки по убыванию пузырем - с флагом array_changed'''

def bubble_sort_2(my_array):
    n = 1
    while n < len(my_array):
        array_changed = False
        for i in range(len(my_array)-n):
            if my_array[i] < my_array[i+1]:
                my_array[i], my_array[i+1] = my_array[i+1], my_array[i]
                array_changed = True
        if not array_changed:
            break
        n += 1
    return my_array

'''Массив из 100 чисел на промежутке от -100 до 100'''

my_array = [randint(-100, 100) for _ in range(100)]

time_1 = timeit(
    'bubble_sort(my_array[:])',
    globals=globals(),
    number=1000)

time_2 = timeit(
    'bubble_sort_2(my_array[:])',
    globals=globals(),
    number=1000)

print(f'Original array - {my_array}')
print(f'Resulting array for bubble_sort - {bubble_sort(my_array[:])}')
print(f'Resulting array for bubble_sort_2 - {bubble_sort(my_array[:])}')
print(f'Resulting time for bubble_sort - {time_1}')
print(f'Resulting time for bubble_sort_2 - {time_2}')

'''
Результат:

Original array - [90, 95, -45, 63, -39, -85, -72, -21, -81, -44, -9, -31, -60, -9, 48, -59, -57, -67, -78, -90, 19, -40, 8, -47, -40, -90, -59, -95, -20, 13, -1, -25, 48, -31, -58, -3, -25, 22, -68, -86, 24, -20, -44, -72, -21, -9, -13, -6, 11, 39, 51, 47, 98, 54, 36, 14, 51, 95, -67, 46, 64, -49, -6, -2, 5, 33, 65, -48, -74, 79, -47, 4, -36, 80, 12, 90, -90, 14, -86, -71, -56, 34, 92, 24, -39, -89, 21, -20, -14, 85, 79, -28, -18, 21, 27, 96, -92, 62, 38, 91]
Resulting array for bubble_sort - [98, 96, 95, 95, 92, 91, 90, 90, 85, 80, 79, 79, 65, 64, 63, 62, 54, 51, 51, 48, 48, 47, 46, 39, 38, 36, 34, 33, 27, 24, 24, 22, 21, 21, 19, 14, 14, 13, 12, 11, 8, 5, 4, -1, -2, -3, -6, -6, -9, -9, -9, -13, -14, -18, -20, -20, -20, -21, -21, -25, -25, -28, -31, -31, -36, -39, -39, -40, -40, -44, -44, -45, -47, -47, -48, -49, -56, -57, -58, -59, -59, -60, -67, -67, -68, -71, -72, -72, -74, -78, -81, -85, -86, -86, -89, -90, -90, -90, -92, -95]
Resulting array for bubble_sort_2 - [98, 96, 95, 95, 92, 91, 90, 90, 85, 80, 79, 79, 65, 64, 63, 62, 54, 51, 51, 48, 48, 47, 46, 39, 38, 36, 34, 33, 27, 24, 24, 22, 21, 21, 19, 14, 14, 13, 12, 11, 8, 5, 4, -1, -2, -3, -6, -6, -9, -9, -9, -13, -14, -18, -20, -20, -20, -21, -21, -25, -25, -28, -31, -31, -36, -39, -39, -40, -40, -44, -44, -45, -47, -47, -48, -49, -56, -57, -58, -59, -59, -60, -67, -67, -68, -71, -72, -72, -74, -78, -81, -85, -86, -86, -89, -90, -90, -90, -92, -95]
Resulting time for bubble_sort - 0.8507985340038431
Resulting time for bubble_sort_2 - 0.8351431050032261

Результаты получились похожие - доработанная функция отработала чуть быстрее, но разница незначительная
'''

'''А теперь попробуем на уже отсортированном массиве'''

my_array_2 = [i for i in reversed(range(100))]

time_3 = timeit(
    'bubble_sort(my_array_2[:])',
    globals=globals(),
    number=1000)

time_4 = timeit(
    'bubble_sort_2(my_array_2[:])',
    globals=globals(),
    number=1000)

print(f'Original array - {my_array_2}')
print(f'Resulting array for bubble_sort - {bubble_sort(my_array_2[:])}')
print(f'Resulting array for bubble_sort_2 - {bubble_sort(my_array_2[:])}')
print(f'Resulting time for bubble_sort - {time_3}')
print(f'Resulting time for bubble_sort_2 - {time_4}')

'''
Original array - [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
Resulting array for bubble_sort - [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
Resulting array for bubble_sort_2 - [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
Resulting time for bubble_sort - 0.372253475994512
Resulting time for bubble_sort_2 - 0.005370318998757284

Вот тут уже видно, что доработанная функции справляется сильно быстрее.

Получается чем меньше изначальный массив (то есть тем выше вероятность, что массив изначально правильно отсортирован), тем более осмысленно использовать доработанную функцию
'''
