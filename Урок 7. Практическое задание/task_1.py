"""
Задание 1.

Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""
from random import randint
from timeit import timeit


def bubble_fst(lst):
    n = 1

    while n < len(lst):
        for i in range(len(lst) - 1):
            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
        n = n + 1
    return f'{lst}'


def bubble_snd(lst):
    n = 1
    while n < len(lst):
        count = 0
        for i in range(len(lst) - 1):
            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
                count = count + 1
        if count == 0:
            break
        else:
            n = n + 1
    return f'{lst}'


my_lst = [randint(-100, 100) for _ in range(30)]
print(my_lst)
print(bubble_fst(my_lst))

my_lst = [randint(-100, 100) for _ in range(50)]
print(my_lst)
print(bubble_snd(my_lst))

my_lst = [randint(-100, 100) for _ in range(50)]
print(timeit("bubble_fst(my_lst[:])", globals=globals(), number=1000))
print(timeit("bubble_snd(my_lst[:])", globals=globals(), number=1000))

"""
Массив 500 элементов
47.7715118000051
39.248042899998836

Массив 100 элементов
1.6239667999907397
1.475253500015242

Массив 50 элементов
0.4158721000130754
0.38909939999575727

На массивах небольшого размера, обычная сортировка пузырьком сильно не отличается по времени от 
модифицированной. Чем больше массив, тем больше заметна разница,  
"""
