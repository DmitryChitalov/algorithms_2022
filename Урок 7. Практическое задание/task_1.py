"""
Задание 1.
Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции.
Обязательно доработайте алгоритм (сделайте его умнее)!
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.
Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""

from random import randint
from timeit import timeit

def bubble_sort(lst_obj):
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            # знак < или > меняет направление сортировки
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
        n += 1
    return lst_obj


def bubble_sort_opt(lst_obj):
    n = 1
    while n < len(lst_obj):
        f = True
        for i in range(len(lst_obj)-n):
            # знак < или > меняет направление сортировки
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                f = False
        if f:
            return lst_obj
        n += 1

    return lst_obj


# замеры 20
orig_list = [randint(-100, 100) for _ in range(10)]
print("Исходный массив из 10 случайных элементов ",orig_list)
print("Отсортированный массив по убыванию ",bubble_sort_opt(orig_list))
print("Сортировка 10 случайных элементов базовым алгоритмом          ",
    timeit(
        "bubble_sort(orig_list[:])",
        globals=globals(),
        number=1000))

print("Сортировка 10 случайных элементов опт.алгоритмом              ",
    timeit(
        "bubble_sort_opt(orig_list[:])",
        globals=globals(),
        number=1000))

orig_list = [_ for _ in range(10)]
orig_list = orig_list[::-1]
print("Исходный массив из 10 последовательных элементов ",orig_list)
print("Отсортированный массив по убыванию ",bubble_sort_opt(orig_list))
print("Сортировка 10 последовательных элементов базовым алгоритмом   ",
    timeit(
        "bubble_sort(orig_list[:])",
        globals=globals(),
        number=1000))

print("Сортировка 10 последовательных элементов опт.алгоритмом       ",
    timeit(
        "bubble_sort_opt(orig_list[:])",
        globals=globals(),
        number=1000))


# замеры 100
print()
orig_list = [randint(-100, 100) for _ in range(100)]
print("Сортировка 100 случайных элементов базовым алгоритмом         ",
    timeit(
        "bubble_sort(orig_list[:])",
        globals=globals(),
        number=1000))

print("Сортировка 100 случайных элементов опт.алгоритмом             ",
    timeit(
        "bubble_sort_opt(orig_list[:])",
        globals=globals(),
        number=1000))

orig_list = [_ for _ in range(100)]
orig_list = orig_list[::-1]
print("Сортировка 100 последовательных элементов базовым алгоритмом  ",
    timeit(
        "bubble_sort(orig_list[:])",
        globals=globals(),
        number=1000))

print("Сортировка 100 последовательных элементов опт.алгоритмом      ",
    timeit(
        "bubble_sort_opt(orig_list[:])",
        globals=globals(),
        number=1000))


# замеры 1000
print()
orig_list = [randint(-100, 100) for _ in range(1000)]
print("Сортировка 1000 случайных элементов базовым алгоритмом        ",
    timeit(
        "bubble_sort(orig_list[:])",
        globals=globals(),
        number=1000))

print("Сортировка 1000 случайных элементов опт.алгоритмом            ",
    timeit(
        "bubble_sort_opt(orig_list[:])",
        globals=globals(),
        number=1000))

orig_list = [_ for _ in range(1000)]
orig_list = orig_list[::-1]
print("Сортировка 1000 последовательных элементов базовым алгоритмом ",
    timeit(
        "bubble_sort(orig_list[:])",
        globals=globals(),
        number=1000))

print("Сортировка 1000 последовательных элементов опт.алгоритмом     ",
    timeit(
        "bubble_sort_opt(orig_list[:])",
        globals=globals(),
        number=1000))

"""
Исходный массив из 10 случайных элементов  [11, -49, -31, -2, 68, 73, -44, -40, 72, 77]
Отсортированный массив по убыванию  [77, 73, 72, 68, 11, -2, -31, -40, -44, -49]
Сортировка 10 случайных элементов базовым алгоритмом           0.004096799995750189
Сортировка 10 случайных элементов опт.алгоритмом               0.0007592999609187245
Исходный массив из 10 последовательных элементов  [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
Отсортированный массив по убыванию  [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
Сортировка 10 последовательных элементов базовым алгоритмом    0.0038835000013932586
Сортировка 10 последовательных элементов опт.алгоритмом        0.0007294000824913383

Сортировка 100 случайных элементов базовым алгоритмом          0.4537951999809593
Сортировка 100 случайных элементов опт.алгоритмом              0.47054569993633777
Сортировка 100 последовательных элементов базовым алгоритмом   0.25805730000138283
Сортировка 100 последовательных элементов опт.алгоритмом       0.0052177999168634415

Сортировка 1000 случайных элементов базовым алгоритмом         52.293685500044376
Сортировка 1000 случайных элементов опт.алгоритмом             53.691493100021034
Сортировка 1000 последовательных элементов базовым алгоритмом  28.035538000054657
Сортировка 1000 последовательных элементов опт.алгоритмом      0.060291900066658854

Добавленная в алгоритм переменная "f" позволяет избежать обработку
уже отсортиррованного массива.

При случайном наборе элементов исходного массива оба алгоритма показывают
схожие цифры выполнения. Хотя при малом количестве элементов массива
доработанный алгоритм показывает преимущество.

Чем сильнее исходный массив будет заранее отсортирован, тем эффективнее
будет работать доработанный алгоритм.
"""
