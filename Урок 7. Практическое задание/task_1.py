"""
Задание 1.

Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""
import random
from timeit import timeit


def generate_lst():
    lst = [random.randint(-100, 99) for i in range(100)]
    return lst


def bubble_sort_1(lst):
    for i in range(len(lst) - 1):
        for j in range(len(lst) - 1):
            if lst[j] < lst[j + 1]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
    return lst


def bubble_sort_2(lst):
    for i in range(len(lst) - 1):
        mooves = 0
        for j in range(len(lst) - 1):
            if lst[j] < lst[j + 1]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
                mooves += 1
        if mooves == 0:
            break
    return lst


unsorted_lst = generate_lst()

print(timeit("bubble_sort_1(unsorted_lst[:])", globals=globals(), number=1000))
print(timeit("bubble_sort_2(unsorted_lst[:])", globals=globals(), number=1000))
print(unsorted_lst)
print(bubble_sort_1(unsorted_lst[:]))
print(bubble_sort_2(unsorted_lst[:]))

"""
не сортированный
[10, 27, 34, -90, 33, 60, 69, 10, -24, -78, 44, -65, 0, 25, -97, -2, -9, 29, -7, 46, -34, 2, 95, 57, 43, -12, -7, 87,
 -62, 94, -87, -39, 52, -36, -86, 15, -87, -14, -50, -39, -72, -10, 53, -35, 64, -37, 63, 72, 44, 14, -14, 73, -71, 18,
  11, 26, -75, -20, 83, -99, 52, 81, -87, -99, -39, 31, -90, -100, -33, 12, 31, -3, 4, 73, 22, -32, 62, 84, 24, -1, 23,
   40, 67, 4, -77, -42, -48, 19, 97, -12, -96, -19, -22, -86, -58, -51, -51, 59, -48, -36]

"""
"""Сортированный пузырьком 
[97, 95, 94, 87, 84, 83, 81, 73, 73, 72, 69, 67, 64, 63, 62, 60, 59, 57, 53, 52, 52, 46, 
44, 44, 43, 40, 34, 33, 31, 31, 29, 27, 26, 25, 24, 23, 22, 19, 18, 15, 14, 12, 11, 10, 10, 4, 4, 2, 0, -1, -2, -3, 
-7, -7, -9, -10, -12, -12, -14, -14, -19, -20, -22, -24, -32, -33, -34, -35, -36, -36, -37, -39, -39, -39, -42, -48, 
-48, -50, -51, -51, -58, -62, -65, -71, -72, -75, -77, -78, -86, -86, -87, -87, -87, -90, -90, -96, -97, -99, -99, 
-100] 

"""
"""
Сортированный ускоренным пузырьком
[97, 95, 94, 87, 84, 83, 81, 73, 73, 72, 69, 67, 64, 63, 62, 60, 59, 57, 53, 52, 52, 46, 
44, 44, 43, 40, 34, 33, 31, 31, 29, 27, 26, 25, 24, 23, 22, 19, 18, 15, 14, 12, 11, 10, 10, 4, 4, 2, 0, -1, -2, -3, 
-7, -7, -9, -10, -12, -12, -14, -14, -19, -20, -22, -24, -32, -33, -34, -35, -36, -36, -37, -39, -39, -39, -42, -48, 
-48, -50, -51, -51, -58, -62, -65, -71, -72, -75, -77, -78, -86, -86, -87, -87, -87, -90, -90, -96, -97, -99, -99, 
-100] 

"""
"""
bubble_sort_1 - 0.5840605999983381
bubble_sort_2 - 0.5691359000047669
Наибольший эффект от умной функции мы получим если подадим на вход функции уже отсортированный список.
"""