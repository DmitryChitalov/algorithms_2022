"""
Задание 1.
Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""


from random import randint
import timeit


def sort_numbers(n):  # O(n**2)
    numbers = n.copy()
    i = 1
    while i < len(n):
        flag = False
        for j in range(len(n) - i):
            if n[j] < n[j + 1]:
                flag = True
                n[j], n[j + 1] = n[j + 1], n[j]
        if flag is False:
            break
        i += 1
    return f'Базовый массив: {numbers}\n' \
           f'Отсортированный массив: {n}'


if __name__ == '__main__':
    print(sort_numbers([randint(-100, 100) for _ in range(10)]))
    print(timeit.timeit(stmt='sort_numbers([randint(-100, 100) for _ in range(10)])',
                        globals=globals(),
                        number=1000))

# Время квадратично увеличивается с ростом числа элементов в массиве:
# 10 элементов:
# Базовый массив: [-11, 17, -28, -100, 85, -57, 81, 67, 58, -85]
# Отсортированный массив: [85, 81, 67, 58, 17, -11, -28, -57, -85, -100]
# 0.0134791
# 100 элементов за 0.5135687999999999
# 1000 элементов за 50.9453829
# Для формируемого из случайных чисел массива доработка не поможет.
# Если в функцию будут подаваться разные массивы, включая уже отсортированные,
# то последние будут возвращаться функцией сразу после первого прохождения в цикле while.
