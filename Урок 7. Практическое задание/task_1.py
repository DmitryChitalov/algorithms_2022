"""
Задание 1.

Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""
from random import randint
from timeit import timeit


def bubble_sort(lst_obj):
    n = 1
    flag = True
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                flag = False
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
        if flag:
            break
        else:
            n += 1
    return lst_obj


def bubble_sort_1(lst_obj):
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
        n += 1
    return lst_obj


def rezults(data):

    print(f"Длина списка {len(data)}")
    print(data)
    sorted_list = bubble_sort(data[:])
    print(sorted_list)
    print("Глупая функция и неотсортированный список    ",
        timeit(
            "bubble_sort_1(orig_list[:])",
            globals=globals(),
            number=1000))
    print("Умная функция и неотсортированный список     ",
        timeit(
            "bubble_sort(orig_list[:])",
            globals=globals(),
            number=1000))
    print("Глупая функция и список отсортированный за первый проход ",
          timeit(
              "bubble_sort_1(orig_list)",
              globals=globals(),
              number=1000))
    print("Умная функция и список отсортированный за первый проход  ",
          timeit(
              "bubble_sort(orig_list_2)",
              globals=globals(),
              number=1000))

if __name__ == "__main__":

    for i in [1, 2, 3]:
        orig_list = [randint(-100, 100) for _ in range(10**i)]
        orig_list_2 = orig_list[:]
        rezults(orig_list)

    """
    Листинг вывода
    Длина списка 10
    [90, 77, 13, -58, 18, 4, -39, -8, -68, 35]
    [90, 77, 35, 18, 13, 4, -8, -39, -58, -68]
    Глупая функция и неотсортированный список     0.014137243999812199
    Умная функция и неотсортированный список      0.014092391999838583
    Глупая функция и список отсортированный за первый проход  0.010419816999728937
    Умная функция и список отсортированный за первый проход   0.0018487180000192893
    Длина списка 100
    [-34, 47, -91, -37, 72, 92, 22, 36, -74, 44, -17, 91, -8, 26, 46, 78, 48, 57, 15, 7, 100, 50, 0, 2, 50, -36, -8, 23, 56, -96, 17, 40, 62, 84, -8, -35, 80, 1, -100, -19, 6, -97, -82, -14, 41, 70, 36, 43, 41, 83, 52, -28, -43, -81, -73, 62, 77, 53, -50, -64, 44, -56, 27, 36, 3, -90, -42, 31, -50, -17, 64, 87, -10, 87, -92, -62, 41, -61, -20, 95, 93, 46, 48, -70, 67, 90, -3, -41, -5, -43, -18, -81, 21, 18, 96, 27, 50, -59, -85, 34]
    [100, 96, 95, 93, 92, 91, 90, 87, 87, 84, 83, 80, 78, 77, 72, 70, 67, 64, 62, 62, 57, 56, 53, 52, 50, 50, 50, 48, 48, 47, 46, 46, 44, 44, 43, 41, 41, 41, 40, 36, 36, 36, 34, 31, 27, 27, 26, 23, 22, 21, 18, 17, 15, 7, 6, 3, 2, 1, 0, -3, -5, -8, -8, -8, -10, -14, -17, -17, -18, -19, -20, -28, -34, -35, -36, -37, -41, -42, -43, -43, -50, -50, -56, -59, -61, -62, -64, -70, -73, -74, -81, -81, -82, -85, -90, -91, -92, -96, -97, -100]
    Глупая функция и неотсортированный список     1.1585276790001444
    Умная функция и неотсортированный список      1.1675387219997901
    Глупая функция и список отсортированный за первый проход  0.7027705760001481
    Умная функция и список отсортированный за первый проход   0.014943772000151512
    Длина списка 1000
    [-68, -32, 94, -69, -20, -9, 61, 100, -97, -89, -8, 38, 9, 24, 20, -39, -55, -88, 18, 82, 13, -6, -1, 59, 89, -77, 56, -29, 62, -100, 84, -7, -95, 14, 94, 19, -94, 15, -54, -46, 54, 85, 1, -19, 41, -4, -30, 51, -98, 9, -56, 20, 55, -41, -43, -4, -4, 12, -55, -56, 0, -99, -71, -13, -94, 92, 94, 8, 17, -69, 55, -13, 51, -22, 75, 28, 27, 17, -41, -21, 49, -82, -57, -32, 61, 90, 27, 19, -49, -11, 62, 63, 86, 46, -53, 67, 8, -68, -96, -9, -37, 51, -49, -4, -32, -7, 90, -34, -85, -96, -54, 75, 73, 33, -51, -5, -54, -92, 26, -74, 93, -15, -17, -16, -2, 67, -36, 20, 66, 31, 87, 28, 19, -93, -83, 32, 47, 74, -18, 12, 36, -12, 14, -21, -78, -43, 46, 31, 6, -71, -3, -80, 17, -49, 40, 29, -63, -15, -40, 38, 50, 8, -72, 16, 44, -81, -98, 53, -17, 6, -84, 50, -4, 39, -24, 58, -62, 26, -55, -19, -97, -35, -73, -59, -43, 62, -50, 1, -51, 48, -88, 9, -69, -89, 2, -45, 93, 42, -96, -14, -94, 55, 99, -29, -87, -29, 4, -48, -7, 100, -37, -96, 67, 88, -15, -42, -72, 1, 2, -80, -74, 40, 88, -74, 42, -63, 5, -25, 51, -26, 46, -84, 40, -82, -28, -34, 98, 53, -86, -1, -48, -70, -11, 61, 58, -83, -98, 74, 95, 32, -56, -29, -85, -1, 61, -9, 66, -12, -49, 22, -75, -75, 24, 52, 20, 46, -68, 78, 89, 61, -27, -92, 86, 68, 38, 84, 88, -74, 64, -95, 36, -54, -26, -7, -12, -18, 9, -45, -74, 99, 89, -20, -56, 89, -31, 1, -6, 95, -100, 9, 57, -30, 41, 62, 62, 55, -12, -57, -43, 24, 50, 58, 13, -22, -77, -22, 81, -70, 39, -67, -30, -66, 32, 41, 6, 75, 84, -100, 75, 20, -95, 68, -97, 7, 62, 28, -55, -38, 44, 45, -77, 37, -57, -79, -73, 2, -82, -22, -5, 15, 60, -67, 95, 83, 99, 96, -55, 64, 74, 18, -28, 53, 5, 90, -12, 35, 89, -50, -40, 45, 3, -67, 45, -7, 20, -33, -46, 32, -14, -36, -37, 21, 64, 31, -38, 47, -75, -41, 61, 34, -55, 14, -70, -32, 58, 15, -28, -78, -84, -83, 60, -93, 37, -10, 68, 20, -60, -44, -12, 35, -91, 38, 20, -11, 33, 28, -86, 95, -74, 33, 71, 25, 31, -40, 28, 34, 80, -94, 34, 36, 93, 92, -68, -37, 84, -64, -95, 24, -42, 73, 49, -44, 0, 23, -18, 95, 83, 5, -26, 15, 60, -47, 90, -2, 88, 57, -32, -48, 100, -98, -34, 12, -72, -71, 84, -81, -52, 80, 67, 51, 21, -97, 79, 7, 63, 60, -38, -26, -92, -62, 26, 40, -93, -9, -99, -2, 15, 91, 24, -27, 59, -17, 23, -35, -26, 95, 52, -34, -3, -17, 85, -69, 56, -56, 3, 23, -12, 97, -23, 79, -62, -82, -51, -21, -37, -22, 56, 27, -18, 38, 79, 97, -98, -9, 4, -59, -6, 29, -15, -30, 66, 27, 1, -39, -1, -55, -31, -32, -44, 44, 58, -83, -24, -89, -20, 84, -94, -96, 71, 0, 56, -46, -63, -42, -11, -62, 75, -5, -89, 82, -60, 83, -67, -17, 7, 8, 50, -46, 94, 56, -78, 50, 89, -81, 63, -6, 45, -66, -82, 50, -24, 54, 20, -39, -45, -93, -64, -40, -37, 79, 75, 16, 2, -81, 51, -36, 20, 47, -20, -90, -26, 11, 14, -10, 4, -87, 73, 77, 47, 77, 93, -17, 63, 1, 26, 34, 48, -56, -95, -50, -3, 17, 47, -90, -77, 58, -17, 40, -37, -3, -35, -57, 38, -8, -91, -44, 53, -37, 22, -90, -4, -2, 34, -10, 59, 38, 24, 7, 37, 47, 25, 7, -32, -24, -58, 23, -29, 2, -45, 97, 57, -14, 39, -92, -91, 89, -3, 52, 83, -41, -27, -26, 4, 46, 9, 80, -17, 2, -9, -83, -79, -60, -100, 92, 43, 13, -61, 22, -29, 83, -60, 51, -37, 3, 74, 26, -78, 76, 99, -50, 13, -75, -75, -16, -64, -30, -42, -69, -74, -35, 14, -6, 47, -19, -34, -29, 75, -1, 38, 24, -88, -14, -33, -90, 15, -79, 24, -37, 82, -65, -41, 11, 52, -2, -88, -100, -20, 78, -41, -20, -89, 97, 6, -72, 14, 59, -99, -76, 41, 53, -99, 21, -87, 1, -52, -67, 74, -46, 3, -68, -20, 67, -99, -3, 60, -70, -40, -35, -56, -56, -8, -48, -87, -29, 99, 43, -71, 96, -32, 13, -39, -27, 6, -60, -48, 34, 40, -9, 55, -92, -60, 44, 55, 35, -11, 93, -23, -92, 88, 21, 11, 72, -32, -73, 62, -49, -27, 99, 91, -28, 48, -33, -95, -19, -85, -30, 88, -18, 30, 99, 18, 13, -15, -31, -26, -62, 34, 39, 87, 11, -40, -49, -77, 89, 61, -62, -19, -87, -46, 86, -51, -3, 29, 14, 40, 97, 91, -82, 36, -29, -15, -79, 6, 70, 11, -78, 60, 23, 22, 4, -99, 50, 0, -48, 28, -83, 8, -49, 36, -58, 88, -50, -69, -81, 58, 92, -85, -31, 5, -95, -96, 31, -18, -7, -86, -79, 79, -50, 24, -1, -56, -83, 97, 66, 22, -25, -33, 14, -2, 16, 14, 67, 76, -33, 14, 59, -95, 87, 50, 62, -3, 67, 88, -91, -81, -22, -38, -73, -70, 70, -32, -29, 26, -53, -86, -16, -89, 92, -26, 72, -36, -27, 75, 37, -12, 8, 99, 84, -55, 61, 84, -63, -9, -16, -20, -18, -6, -72, -24, 9, -28, -95, -68, -33, 39, -37, 67, 99, 58, -12, 53, 54, -42, 30, 19, 27, 76, -3, 73, -31, 76, 72, -67, -34, -68, 41, -18, -80, -99, 90, -59, -59, -77, -10, -68, -27, -51, 23, 18, 20, -86, 71, -78, -93, -84, -11, 37, 3, -43, 50]
    [100, 100, 100, 99, 99, 99, 99, 99, 99, 99, 99, 99, 98, 97, 97, 97, 97, 97, 97, 96, 96, 95, 95, 95, 95, 95, 95, 94, 94, 94, 94, 93, 93, 93, 93, 93, 92, 92, 92, 92, 92, 91, 91, 91, 90, 90, 90, 90, 90, 89, 89, 89, 89, 89, 89, 89, 89, 88, 88, 88, 88, 88, 88, 88, 88, 87, 87, 87, 86, 86, 86, 85, 85, 84, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 83, 82, 82, 82, 81, 80, 80, 80, 79, 79, 79, 79, 79, 78, 78, 77, 77, 76, 76, 76, 76, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 73, 73, 73, 73, 72, 72, 72, 71, 71, 71, 70, 70, 68, 68, 68, 67, 67, 67, 67, 67, 67, 67, 67, 66, 66, 66, 66, 64, 64, 64, 63, 63, 63, 63, 62, 62, 62, 62, 62, 62, 62, 62, 61, 61, 61, 61, 61, 61, 61, 61, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 58, 58, 58, 58, 58, 58, 58, 58, 57, 57, 57, 56, 56, 56, 56, 56, 55, 55, 55, 55, 55, 55, 54, 54, 54, 53, 53, 53, 53, 53, 53, 52, 52, 52, 52, 51, 51, 51, 51, 51, 51, 51, 50, 50, 50, 50, 50, 50, 50, 50, 50, 49, 49, 48, 48, 48, 47, 47, 47, 47, 47, 47, 47, 46, 46, 46, 46, 46, 45, 45, 45, 45, 44, 44, 44, 44, 43, 43, 42, 42, 41, 41, 41, 41, 41, 40, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 39, 38, 38, 38, 38, 38, 38, 38, 38, 37, 37, 37, 37, 37, 36, 36, 36, 36, 36, 35, 35, 35, 34, 34, 34, 34, 34, 34, 34, 33, 33, 33, 32, 32, 32, 32, 31, 31, 31, 31, 31, 30, 30, 29, 29, 29, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, 26, 26, 26, 26, 26, 26, 25, 25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 23, 23, 22, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17, 16, 16, 16, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 12, 12, 12, 11, 11, 11, 11, 11, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -4, -4, -4, -4, -5, -5, -5, -6, -6, -6, -6, -6, -6, -7, -7, -7, -7, -7, -7, -8, -8, -8, -9, -9, -9, -9, -9, -9, -9, -9, -10, -10, -10, -10, -11, -11, -11, -11, -11, -11, -12, -12, -12, -12, -12, -12, -12, -12, -12, -13, -13, -14, -14, -14, -14, -15, -15, -15, -15, -15, -15, -16, -16, -16, -16, -17, -17, -17, -17, -17, -17, -17, -17, -18, -18, -18, -18, -18, -18, -18, -18, -19, -19, -19, -19, -19, -20, -20, -20, -20, -20, -20, -20, -20, -21, -21, -21, -22, -22, -22, -22, -22, -22, -23, -23, -24, -24, -24, -24, -24, -25, -25, -26, -26, -26, -26, -26, -26, -26, -26, -26, -27, -27, -27, -27, -27, -27, -27, -28, -28, -28, -28, -28, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -30, -30, -30, -30, -30, -30, -31, -31, -31, -31, -31, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -33, -33, -33, -33, -33, -33, -34, -34, -34, -34, -34, -34, -35, -35, -35, -35, -35, -36, -36, -36, -36, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -38, -38, -38, -38, -39, -39, -39, -39, -40, -40, -40, -40, -40, -40, -41, -41, -41, -41, -41, -41, -42, -42, -42, -42, -42, -43, -43, -43, -43, -43, -44, -44, -44, -44, -45, -45, -45, -45, -46, -46, -46, -46, -46, -46, -47, -48, -48, -48, -48, -48, -48, -49, -49, -49, -49, -49, -49, -49, -50, -50, -50, -50, -50, -50, -51, -51, -51, -51, -51, -52, -52, -53, -53, -54, -54, -54, -54, -55, -55, -55, -55, -55, -55, -55, -55, -56, -56, -56, -56, -56, -56, -56, -56, -56, -57, -57, -57, -57, -58, -58, -59, -59, -59, -59, -60, -60, -60, -60, -60, -60, -61, -62, -62, -62, -62, -62, -62, -63, -63, -63, -63, -64, -64, -64, -65, -66, -66, -67, -67, -67, -67, -67, -67, -68, -68, -68, -68, -68, -68, -68, -68, -69, -69, -69, -69, -69, -69, -70, -70, -70, -70, -70, -71, -71, -71, -71, -72, -72, -72, -72, -72, -73, -73, -73, -73, -74, -74, -74, -74, -74, -74, -74, -75, -75, -75, -75, -75, -76, -77, -77, -77, -77, -77, -77, -78, -78, -78, -78, -78, -78, -79, -79, -79, -79, -79, -80, -80, -80, -81, -81, -81, -81, -81, -81, -82, -82, -82, -82, -82, -82, -83, -83, -83, -83, -83, -83, -83, -84, -84, -84, -84, -85, -85, -85, -85, -86, -86, -86, -86, -86, -87, -87, -87, -87, -87, -88, -88, -88, -88, -89, -89, -89, -89, -89, -89, -90, -90, -90, -90, -91, -91, -91, -91, -92, -92, -92, -92, -92, -92, -93, -93, -93, -93, -93, -94, -94, -94, -94, -94, -95, -95, -95, -95, -95, -95, -95, -95, -95, -96, -96, -96, -96, -96, -96, -97, -97, -97, -97, -98, -98, -98, -98, -98, -99, -99, -99, -99, -99, -99, -99, -100, -100, -100, -100, -100]
    Глупая функция и неотсортированный список     125.84588479800004
    Умная функция и неотсортированный список      126.55019594799978
    Глупая функция и список отсортированный за первый проход  71.05745073200069
    Умная функция и список отсортированный за первый проход   0.28995060499983083
    
    По замерам видно, что на несортированных массивах производжительность,
    ожедаемо, совпадает. Тогда как при сортировке в первом цикле и последующей
    обработке сортированного массива производительность "умной" функции 
    растет с увеличением числа элементов.
    """