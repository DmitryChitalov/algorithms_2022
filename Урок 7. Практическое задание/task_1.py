"""
Задание 1.

Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""

from random import randint
from timeit import timeit


def bubble_sort(arr):
    """ Сортирует массив по убыванию. Работает с исходным массивом """
    count = 0
    for i in range(1, len(arr)):
        for j in range(len(arr) - i):
            count += 1
            if arr[j] < arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return count


def bubble_sort_smart(arr):
    """ Сортирует массив по убыванию. Отсортированный не сортирует. Работает с исходным массивом """
    count = 0
    for i in range(1, len(arr)):
        flag = True
        for j in range(len(arr) - i):
            count += 1
            if arr[j] < arr[j + 1]:  # Если есть чего менять
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                flag = False  # Выходить рано
        if flag:  # Менять нечего
            break
    return count


if __name__ == '__main__':
    LIST = [randint(-100, 100) for _ in range(15)]
    LIST_COPY = LIST[:]
    print('Исходный массив:', LIST)
    print('Потребовалось проверок обычного пузыря:', bubble_sort(LIST_COPY))
    print('Отсортированный массив обычным пузырем:', LIST_COPY)
    LIST_COPY = LIST[:]
    print('Потребовалось проверок умного пузыря:', bubble_sort_smart(LIST_COPY))
    print('Отсортированный массив умным пузырем:', LIST_COPY)

    print(
        'Время сортировки методом пузырька:',
        timeit('bubble_sort(LIST[:])', globals=globals(), number=10_000)
    )
    print(
        'Время сортировки методом умного пузырька:',
        timeit('bubble_sort_smart(LIST[:])', globals=globals(), number=10_000)
    )
    print('Исходный массив после проверок: ', LIST)

    # Почти отсортированный массив
    LIST = [14, 15] + list(range(13, 0, -1))
    LIST_COPY = LIST[:]
    print('Исходный массив:', LIST)
    bubble_sort(LIST_COPY)
    print('Отсортированный массив:', LIST_COPY)

    print(
        'Время сортировки методом пузырька:',
        timeit('bubble_sort(LIST[:])', globals=globals(), number=10_000)
    )
    print(
        'Время сортировки методом умного пузырька:',
        timeit('bubble_sort_smart(LIST[:])', globals=globals(), number=10_000)
    )

"""
В неотсортированном массиве разница выполнения между обычным и умным пузырем в 5-6 сотых доли в пользу умного.
Модернизированная функция даст эффект только если массив уже отсортирован или количество операций до его полной 
сортировки невелико.

Исходный массив: [12, -60, -27, 70, -39, -77, 78, 59, -92, 65, 16, -78, -40, 55, 54]
Потребовалось проверок обычного пузыря: 105
Отсортированный массив обычным пузырем: [78, 70, 65, 59, 55, 54, 16, 12, -27, -39, -40, -60, -77, -78, -92]
Потребовалось проверок умного пузыря: 95
Отсортированный массив умным пузырем: [78, 70, 65, 59, 55, 54, 16, 12, -27, -39, -40, -60, -77, -78, -92]
Время сортировки методом пузырька: 0.23706416699997135
Время сортировки методом умного пузырька: 0.19858500999998796
Исходный массив после проверок:  [12, -60, -27, 70, -39, -77, 78, 59, -92, 65, 16, -78, -40, 55, 54]
Исходный массив: [14, 15, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
Отсортированный массив: [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
Время сортировки методом пузырька: 0.15694854499997746
Время сортировки методом умного пузырька: 0.03999316999988878
"""
