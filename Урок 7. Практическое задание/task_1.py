"""
Задание 1.

Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""

"""Сортировка пузырьком"""

from random import randint
from timeit import timeit


def bubble_sort(lst_obj: list) -> list:
    # Отсортировать список методом "Пузырька".
    n: int = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            if lst_obj[i+1] > lst_obj[i] :
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
        n += 1
    return lst_obj

def modified_bubble_sort(lst_obj: list) -> list:
    # Отсортировать список  модифицированным методом "Пузырька".
    n: int = 1
    while n < len(lst_obj):
        flag: bool = False # Добавлен флаг проверки на отсортированность списка.
        for i in range(len(lst_obj)-n):
            if lst_obj[i+1] > lst_obj[i] :
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                flag = True # Флаг принемает значение True в случае, когда список не отсортирован.
        if not flag: # В случае если флаг не поменял значение на True, список отсортирован и цикл прерывается.
            break
        n += 1
    return lst_obj


if __name__ == "__main__":
    array: list = [randint(-100, 100) for _ in range(20)]
    print(f"Массив {array}")

    print(f"10 замеров скорости выполнения классической сортировки пузырьком: {timeit('bubble_sort(array.copy())', globals=globals(), number=10)}")
    print(f"10 замеров скорости выполнения модифицированной сортировки пузырьком: {timeit('modified_bubble_sort(array.copy())', globals=globals(), number=10)}")

    print(f"100 замеров скорости выполнения классической сортировки пузырьком: {timeit('bubble_sort(array.copy())', globals=globals(), number=100)}")
    print(f"100 замеров скорости выполнения модифицированной сортировки пузырьком: {timeit('modified_bubble_sort(array.copy())', globals=globals(), number=100)}")
    
    print(f"1000 замеров скорости выполнения классической сортировки пузырьком: {timeit('bubble_sort(array.copy())', globals=globals(), number=1000)}")
    print(f"1000 замеров скорости выполнения модифицированной сортировки пузырьком: {timeit('modified_bubble_sort(array.copy())', globals=globals(), number=1000)}")

    print(f"10000 замеров скорости выполнения классической сортировки пузырьком: {timeit('bubble_sort(array.copy())', globals=globals(), number=10000)}")
    print(f"10000 замеров скорости выполнения модифицированной сортировки пузырьком: {timeit('modified_bubble_sort(array.copy())', globals=globals(), number=10000)}")
    
    
    """
        Массив [86, 85, 80, 76, 73, 10, 65, 20, 54, 52, 39, 40, 43, 30, 60, 12, 70, 0, -10, -12, -15]
        10 замеров скорости выполнения классической сортировки пузырьком: 0.0015996320871636271
        10 замеров скорости выполнения модифицированной сортировки пузырьком: 0.0015449500642716885
        100 замеров скорости выполнения классической сортировки пузырьком: 0.019892593030817807
        100 замеров скорости выполнения модифицированной сортировки пузырьком: 0.023251323029398918
        1000 замеров скорости выполнения классической сортировки пузырьком: 0.14217478106729686
        1000 замеров скорости выполнения модифицированной сортировки пузырьком: 0.1154578470159322
        10000 замеров скорости выполнения классической сортировки пузырьком: 1.1075947870267555
        10000 замеров скорости выполнения модифицированной сортировки пузырьком: 1.0028015188872814

        Массив [-54, 45, 65, 96, -82, 57, 55, 86, 71, -79, -41, 27, 60, 91, 89, 4, 93, 1, -5, -63]
        10 замеров скорости выполнения классической сортировки пузырьком: 0.002602127962745726
        10 замеров скорости выполнения модифицированной сортировки пузырьком: 0.0012303090188652277
        100 замеров скорости выполнения классической сортировки пузырьком: 0.026257722987793386
        100 замеров скорости выполнения модифицированной сортировки пузырьком: 0.0159771820763126
        1000 замеров скорости выполнения классической сортировки пузырьком: 0.4461982100037858
        1000 замеров скорости выполнения модифицированной сортировки пузырьком: 0.3432808059733361
        10000 замеров скорости выполнения классической сортировки пузырьком: 2.4965973349753767
        10000 замеров скорости выполнения модифицированной сортировки пузырьком: 2.648620525957085

        Массив [-100, 75, 37, -73, 76, -48, 27, -69, 29, 1, -68, 45, -63, 95, 51, 38, 62, -34, 36, -66]
        10 замеров скорости выполнения классической сортировки пузырьком: 0.0016494429437443614
        10 замеров скорости выполнения модифицированной сортировки пузырьком: 0.0018048359779641032
        100 замеров скорости выполнения классической сортировки пузырьком: 0.018146477988921106
        100 замеров скорости выполнения модифицированной сортировки пузырьком: 0.017791306949220598
        1000 замеров скорости выполнения классической сортировки пузырьком: 0.19726889894809574
        1000 замеров скорости выполнения модифицированной сортировки пузырьком: 0.21433076297398657
        10000 замеров скорости выполнения классической сортировки пузырьком: 2.2873586050700396
        10000 замеров скорости выполнения модифицированной сортировки пузырьком: 1.9595328599680215

        Вывод:
        Модифицированный алгоритм сортировки пузырьком покажет лучший результат выполнения в случае
        многократного повторения функции сортировки и в случае, когда список отсортирован, либо бли-
        зок к отсортированному состоянию. В случае однократного вызова случайного списка модифициро-
        ванный алгорритм чаще показывает результат хуже, чем обычный вариант сортировки пузырьком.
        Прирост производительности неочевиден.
    """