"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
from random import randrange
import timeit
from statistics import median

def timer(n):
    def deco(func,*args):
        def wrapper(*args):
            result = 0
            for _ in range(n):
                start = timeit.default_timer()
                ret = func(*args)
                result += timeit.default_timer() - start
            print(f"Время выполнения {result:.5f}")
            return ret

        return wrapper

    return deco

@timer(100)
def median1(lst):
    return median(lst)

print("11 чисел", end=' ')
median1([randrange(-100,100) for _ in range(11)])
print("101 число", end=' ')
median1([randrange(-100,100) for _ in range(101)])
print("1001 чисел", end=' ')
median1([randrange(-100,100) for _ in range(1001)])

"""
Для гномьей сортировки:
11 чисел Время выполнения 0.00011
101 число Время выполнения 0.00132
1001 число Время выполнения 0.06794

Для убрать максимум:
11 чисел Время выполнения 0.00018
101 число Время выполнения 0.00512
1001 число Время выполнения 0.50092

Для встроенной функции:
11 чисел Время выполнения 0.00006
101 число Время выполнения 0.00032
1001 чисел Время выполнения 0.00618

С очевидностью, встроенная функция выигрывает. Что и следовало ожидать - иначе зачем бы они нужны?
Неожиданно вышло, что проигрывает вариант с функцией max. То есть понятно, что он квадратичный тоже
(потому что max - линейная для любой реализации, и она в линейном цикле), но чтоб прям так?

Допилила сортировку - вроде бы Шелла, но я не на 100 процентов уверена, что именно она 
(что сортирует - факт). Получился интересный результат. Вот:

Гномья:
11 чисел Время выполнения 0.00013
101 число Время выполнения 0.00221
100001 число Время выполнения 1028.52046

Шелла:
11 чисел Время выполнения 0.00035
101 число Время выполнения 0.00433
100001 число Время выполнения 12.96127

Видно, что на 10 и 100 тысячах такой способ проигрывает (из-за более сложного алгоритма, видимо).
На 1000 результаты были сомнительные, и я поехала дальше. На 10 000 Шелла выиграла в пять раз (пять секунд 
гномьей против 1 у Шелла), и я не поленилась запустить на 100 000. Тут уже разница совсем в пользу Шелла.
"""