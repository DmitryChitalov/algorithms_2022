"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""

"""
Время выполнения при помощи сортировки:
При длине массива (2m + 1), где m = 5: 0.001645099837332964 сек.
При длине массива (2m + 1), где m = 50: 0.03460709983482957 сек.
При длине массива (2m + 1), где m = 500: 0.5130623001605272 сек.

Время выполнения без сортировки, с применением цикла for:
При длине массива (2m + 1), где m = 5: 0.0005113000515848398 сек.
При длине массива (2m + 1), где m = 50: 0.011920100077986717 сек.
При длине массива (2m + 1), где m = 500: 0.7763685998506844 сек.

Время выполнения встроенной функции statistics.median:
При длине массива (2m + 1), где m = 5: 0.00019940012134611607 сек.
При длине массива (2m + 1), где m = 50: 0.0007799000013619661 сек.
При длине массива (2m + 1), где m = 500: 0.012391800060868263 сек.

Без применения встроенной функции statistics.median получается следующее:
1. На маленьких длинах массива по времени быстрее можно найти медиану циклом.
2. На больших длинах массива при помощи сортировки Шелла медиана находится быстрее.

Самым эффективным способом оказался способ при помощи встроенной функции statistics.median.
Так как функция является встроенной, то скорее всего она уже оптимизирована для уменьшения затрат по времени.
"""

from statistics import median
from timeit import timeit
from random import randint


def search_median(lst_obj):
    return f'медиана равна: {median(lst_obj)}'


m = 5
array_11 = [randint(-100, 100) for _ in range(2 * m + 1)]
print(search_median(array_11[:]))
print(f"Время выполнения со списком из {2 * m + 1} элементов: "
      f"{timeit(f'search_median(array_11[:])', globals=globals(), number=100)} сек.\n")

m = 50
array_101 = [randint(-100, 100) for _ in range(2 * m + 1)]
print(search_median(array_101[:]))
print(f"Время выполнения со списком из {2 * m + 1} элементов: "
      f"{timeit(f'search_median(array_101[:])', globals=globals(), number=100)} сек.\n")

m = 500
array_1001 = [randint(-100, 100) for _ in range(2 * m + 1)]
print(search_median(array_1001[:]))
print(f"Время выполнения со списком из {2 * m + 1} элементов: "
      f"{timeit(f'search_median(array_1001[:])', globals=globals(), number=100)} сек.")
