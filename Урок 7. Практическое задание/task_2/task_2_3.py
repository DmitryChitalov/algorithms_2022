"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.
Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
from statistics import median
from random import randint
from timeit import timeit


def median_(array):
    return median(array)


# замеры для m = 10
m = 10
array = [randint(0, 100) for i in range(2 * m + 1)]

print(
    timeit(
        "median_(array[:])",
        globals=globals(),
        number=1000))

# замеры для m = 100
m = 100
array = [randint(0, 100) for i in range(2 * m + 1)]

print(
    timeit(
        "median_(array[:])",
        globals=globals(),
        number=1000))

# замеры для m = 1000
m = 1000
array = [randint(0, 100) for i in range(2 * m + 1)]

print(
    timeit(
        "median_(array[:])",
        globals=globals(),
        number=1000))


'''
0.0011191999999999869
0.0091609
0.24528759999999997
'''

'''
Самой быстрой является встроенная функция поиска медианы.
Для больших массивов наиболее медленным будет метод поиска медианы без сортировки (поиск и удаление из массива n//2
максимальных  элементов). 
Если сравнивать поиск медианы с помощью сортировки Шелла и без сортировки, то для небольших массивов время 
последней будет немного меньше, при этом для больших массивов время метода без сортировки значительно возрастает, 
по сравнению с сортировкой Шелла.
'''