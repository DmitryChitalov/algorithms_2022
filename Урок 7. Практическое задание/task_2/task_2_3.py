"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""


from random import randint
from timeit import timeit
from statistics import median


m = 10
list1 = [randint(-100, 100) for _ in range(2*m + 1)]
print(timeit("median(list1)", globals=globals(), number=1000))
print(list1[m])

m = 100
list2 = [randint(-100, 100) for _ in range(2*m + 1)]
print(timeit("median(list2)", globals=globals(), number=1000))
print(list2[m])

m = 1000
list3 = [randint(-100, 100) for _ in range(2*m + 1)]
print(timeit("median(list3)", globals=globals(), number=1000))
print(list3[m])


"""
10 элементов:
0.0020751999999999993
-12
100 элементов:
0.06356490000000001
-27
1000 элементов:
0.34935399999999994
-8

Вывод:
На малых массивах и массивах средних размеров разница между различными видами
сортировки практически не заметна.
Различия в скорости обработки массива возникает при его (массива) увеличении, что
выражается в увеличении времени обработки.
Поиск медианы быстрее всего прошел при применении "гномьей" сортировки, затем
встроенная, а метод без сортировки оказался наиболее медленным.
"""
