"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
from random import randint
from timeit import timeit
from statistics import median


m = 10
user_lst = [randint(0, 100) for _ in range(2*m+1)]
print(timeit("median(user_lst)", globals=globals(), number=100))

m = 100
user_lst = [randint(0, 100) for _ in range(2*m+1)]
print(timeit("median(user_lst)", globals=globals(), number=100))

m = 100
user_lst = [randint(0, 100) for _ in range(2*m+1)]
print(timeit("median(user_lst)", globals=globals(), number=100))

"""
Результаты:
5.720000626752153e-05
0.0011961999989580363
0.000545599999895785

Выводы:
Нахождение медианы с помощью встроенной функции является наиболее эффективным.
Сортировка кучей - на втором месте, т.к. сложность O(n log n).
При отсутствии сортировки сложность O(n2) - она самая медленная.
"""