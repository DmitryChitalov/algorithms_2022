"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
from statistics import median
from random import randint
import timeit

m = 500
li = [randint(-100, 100) for i in range(2*m+1)]
print(li)
def func(li):
    return median(li)

med = func(li[:])
res = timeit.timeit('func(li[:])', number=10, globals=globals())

print(f'медиана {med} по индексу {li.index(med)} в массиве длинной {len(li)} за {res} секунд')

'''
медиана -36 по индексу 9 в массиве длинной 11 за 1.187999987450894e-05 секунд

медиана -6 по индексу 92 в массиве длинной 101 за 5.818000045110239e-05 секунд

медиана 4 по индексу 147 в массиве длинной 1001 за 0.0008263939998869319 секунд

Выводы:
1) Самая быстрая встроенная функция mediana (поэтому она и встроена)
2) На втором месте сортировка кучей
3) Самая медленная определение медианы с помощью удаления максимального элемента. т.к. при 
    удалении из массива происходит его перестроение
'''