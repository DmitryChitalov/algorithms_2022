"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""

from random import randint
from timeit import timeit
from statistics import median

my_array = [randint(0, 100) for _ in range(11)]
my_array_2 = [randint(0, 100) for _ in range(101)]
my_array_3 = [randint(0, 100) for _ in range(1001)]

time_1 = timeit(
    'median(my_array[:])',
    globals=globals(),
    number=1000)

time_2 = timeit(
    'median(my_array_2[:])',
    globals=globals(),
    number=1000)

time_3 = timeit(
    'median(my_array_3[:])',
    globals=globals(),
    number=1000)

print(f'Original array with 10 elements- {my_array}')
print(f'Resulting array - {sorted(my_array[:])}')
print(f'Resulting median - {median(my_array[:])}')
print(f'Resulting time - {time_1}\n')
print(f'Original array with 100 elements- {my_array_2}')
print(f'Resulting array - {sorted(my_array_2[:])}')
print(f'Resulting median - {median(my_array_2[:])}')
print(f'Resulting time - {time_2}\n')
print(f'Original array with 1000 elements- {my_array_3}')
print(f'Resulting array - {sorted(my_array_3[:])}')
print(f'Resulting median - {median(my_array_3[:])}')
print(f'Resulting time - {time_3}')

'''
Original array with 10 elements- [14, 52, 34, 92, 67, 16, 57, 58, 85, 55, 25]
Resulting array - [14, 16, 25, 34, 52, 55, 57, 58, 67, 85, 92]
Resulting median - 55
Resulting time - 0.000662354999803938

Original array with 100 elements- [91, 33, 72, 67, 95, 83, 63, 92, 46, 28, 88, 73, 61, 62, 48, 93, 83, 80, 0, 60, 13, 11, 21, 34, 32, 57, 19, 4, 63, 31, 52, 32, 95, 31, 55, 99, 48, 44, 81, 11, 1, 21, 3, 16, 32, 89, 9, 91, 51, 99, 41, 70, 16, 95, 40, 93, 86, 31, 67, 20, 38, 51, 85, 0, 82, 15, 98, 96, 59, 30, 35, 57, 34, 16, 75, 70, 15, 32, 35, 73, 35, 95, 79, 95, 40, 79, 77, 87, 12, 7, 15, 21, 28, 71, 6, 81, 7, 69, 45, 55, 65]
Resulting array - [0, 0, 1, 3, 4, 6, 7, 7, 9, 11, 11, 12, 13, 15, 15, 15, 16, 16, 16, 19, 20, 21, 21, 21, 28, 28, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 34, 35, 35, 35, 38, 40, 40, 41, 44, 45, 46, 48, 48, 51, 51, 52, 55, 55, 57, 57, 59, 60, 61, 62, 63, 63, 65, 67, 67, 69, 70, 70, 71, 72, 73, 73, 75, 77, 79, 79, 80, 81, 81, 82, 83, 83, 85, 86, 87, 88, 89, 91, 91, 92, 93, 93, 95, 95, 95, 95, 95, 96, 98, 99, 99]
Resulting median - 51
Resulting time - 0.00561870599995018

Original array with 1000 elements- [34, 44, 3, 2, 90, 54, 95, 57, 16, 49, 41, 1, 37, 26, 36, 43, 32, 71, 59, 11, 92, 31, 55, 25, 24, 38, 35, 17, 31, 51, 44, 3, 31, 84, 96, 97, 69, 19, 0, 44, 36, 5, 55, 34, 34, 91, 82, 74, 8, 30, 7, 25, 30, 28, 8, 87, 26, 36, 39, 2, 65, 87, 52, 16, 47, 48, 37, 53, 3, 100, 62, 78, 31, 10, 52, 26, 89, 51, 7, 48, 12, 10, 45, 16, 7, 92, 68, 78, 37, 26, 47, 52, 43, 87, 83, 59, 78, 93, 46, 19, 18, 18, 36, 18, 69, 82, 37, 15, 83, 46, 59, 89, 7, 75, 76, 46, 55, 74, 20, 93, 94, 1, 37, 35, 84, 16, 63, 94, 14, 61, 70, 23, 46, 53, 60, 87, 25, 71, 64, 84, 80, 94, 32, 42, 70, 27, 54, 45, 65, 47, 57, 50, 74, 45, 59, 86, 46, 16, 29, 73, 60, 83, 27, 66, 62, 72, 75, 11, 49, 97, 61, 84, 80, 16, 58, 6, 95, 3, 8, 59, 9, 57, 75, 61, 96, 80, 74, 55, 24, 61, 2, 46, 46, 11, 0, 48, 82, 46, 36, 62, 100, 52, 34, 83, 0, 99, 54, 80, 49, 18, 93, 44, 99, 23, 90, 68, 47, 60, 4, 24, 64, 19, 26, 88, 98, 86, 66, 22, 56, 83, 94, 33, 2, 91, 73, 50, 51, 0, 76, 93, 36, 82, 38, 92, 44, 64, 62, 49, 21, 39, 98, 44, 88, 50, 0, 48, 44, 1, 7, 36, 21, 45, 26, 8, 26, 2, 35, 37, 97, 56, 0, 89, 18, 26, 0, 12, 2, 49, 93, 26, 20, 66, 82, 66, 40, 8, 52, 58, 64, 5, 74, 12, 14, 90, 38, 75, 28, 3, 23, 60, 80, 99, 39, 27, 62, 63, 20, 0, 56, 67, 65, 44, 57, 49, 90, 94, 44, 37, 24, 63, 70, 24, 53, 19, 58, 96, 84, 42, 3, 5, 13, 13, 74, 65, 51, 30, 41, 92, 93, 91, 17, 57, 73, 42, 75, 36, 71, 63, 2, 65, 20, 7, 27, 35, 60, 42, 73, 4, 66, 90, 8, 51, 17, 42, 26, 68, 21, 90, 65, 96, 27, 51, 1, 100, 13, 49, 32, 94, 24, 95, 16, 66, 21, 81, 62, 12, 53, 85, 28, 41, 0, 47, 0, 7, 97, 52, 42, 71, 74, 52, 54, 47, 97, 49, 99, 81, 57, 65, 100, 58, 86, 38, 50, 55, 42, 10, 17, 48, 54, 13, 36, 27, 39, 5, 14, 8, 88, 5, 74, 50, 36, 53, 44, 63, 97, 62, 28, 43, 69, 23, 47, 32, 68, 96, 11, 77, 14, 30, 51, 90, 20, 31, 80, 45, 28, 68, 27, 22, 57, 44, 83, 62, 69, 15, 69, 68, 87, 58, 59, 43, 70, 64, 75, 40, 10, 89, 6, 85, 61, 73, 43, 44, 70, 92, 79, 10, 34, 56, 72, 50, 88, 66, 71, 15, 34, 11, 67, 99, 24, 19, 90, 38, 11, 73, 13, 53, 33, 77, 84, 14, 3, 77, 46, 15, 73, 20, 92, 85, 92, 23, 97, 2, 2, 38, 43, 45, 78, 90, 90, 83, 62, 98, 95, 25, 55, 16, 24, 53, 82, 66, 10, 81, 12, 50, 22, 22, 13, 64, 31, 85, 10, 85, 61, 46, 48, 37, 12, 7, 73, 73, 75, 15, 28, 63, 64, 58, 53, 56, 14, 50, 88, 16, 3, 82, 96, 31, 37, 23, 72, 93, 80, 73, 24, 99, 97, 2, 7, 21, 43, 50, 13, 5, 34, 53, 57, 21, 21, 100, 43, 64, 6, 40, 4, 21, 52, 81, 48, 85, 71, 65, 7, 19, 72, 14, 100, 23, 19, 33, 37, 68, 23, 15, 80, 15, 17, 26, 83, 29, 16, 75, 25, 50, 78, 58, 97, 34, 70, 21, 100, 78, 56, 4, 65, 47, 63, 95, 33, 42, 12, 94, 77, 69, 55, 35, 41, 79, 22, 78, 77, 82, 99, 59, 71, 52, 10, 52, 62, 38, 85, 38, 35, 43, 27, 32, 11, 54, 56, 22, 93, 17, 75, 24, 20, 13, 88, 62, 66, 94, 59, 22, 38, 31, 55, 82, 66, 71, 51, 38, 8, 49, 12, 28, 3, 91, 73, 76, 29, 92, 94, 85, 42, 0, 59, 30, 87, 54, 76, 37, 64, 27, 66, 91, 15, 16, 47, 68, 9, 47, 18, 31, 52, 35, 75, 19, 94, 91, 97, 15, 90, 31, 53, 88, 25, 32, 37, 39, 2, 62, 71, 70, 75, 42, 32, 80, 98, 94, 7, 15, 85, 92, 61, 40, 42, 94, 5, 9, 51, 68, 41, 24, 8, 62, 75, 26, 42, 2, 91, 23, 91, 79, 35, 91, 70, 65, 50, 99, 16, 81, 39, 34, 9, 20, 89, 29, 60, 9, 97, 33, 4, 33, 56, 60, 15, 62, 5, 73, 95, 27, 64, 34, 54, 69, 9, 56, 41, 30, 33, 83, 18, 50, 31, 35, 7, 92, 55, 61, 23, 96, 72, 52, 93, 30, 98, 31, 60, 85, 88, 74, 44, 40, 91, 71, 89, 10, 18, 74, 37, 12, 58, 36, 2, 42, 24, 93, 75, 41, 31, 13, 91, 3, 6, 20, 99, 50, 27, 52, 32, 96, 73, 22, 29, 86, 71, 19, 47, 99, 33, 68, 13, 52, 2, 94, 43, 83, 8, 55, 49, 43, 19, 91, 9, 76, 38, 74, 4, 3, 93, 43, 53, 44, 13, 69, 92, 69, 19, 75, 57, 80, 95, 100, 25, 14, 5, 58, 15, 69, 66, 68, 63, 5, 99, 74, 44, 97, 81, 4, 91, 66, 9, 21, 2, 28, 39, 33, 57, 48, 63, 37, 75, 20, 80, 53, 90, 100, 0, 38, 31, 37, 6, 40, 99, 32, 45, 54, 16, 37, 20, 7, 72, 72, 98, 95, 2, 23, 64, 97, 50, 59, 61, 25, 14, 31, 29, 55, 67, 78, 41, 63, 97, 36, 18, 31, 56, 7, 19, 9, 90, 55, 60, 31, 2, 2, 38, 95, 49, 54, 11, 63, 67, 53, 57]
Resulting array - [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 96, 96, 96, 97,97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100]
Resulting median - 49
Resulting time - 0.12357203400006256

Получившиеся результаты

            Массив 10       Массив 100      Массив 1000

Пункт 1     0.012           0.217           2.843
Пункт 2     0.003           0.096           8.378
Пункт 3     0.001           0.006           0.124

Лучше всего очевидно работает встроенная функция Python. Это в цкелом логично, так как логично выбрать наиболее быстрый способ для получения медиана в качетве встроенного. Успела почитать совсем немного про эту встроенную функцию - но внутри встроенной функции используется какой-то метод сортировки и наверное один из наиболее быстрых.

Удаление n/2 - 1 максимальный элементов на массивах поменьше (11 и 101 элементов) работает быстрее чем сортировка Шелла. В целом логично, потому что нам фактически надо найти только один наибольший элемент и для получения его, мы "сортируем" массив n/2 - 1 раз, а не n раз как при сортировке.

На больших же массивах сортировка отработала быстрее - при определении максимального элемента массива, мы не определяем второй самый большой элемент и каждый раз приходится заново "сортировать". При обычной же сортировке у нас с каждым шагом, массив становится все более сортированным;
'''
