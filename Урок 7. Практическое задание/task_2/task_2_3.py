"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
from statistics import median
from random import randint
from timeit import timeit


def find_median(m):
    my_list = list(randint(1, 100) for _ in range(2 * m + 1))
    return median(my_list)

print(
    timeit(
        "find_median(10)",
        globals=globals(),
        number=1000))
print(
    timeit(
        "find_median(100)",
        globals=globals(),
        number=1000))
print(
    timeit(
        "find_median(1000)",
        globals=globals(),
        number=1000))

'''
0.013376400107517838
0.1276334000285715
1.2865792999509722
'''

'''
Результаты трех вычислений указаны в конце каждого файла.

Наиболее эффективным оказался способ с встроенной функцией median.
Самый неэффективный это первый метод - путем сортировки списка.
Но, при этом, с 10 элементами разница почти не заметна, а при увеличении количества значений списка до 1000 
в первом случае пришлось уйти пить кофе чтобы дождаться завершения вычисления, 
с помощью встроенной функции median почти мгновенно.
'''