"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
from statistics import median
from random import randint
from timeit import timeit


arr_10 = []
for _ in range(11):
    arr_10.append(randint(1, 10))


arr_100 = []
for _ in range(101):
    arr_100.append(randint(1, 100))


arr_1000 = []
for _ in range(1001):
    arr_1000.append(randint(1, 100))


print(arr_10)
print(arr_100)
print(arr_1000)
print(f'med:{(median(arr_10))}')
print(f'med:{(median(arr_100))}')
print(f'med:{(median(arr_1000))}')

m1 = """
median(arr_10)"""

m2 = """
median(arr_100)"""

m3 = """
median(arr_1000)"""

print(timeit(m1, globals=globals(), number=1000), 'm1')
print(timeit(m2, globals=globals(), number=1000), 'm2')
print(timeit(m3, globals=globals(), number=1000), 'm3')


"""
сортировка с помощью Шелла:
0.006747500039637089 s1   
0.1101071999873966 s2
2.9043251000111923 s3
довольно медленная 

поиск медианы в несортированном массиве:
0.0003312999615445733 u1 - 0.001305700046941638 u1    
0.027014399995096028 u2  - 0.09445680002681911 u2                             
0.08988400001544505 u3   - 6.398707100015599 u3                             
большая разница показаний, зависит от первоначального положения элементов, 
может занять очень много времени

поиск медины с помощью встроеной функции:
0.0003559000324457884 m1
0.0025170999579131603 m2
0.06048490002285689 m3
максимально быстро

Вывод: для данной задачи лучше всего подходит встроенная функция
"""


