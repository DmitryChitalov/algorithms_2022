"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
import statistics
from random import randint
from timeit import timeit

'''
Результаты замеров времени исполнения кода:
Для "гномьей" сортировки: 
0.0014348000986501575 => 11
0.7920447000069544 => 101
83.07762359990738 => 1001

Для цикла с отсеиванием максимальных элементов:
0.00185960007365793 => 11
0.046954400022514164 => 101
4.370190999936312 => 1001

Функция median из statistics
0.0004938999190926552 => 11
0.0029943999834358692 => 101
0.0739047999959439 => 1001

Выводы:
Как не трудно заметить самые лучшие результаты показала функция median из модуля statistics.
Поиск медианы через цикл с отсеиванием максимальных элементов заняла второе место.
А вот функция с "гномьей" сортировкой что-то не зашла, заняв соответственно последнее место.
'''

arr = [3, 1, 5, 4, 2, 6, 7]  # список для проверки
print(statistics.median(arr))  # => 4
orig_list = [randint(-100, 100) for _ in range(11)]

print(
    timeit(
        "(statistics.median(orig_list[:]))",
        globals=globals(),
        number=1000))

orig_list = [randint(-100, 100) for _ in range(101)]

print(
    timeit(
        "(statistics.median(orig_list[:]))",
        globals=globals(),
        number=1000))

orig_list = [randint(-100, 100) for _ in range(1001)]

print(
    timeit(
        "(statistics.median(orig_list[:]))",
        globals=globals(),
        number=1000))
