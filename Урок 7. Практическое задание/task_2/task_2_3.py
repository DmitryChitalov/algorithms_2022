"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
from random import randint
from statistics import median
from timeit import timeit


def median_search(m):
    data = [randint(0, 10000) for _ in range(2 * m + 1)]
    return median(data)


# замер 11
print(timeit("median_search(5)", globals=globals(), number=1000))

# замер 101
print(timeit("median_search(50)", globals=globals(), number=1000))

# замер 1001
print(timeit("median_search(500)", globals=globals(), number=1000))

"""
Замеры с сортировкой Гномья
0.022099420000813552
1.0141220969999267
66.35984792199997

Замеры без сортировки
0.022315579000860453
0.5901705840005889
32.83318424099889

Замеры с использованием встроенной функции поиск медианы
0.011455648998889956
0.09993780299919308
1.015527868999925

Вывод: сортировка ожидаемо оказалась медленнее всех ввиду большой сложности, 
лидером является встроенная функция, на то она и встроенная :). 
"""
