"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
from random import randint
from timeit import timeit
from statistics import median


m = 26
my_array = [randint(-100, 100) for _ in range(2 * m + 1)]
print(my_array)
print(f'Медиана ряда: {median(my_array)}')

# замеры 10
print(
    timeit(
        "median(my_array)",
        globals=globals(),
        number=1000))

# замеры 100
m = 126
my_array = [randint(-100, 100) for _ in range(2 * 100 + 1)]
print(
    timeit(
        "median(my_array)",
        globals=globals(),
        number=1000))

# замеры 1000
my_array = [randint(-100, 100) for _ in range(2 * 1000 + 1)]
print(
    timeit(
        "median(my_array)",
        globals=globals(),
        number=1000))

"""
0.0012584999999999957
0.005994200000000005
0.16364440000000002
"""

"""
Замеры времени поиска медианы:

1) С сортировкой:
0.0468733
0.24162740000000002
4.2714875

2) Без сортировки (удаление макс. числа):
0.00039189999999999364
0.0006898000000000043
0.03599150000000001

3) С помощью встроенной ф-ции median():
0.0012584999999999957
0.005994200000000005
0.16364440000000002

Наиболее эффективным оказался способ №2.
В результате функция median имеет не максимальную эффективность не смотря на то, что она встроенная.
"""











