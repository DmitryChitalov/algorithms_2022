"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.
Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.
Решите задачу тремя способами:
3) с помощью встроенной функции поиска медианы
сделайте замеры на массивах длиной 10, 100, 1000 элементов
В конце сделайте аналитику какой из трех способов оказался эффективнее
"""


from random import randint
from timeit import timeit
from statistics import median


def search_median(arr):
    return median(arr)


if __name__ == '__main__':
    # замеры 10
    m = 5
    orig_list = [randint(-100, 100) for _ in range(2*m+1)]
    print("Массив для обработки из 10 элементов:  ", orig_list)
    print(f'Отсортированный, для проверки, массив {sorted(orig_list)}')
    print(f'Медианой является число: {search_median(orig_list)}')
    print("Поиск медианы при 10 элементах массива   :  ", timeit(
            "search_median(orig_list[:])", globals=globals(), number=1000))

    # замеры 100
    print()
    m = 50
    orig_list = [randint(-100, 100) for _ in range(2 * m + 1)]
    print(f'Медианой является число: {search_median(orig_list[:])}')
    print("Поиск медианы при 100 элементах массива  :  ", timeit(
            "search_median(orig_list[:])", globals=globals(), number=1000))

    # замеры 1000
    print()
    m = 500
    orig_list = [randint(-100, 100) for _ in range(2 * m + 1)]
    print(f'Медианой является число: {search_median(orig_list[:])}')
    print("Поиск медианы при 1000 элементах массива : ", timeit(
            "search_median(orig_list[:])", globals=globals(), number=1000))

"""
Массив для обработки из 10 элементов:   [-59, -40, -64, -78, -85, -84, 65, -99, -86, -55, -23]
Отсортированный, для проверки, массив [-99, -86, -85, -84, -78, -64, -59, -55, -40, -23, 65]
Медианой является число: -64
Поиск медианы при 10 элементах массива   :   0.00045460008550435305

Медианой является число: 5
Поиск медианы при 100 элементах массива  :   0.0027033999795094132

Медианой является число: -1
Поиск медианы при 1000 элементах массива :  0.062374699977226555

Итог.
Самым эффективным является использование встроенной функции поиска медианы.
Худший показатель - у Гномьей сортировки, при большом и среднем массиве.
Сортировка Шелла - твёрдый середнячок.
"""
